# Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

# typed: true
# frozen_string_literal: true

require 'sorbet-runtime'
require 'faraday'

module UnifiedRubySDK
  module Operations

    class ListUnifiedWebhooksRequest < ::UnifiedRubySDK::Utils::FieldAugmented
      extend T::Sig


      field :env, T.nilable(String), { 'query_param': { 'field_name': 'env', 'style': 'form', 'explode': true } }

      field :limit, T.nilable(Float), { 'query_param': { 'field_name': 'limit', 'style': 'form', 'explode': true } }
      # Filter the results for webhooks for only this object
      field :object, T.nilable(String), { 'query_param': { 'field_name': 'object', 'style': 'form', 'explode': true } }

      field :offset, T.nilable(Float), { 'query_param': { 'field_name': 'offset', 'style': 'form', 'explode': true } }

      field :order, T.nilable(String), { 'query_param': { 'field_name': 'order', 'style': 'form', 'explode': true } }

      field :sort, T.nilable(String), { 'query_param': { 'field_name': 'sort', 'style': 'form', 'explode': true } }
      # Return only results whose updated date is equal or greater to this value
      field :updated_gte, T.nilable(DateTime), { 'query_param': { 'field_name': 'updated_gte', 'style': 'form', 'explode': true } }


      sig { params(env: T.nilable(String), limit: T.nilable(Float), object: T.nilable(String), offset: T.nilable(Float), order: T.nilable(String), sort: T.nilable(String), updated_gte: T.nilable(DateTime)).void }
      def initialize(env: nil, limit: nil, object: nil, offset: nil, order: nil, sort: nil, updated_gte: nil)
        @env = env
        @limit = limit
        @object = object
        @offset = offset
        @order = order
        @sort = sort
        @updated_gte = updated_gte
      end
    end


    class ListUnifiedWebhooksResponse < ::UnifiedRubySDK::Utils::FieldAugmented
      extend T::Sig

      # HTTP response content type for this operation
      field :content_type, String
      # Raw HTTP response; suitable for custom response parsing
      field :raw_response, Faraday::Response
      # HTTP response status code for this operation
      field :status_code, Integer
      # Successful
      field :webhooks, T.nilable(T::Array[Shared::Webhook])


      sig { params(content_type: String, raw_response: Faraday::Response, status_code: Integer, webhooks: T.nilable(T::Array[Shared::Webhook])).void }
      def initialize(content_type: nil, raw_response: nil, status_code: nil, webhooks: nil)
        @content_type = content_type
        @raw_response = raw_response
        @status_code = status_code
        @webhooks = webhooks
      end
    end
  end
end
