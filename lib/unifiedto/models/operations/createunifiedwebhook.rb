# Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

# typed: true
# frozen_string_literal: true

require 'sorbet-runtime'
require 'faraday'
require_relative '../shared/webhook'

module UnifiedRubySDK
  module Operations

    class CreateUnifiedWebhookRequest < ::UnifiedRubySDK::Utils::FieldAugmented
      extend T::Sig

      # When set, all of the existing data will sent back to your server.
      field :include_all, T.nilable(T::Boolean), { 'query_param': { 'field_name': 'include_all', 'style': 'form', 'explode': true } }

      field :webhook, T.nilable(Shared::Webhook), { 'request': { 'media_type': 'application/json' } }


      sig { params(include_all: T.nilable(T::Boolean), webhook: T.nilable(Shared::Webhook)).void }
      def initialize(include_all: nil, webhook: nil)
        @include_all = include_all
        @webhook = webhook
      end
    end


    class CreateUnifiedWebhookResponse < ::UnifiedRubySDK::Utils::FieldAugmented
      extend T::Sig

      # HTTP response content type for this operation
      field :content_type, String
      # Raw HTTP response; suitable for custom response parsing
      field :raw_response, Faraday::Response
      # HTTP response status code for this operation
      field :status_code, Integer
      # Successful
      field :webhook, T.nilable(Shared::Webhook)


      sig { params(content_type: String, raw_response: Faraday::Response, status_code: Integer, webhook: T.nilable(Shared::Webhook)).void }
      def initialize(content_type: nil, raw_response: nil, status_code: nil, webhook: nil)
        @content_type = content_type
        @raw_response = raw_response
        @status_code = status_code
        @webhook = webhook
      end
    end
  end
end
