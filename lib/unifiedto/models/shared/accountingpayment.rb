# Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

# typed: true
# frozen_string_literal: true

require 'sorbet-runtime'
require 'faraday'
require_relative '../shared/property_accountingpayment_raw'

module OpenApiSDK
  module Shared

    class AccountingPayment < OpenApiSDK::Utils::FieldAugmented
      extend T::Sig


      field :created_at, T.nilable(DateTime), { 'format_json': { 'letter_case': OpenApiSDK::Utils.field_name('created_at'), 'decoder': Utils.datetime_from_iso_format(true) } }

      field :currency, T.nilable(String), { 'format_json': { 'letter_case': OpenApiSDK::Utils.field_name('currency') } }

      field :customer_id, T.nilable(String), { 'format_json': { 'letter_case': OpenApiSDK::Utils.field_name('customer_id') } }

      field :id, T.nilable(String), { 'format_json': { 'letter_case': OpenApiSDK::Utils.field_name('id') } }

      field :invoice_ids, T.nilable(T::Array[String]), { 'format_json': { 'letter_case': OpenApiSDK::Utils.field_name('invoice_ids') } }

      field :notes, T.nilable(String), { 'format_json': { 'letter_case': OpenApiSDK::Utils.field_name('notes') } }

      field :payment_method, T.nilable(String), { 'format_json': { 'letter_case': OpenApiSDK::Utils.field_name('payment_method') } }

      field :raw, T.nilable(Shared::PropertyAccountingPaymentRaw), { 'format_json': { 'letter_case': OpenApiSDK::Utils.field_name('raw') } }

      field :reference, T.nilable(String), { 'format_json': { 'letter_case': OpenApiSDK::Utils.field_name('reference') } }

      field :total_amount, T.nilable(Float), { 'format_json': { 'letter_case': OpenApiSDK::Utils.field_name('total_amount') } }

      field :updated_at, T.nilable(DateTime), { 'format_json': { 'letter_case': OpenApiSDK::Utils.field_name('updated_at'), 'decoder': Utils.datetime_from_iso_format(true) } }


      sig { params(created_at: T.nilable(DateTime), currency: T.nilable(String), customer_id: T.nilable(String), id: T.nilable(String), invoice_ids: T.nilable(T::Array[String]), notes: T.nilable(String), payment_method: T.nilable(String), raw: T.nilable(Shared::PropertyAccountingPaymentRaw), reference: T.nilable(String), total_amount: T.nilable(Float), updated_at: T.nilable(DateTime)).void }
      def initialize(created_at: nil, currency: nil, customer_id: nil, id: nil, invoice_ids: nil, notes: nil, payment_method: nil, raw: nil, reference: nil, total_amount: nil, updated_at: nil)
        @created_at = created_at
        @currency = currency
        @customer_id = customer_id
        @id = id
        @invoice_ids = invoice_ids
        @notes = notes
        @payment_method = payment_method
        @raw = raw
        @reference = reference
        @total_amount = total_amount
        @updated_at = updated_at
      end
    end
  end
end
