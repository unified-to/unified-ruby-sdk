# Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

# typed: true
# frozen_string_literal: true

require 'sorbet-runtime'
require 'faraday'
require_relative '../shared/property_accountingitem_raw'

module UnifiedRubySDK
  module Shared
    # An item or product
    class AccountingItem < UnifiedRubySDK::Utils::FieldAugmented
      extend T::Sig


      field :name, String, { 'format_json': { 'letter_case': OpenApiSDK::Utils.field_name('name') } }

      field :created_at, T.nilable(DateTime), { 'format_json': { 'letter_case': OpenApiSDK::Utils.field_name('created_at'), 'decoder': Utils.datetime_from_iso_format(true) } }

      field :description, T.nilable(String), { 'format_json': { 'letter_case': OpenApiSDK::Utils.field_name('description') } }

      field :id, T.nilable(String), { 'format_json': { 'letter_case': OpenApiSDK::Utils.field_name('id') } }

      field :is_active, T.nilable(T::Boolean), { 'format_json': { 'letter_case': OpenApiSDK::Utils.field_name('is_active') } }

      field :is_taxable, T.nilable(T::Boolean), { 'format_json': { 'letter_case': OpenApiSDK::Utils.field_name('is_taxable') } }

      field :price, T.nilable(Float), { 'format_json': { 'letter_case': OpenApiSDK::Utils.field_name('price') } }

      field :public_description, T.nilable(String), { 'format_json': { 'letter_case': OpenApiSDK::Utils.field_name('public_description') } }

      field :quantity_on_hand, T.nilable(Float), { 'format_json': { 'letter_case': OpenApiSDK::Utils.field_name('quantity_on_hand') } }

      field :raw, T.nilable(Shared::PropertyAccountingItemRaw), { 'format_json': { 'letter_case': OpenApiSDK::Utils.field_name('raw') } }

      field :sku, T.nilable(String), { 'format_json': { 'letter_case': OpenApiSDK::Utils.field_name('sku') } }

      field :updated_at, T.nilable(DateTime), { 'format_json': { 'letter_case': OpenApiSDK::Utils.field_name('updated_at'), 'decoder': Utils.datetime_from_iso_format(true) } }


      sig { params(name: String, created_at: T.nilable(DateTime), description: T.nilable(String), id: T.nilable(String), is_active: T.nilable(T::Boolean), is_taxable: T.nilable(T::Boolean), price: T.nilable(Float), public_description: T.nilable(String), quantity_on_hand: T.nilable(Float), raw: T.nilable(Shared::PropertyAccountingItemRaw), sku: T.nilable(String), updated_at: T.nilable(DateTime)).void }
      def initialize(name: nil, created_at: nil, description: nil, id: nil, is_active: nil, is_taxable: nil, price: nil, public_description: nil, quantity_on_hand: nil, raw: nil, sku: nil, updated_at: nil)
        @name = name
        @created_at = created_at
        @description = description
        @id = id
        @is_active = is_active
        @is_taxable = is_taxable
        @price = price
        @public_description = public_description
        @quantity_on_hand = quantity_on_hand
        @raw = raw
        @sku = sku
        @updated_at = updated_at
      end
    end
  end
end
