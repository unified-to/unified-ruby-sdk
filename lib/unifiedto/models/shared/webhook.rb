# Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

# typed: true
# frozen_string_literal: true

require 'sorbet-runtime'
require 'faraday'

module OpenApiSDK
  module Shared

    class ObjectType < T::Enum
      enums do
        ACCOUNTING_CUSTOMER = new('accounting_customer')
        ACCOUNTING_INVOICE = new('accounting_invoice')
        ACCOUNTING_PAYMENT = new('accounting_payment')
        ATS_APPLICATION = new('ats_application')
        ATS_CANDIDATE = new('ats_candidate')
        ATS_DOCUMENT = new('ats_document')
        ATS_INTERVIEW = new('ats_interview')
        ATS_JOB = new('ats_job')
        ATS_SCORECARD = new('ats_scorecard')
        CRM_COMPANY = new('crm_company')
        CRM_CONTACT = new('crm_contact')
        CRM_DEAL = new('crm_deal')
        CRM_EVENT = new('crm_event')
        CRM_FILE = new('crm_file')
        CRM_LEAD = new('crm_lead')
        CRM_PIPELINE = new('crm_pipeline')
        HRIS_EMPLOYEE = new('hris_employee')
        HRIS_GROUP = new('hris_group')
        MARTECH_LIST = new('martech_list')
        MARTECH_MEMBER = new('martech_member')
        PASSTHROUGH = new('passthrough')
        TICKETING_NOTE = new('ticketing_note')
        TICKETING_TICKET = new('ticketing_ticket')
        TICKETING_CUSTOMER = new('ticketing_customer')
        UC_CONTACT = new('uc_contact')
        UC_CALL = new('uc_call')
        ENRICH_PERSON = new('enrich_person')
        ENRICH_COMPANY = new('enrich_company')
      end
    end


    # A webhook is used to POST new/updated information to your server.
    class Webhook < OpenApiSDK::Utils::FieldAugmented
      extend T::Sig


      field :connection_id, String, { 'format_json': { 'letter_case': OpenApiSDK::Utils.field_name('connection_id') } }

      field :events, T::Array[Shared::PropertyWebhookEvents], { 'format_json': { 'letter_case': OpenApiSDK::Utils.field_name('events') } }

      field :hook_url, String, { 'format_json': { 'letter_case': OpenApiSDK::Utils.field_name('hook_url') } }

      field :integration_type, String, { 'format_json': { 'letter_case': OpenApiSDK::Utils.field_name('integration_type') } }

      field :interval, Float, { 'format_json': { 'letter_case': OpenApiSDK::Utils.field_name('interval') } }

      field :object_type, Shared::ObjectType, { 'format_json': { 'letter_case': OpenApiSDK::Utils.field_name('object_type'), 'decoder': Utils.enum_from_string(Shared::ObjectType, false) } }

      field :workspace_id, String, { 'format_json': { 'letter_case': OpenApiSDK::Utils.field_name('workspace_id') } }

      field :checked_at, T.nilable(DateTime), { 'format_json': { 'letter_case': OpenApiSDK::Utils.field_name('checked_at'), 'decoder': Utils.datetime_from_iso_format(true) } }

      field :created_at, T.nilable(DateTime), { 'format_json': { 'letter_case': OpenApiSDK::Utils.field_name('created_at'), 'decoder': Utils.datetime_from_iso_format(true) } }

      field :environment, T.nilable(String), { 'format_json': { 'letter_case': OpenApiSDK::Utils.field_name('environment') } }

      field :id, T.nilable(String), { 'format_json': { 'letter_case': OpenApiSDK::Utils.field_name('id') } }

      field :include_raw, T.nilable(T::Boolean), { 'format_json': { 'letter_case': OpenApiSDK::Utils.field_name('include_raw') } }
      # integration-specific subscriptions IDs
      field :subscriptions, T.nilable(T::Array[String]), { 'format_json': { 'letter_case': OpenApiSDK::Utils.field_name('subscriptions') } }

      field :updated_at, T.nilable(DateTime), { 'format_json': { 'letter_case': OpenApiSDK::Utils.field_name('updated_at'), 'decoder': Utils.datetime_from_iso_format(true) } }


      sig { params(connection_id: String, events: T::Array[Shared::PropertyWebhookEvents], hook_url: String, integration_type: String, interval: Float, object_type: Shared::ObjectType, workspace_id: String, checked_at: T.nilable(DateTime), created_at: T.nilable(DateTime), environment: T.nilable(String), id: T.nilable(String), include_raw: T.nilable(T::Boolean), subscriptions: T.nilable(T::Array[String]), updated_at: T.nilable(DateTime)).void }
      def initialize(connection_id: nil, events: nil, hook_url: nil, integration_type: nil, interval: nil, object_type: nil, workspace_id: nil, checked_at: nil, created_at: nil, environment: nil, id: nil, include_raw: nil, subscriptions: nil, updated_at: nil)
        @connection_id = connection_id
        @events = events
        @hook_url = hook_url
        @integration_type = integration_type
        @interval = interval
        @object_type = object_type
        @workspace_id = workspace_id
        @checked_at = checked_at
        @created_at = created_at
        @environment = environment
        @id = id
        @include_raw = include_raw
        @subscriptions = subscriptions
        @updated_at = updated_at
      end
    end
  end
end
