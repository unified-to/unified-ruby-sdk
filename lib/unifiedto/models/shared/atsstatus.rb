# Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

# typed: true
# frozen_string_literal: true

require 'sorbet-runtime'
require 'faraday'
require_relative '../shared/property_atsstatus_raw'

module UnifiedRubySDK
  module Shared

    class AtsStatusStatus < T::Enum
      enums do
        NEW = new('NEW')
        REVIEWING = new('REVIEWING')
        SCREENING = new('SCREENING')
        SUBMITTED = new('SUBMITTED')
        FIRST_INTERVIEW = new('FIRST_INTERVIEW')
        SECOND_INTERVIEW = new('SECOND_INTERVIEW')
        THIRD_INTERVIEW = new('THIRD_INTERVIEW')
        BACKGROUND_CHECK = new('BACKGROUND_CHECK')
        OFFERED = new('OFFERED')
        ACCEPTED = new('ACCEPTED')
        HIRED = new('HIRED')
        REJECTED = new('REJECTED')
        WITHDRAWN = new('WITHDRAWN')
      end
    end



    class AtsStatus < UnifiedRubySDK::Utils::FieldAugmented
      extend T::Sig


      field :original_status, String, { 'format_json': { 'letter_case': OpenApiSDK::Utils.field_name('original_status') } }

      field :description, T.nilable(String), { 'format_json': { 'letter_case': OpenApiSDK::Utils.field_name('description') } }

      field :id, T.nilable(String), { 'format_json': { 'letter_case': OpenApiSDK::Utils.field_name('id') } }

      field :raw, T.nilable(Shared::PropertyAtsStatusRaw), { 'format_json': { 'letter_case': OpenApiSDK::Utils.field_name('raw') } }

      field :status, T.nilable(Shared::AtsStatusStatus), { 'format_json': { 'letter_case': OpenApiSDK::Utils.field_name('status'), 'decoder': Utils.enum_from_string(Shared::AtsStatusStatus, true) } }


      sig { params(original_status: String, description: T.nilable(String), id: T.nilable(String), raw: T.nilable(Shared::PropertyAtsStatusRaw), status: T.nilable(Shared::AtsStatusStatus)).void }
      def initialize(original_status: nil, description: nil, id: nil, raw: nil, status: nil)
        @original_status = original_status
        @description = description
        @id = id
        @raw = raw
        @status = status
      end
    end
  end
end
