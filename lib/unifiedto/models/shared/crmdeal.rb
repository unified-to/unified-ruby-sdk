# Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

# typed: true
# frozen_string_literal: true

require 'sorbet-runtime'
require 'faraday'
require_relative '../shared/property_crmdeal_raw'

module OpenApiSDK
  module Shared
    # A deal represents an opportunity with companies and/or contacts
    class CrmDeal < OpenApiSDK::Utils::FieldAugmented
      extend T::Sig


      field :amount, T.nilable(Float), { 'format_json': { 'letter_case': OpenApiSDK::Utils.field_name('amount') } }

      field :closed_at, T.nilable(DateTime), { 'format_json': { 'letter_case': OpenApiSDK::Utils.field_name('closed_at'), 'decoder': Utils.datetime_from_iso_format(true) } }

      field :created_at, T.nilable(DateTime), { 'format_json': { 'letter_case': OpenApiSDK::Utils.field_name('created_at'), 'decoder': Utils.datetime_from_iso_format(true) } }

      field :currency, T.nilable(String), { 'format_json': { 'letter_case': OpenApiSDK::Utils.field_name('currency') } }

      field :id, T.nilable(String), { 'format_json': { 'letter_case': OpenApiSDK::Utils.field_name('id') } }

      field :lost_reason, T.nilable(String), { 'format_json': { 'letter_case': OpenApiSDK::Utils.field_name('lost_reason') } }

      field :name, T.nilable(String), { 'format_json': { 'letter_case': OpenApiSDK::Utils.field_name('name') } }

      field :pipeline, T.nilable(String), { 'format_json': { 'letter_case': OpenApiSDK::Utils.field_name('pipeline') } }

      field :probability, T.nilable(Float), { 'format_json': { 'letter_case': OpenApiSDK::Utils.field_name('probability') } }
      # The raw data returned by the integration for this deal
      field :raw, T.nilable(Shared::PropertyCrmDealRaw), { 'format_json': { 'letter_case': OpenApiSDK::Utils.field_name('raw') } }

      field :source, T.nilable(String), { 'format_json': { 'letter_case': OpenApiSDK::Utils.field_name('source') } }

      field :stage, T.nilable(String), { 'format_json': { 'letter_case': OpenApiSDK::Utils.field_name('stage') } }

      field :tags, T.nilable(T::Array[String]), { 'format_json': { 'letter_case': OpenApiSDK::Utils.field_name('tags') } }

      field :updated_at, T.nilable(DateTime), { 'format_json': { 'letter_case': OpenApiSDK::Utils.field_name('updated_at'), 'decoder': Utils.datetime_from_iso_format(true) } }

      field :won_reason, T.nilable(String), { 'format_json': { 'letter_case': OpenApiSDK::Utils.field_name('won_reason') } }


      sig { params(amount: T.nilable(Float), closed_at: T.nilable(DateTime), created_at: T.nilable(DateTime), currency: T.nilable(String), id: T.nilable(String), lost_reason: T.nilable(String), name: T.nilable(String), pipeline: T.nilable(String), probability: T.nilable(Float), raw: T.nilable(Shared::PropertyCrmDealRaw), source: T.nilable(String), stage: T.nilable(String), tags: T.nilable(T::Array[String]), updated_at: T.nilable(DateTime), won_reason: T.nilable(String)).void }
      def initialize(amount: nil, closed_at: nil, created_at: nil, currency: nil, id: nil, lost_reason: nil, name: nil, pipeline: nil, probability: nil, raw: nil, source: nil, stage: nil, tags: nil, updated_at: nil, won_reason: nil)
        @amount = amount
        @closed_at = closed_at
        @created_at = created_at
        @currency = currency
        @id = id
        @lost_reason = lost_reason
        @name = name
        @pipeline = pipeline
        @probability = probability
        @raw = raw
        @source = source
        @stage = stage
        @tags = tags
        @updated_at = updated_at
        @won_reason = won_reason
      end
    end
  end
end
