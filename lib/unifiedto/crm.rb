# Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

# typed: true
# frozen_string_literal: true

require 'faraday'
require 'faraday/multipart'
require 'sorbet-runtime'

module OpenApiSDK
  extend T::Sig
  class Crm

    extend T::Sig
    sig { params(sdk_config: SDKConfiguration).void }
    def initialize(sdk_config)
      @sdk_configuration = sdk_config
    end

    sig { params(connection_id: String, crm_company: T.nilable(Shared::CrmCompany)).returns(Utils::FieldAugmented) }
    def create_crm_company(connection_id, crm_company = nil)
      # create_crm_company - Create a company
      request = Operations::CreateCrmCompanyRequest.new(
        
        connection_id: connection_id,
        crm_company: crm_company
      )
      url, params = @sdk_configuration.get_server_details
      base_url = Utils.template_url(url, params)
      url = Utils.generate_url(
        Operations::CreateCrmCompanyRequest,
        base_url,
        '/crm/{connection_id}/company',
        request
      )
      headers = {}
      req_content_type, data, form = Utils.serialize_request_body(request, :crm_company, :json)
      headers['content-type'] = req_content_type
      headers['Accept'] = 'application/json'
      headers['user-agent'] = @sdk_configuration.user_agent

      r = @sdk_configuration.client.post(url) do |req|
        req.headers = headers
        Utils.configure_request_security(req, @sdk_configuration.security) if !@sdk_configuration.nil? && !@sdk_configuration.security.nil?
        if form
          req.body = Utils.encode_form(form)
        elsif Utils.match_content_type(req_content_type, 'application/x-www-form-urlencoded')
          req.body = URI.encode_www_form(data)
        else
          req.body = data
        end
      end

      content_type = r.headers.fetch('Content-Type', 'application/octet-stream')

      res = Operations::CreateCrmCompanyResponse.new(
        status_code: r.status, content_type: content_type, raw_response: r
      )
      if r.status == 200
        if Utils.match_content_type(content_type, 'application/json')
          out = Utils.unmarshal_complex(r.env.response_body, Shared::CrmCompany)
          res.crm_company = out
        end
      end
      res
    end

    sig { params(connection_id: String, crm_contact: T.nilable(Shared::CrmContact)).returns(Utils::FieldAugmented) }
    def create_crm_contact(connection_id, crm_contact = nil)
      # create_crm_contact - Create a contact
      request = Operations::CreateCrmContactRequest.new(
        
        connection_id: connection_id,
        crm_contact: crm_contact
      )
      url, params = @sdk_configuration.get_server_details
      base_url = Utils.template_url(url, params)
      url = Utils.generate_url(
        Operations::CreateCrmContactRequest,
        base_url,
        '/crm/{connection_id}/contact',
        request
      )
      headers = {}
      req_content_type, data, form = Utils.serialize_request_body(request, :crm_contact, :json)
      headers['content-type'] = req_content_type
      headers['Accept'] = 'application/json'
      headers['user-agent'] = @sdk_configuration.user_agent

      r = @sdk_configuration.client.post(url) do |req|
        req.headers = headers
        Utils.configure_request_security(req, @sdk_configuration.security) if !@sdk_configuration.nil? && !@sdk_configuration.security.nil?
        if form
          req.body = Utils.encode_form(form)
        elsif Utils.match_content_type(req_content_type, 'application/x-www-form-urlencoded')
          req.body = URI.encode_www_form(data)
        else
          req.body = data
        end
      end

      content_type = r.headers.fetch('Content-Type', 'application/octet-stream')

      res = Operations::CreateCrmContactResponse.new(
        status_code: r.status, content_type: content_type, raw_response: r
      )
      if r.status == 200
        if Utils.match_content_type(content_type, 'application/json')
          out = Utils.unmarshal_complex(r.env.response_body, Shared::CrmContact)
          res.crm_contact = out
        end
      end
      res
    end

    sig { params(connection_id: String, crm_deal: T.nilable(Shared::CrmDeal)).returns(Utils::FieldAugmented) }
    def create_crm_deal(connection_id, crm_deal = nil)
      # create_crm_deal - Create a deal
      request = Operations::CreateCrmDealRequest.new(
        
        connection_id: connection_id,
        crm_deal: crm_deal
      )
      url, params = @sdk_configuration.get_server_details
      base_url = Utils.template_url(url, params)
      url = Utils.generate_url(
        Operations::CreateCrmDealRequest,
        base_url,
        '/crm/{connection_id}/deal',
        request
      )
      headers = {}
      req_content_type, data, form = Utils.serialize_request_body(request, :crm_deal, :json)
      headers['content-type'] = req_content_type
      headers['Accept'] = 'application/json'
      headers['user-agent'] = @sdk_configuration.user_agent

      r = @sdk_configuration.client.post(url) do |req|
        req.headers = headers
        Utils.configure_request_security(req, @sdk_configuration.security) if !@sdk_configuration.nil? && !@sdk_configuration.security.nil?
        if form
          req.body = Utils.encode_form(form)
        elsif Utils.match_content_type(req_content_type, 'application/x-www-form-urlencoded')
          req.body = URI.encode_www_form(data)
        else
          req.body = data
        end
      end

      content_type = r.headers.fetch('Content-Type', 'application/octet-stream')

      res = Operations::CreateCrmDealResponse.new(
        status_code: r.status, content_type: content_type, raw_response: r
      )
      if r.status == 200
        if Utils.match_content_type(content_type, 'application/json')
          out = Utils.unmarshal_complex(r.env.response_body, Shared::CrmDeal)
          res.crm_deal = out
        end
      end
      res
    end

    sig { params(connection_id: String, crm_event: T.nilable(Shared::CrmEvent)).returns(Utils::FieldAugmented) }
    def create_crm_event(connection_id, crm_event = nil)
      # create_crm_event - Create a event
      request = Operations::CreateCrmEventRequest.new(
        
        connection_id: connection_id,
        crm_event: crm_event
      )
      url, params = @sdk_configuration.get_server_details
      base_url = Utils.template_url(url, params)
      url = Utils.generate_url(
        Operations::CreateCrmEventRequest,
        base_url,
        '/crm/{connection_id}/event',
        request
      )
      headers = {}
      req_content_type, data, form = Utils.serialize_request_body(request, :crm_event, :json)
      headers['content-type'] = req_content_type
      headers['Accept'] = 'application/json'
      headers['user-agent'] = @sdk_configuration.user_agent

      r = @sdk_configuration.client.post(url) do |req|
        req.headers = headers
        Utils.configure_request_security(req, @sdk_configuration.security) if !@sdk_configuration.nil? && !@sdk_configuration.security.nil?
        if form
          req.body = Utils.encode_form(form)
        elsif Utils.match_content_type(req_content_type, 'application/x-www-form-urlencoded')
          req.body = URI.encode_www_form(data)
        else
          req.body = data
        end
      end

      content_type = r.headers.fetch('Content-Type', 'application/octet-stream')

      res = Operations::CreateCrmEventResponse.new(
        status_code: r.status, content_type: content_type, raw_response: r
      )
      if r.status == 200
        if Utils.match_content_type(content_type, 'application/json')
          out = Utils.unmarshal_complex(r.env.response_body, Shared::CrmEvent)
          res.crm_event = out
        end
      end
      res
    end

    sig { params(connection_id: String, crm_file: T.nilable(Shared::CrmFile)).returns(Utils::FieldAugmented) }
    def create_crm_file(connection_id, crm_file = nil)
      # create_crm_file - Create a file
      request = Operations::CreateCrmFileRequest.new(
        
        connection_id: connection_id,
        crm_file: crm_file
      )
      url, params = @sdk_configuration.get_server_details
      base_url = Utils.template_url(url, params)
      url = Utils.generate_url(
        Operations::CreateCrmFileRequest,
        base_url,
        '/crm/{connection_id}/file',
        request
      )
      headers = {}
      req_content_type, data, form = Utils.serialize_request_body(request, :crm_file, :json)
      headers['content-type'] = req_content_type
      headers['Accept'] = 'application/json'
      headers['user-agent'] = @sdk_configuration.user_agent

      r = @sdk_configuration.client.post(url) do |req|
        req.headers = headers
        Utils.configure_request_security(req, @sdk_configuration.security) if !@sdk_configuration.nil? && !@sdk_configuration.security.nil?
        if form
          req.body = Utils.encode_form(form)
        elsif Utils.match_content_type(req_content_type, 'application/x-www-form-urlencoded')
          req.body = URI.encode_www_form(data)
        else
          req.body = data
        end
      end

      content_type = r.headers.fetch('Content-Type', 'application/octet-stream')

      res = Operations::CreateCrmFileResponse.new(
        status_code: r.status, content_type: content_type, raw_response: r
      )
      if r.status == 200
        if Utils.match_content_type(content_type, 'application/json')
          out = Utils.unmarshal_complex(r.env.response_body, Shared::CrmFile)
          res.crm_file = out
        end
      end
      res
    end

    sig { params(connection_id: String, crm_lead: T.nilable(Shared::CrmLead)).returns(Utils::FieldAugmented) }
    def create_crm_lead(connection_id, crm_lead = nil)
      # create_crm_lead - Create a lead
      request = Operations::CreateCrmLeadRequest.new(
        
        connection_id: connection_id,
        crm_lead: crm_lead
      )
      url, params = @sdk_configuration.get_server_details
      base_url = Utils.template_url(url, params)
      url = Utils.generate_url(
        Operations::CreateCrmLeadRequest,
        base_url,
        '/crm/{connection_id}/lead',
        request
      )
      headers = {}
      req_content_type, data, form = Utils.serialize_request_body(request, :crm_lead, :json)
      headers['content-type'] = req_content_type
      headers['Accept'] = 'application/json'
      headers['user-agent'] = @sdk_configuration.user_agent

      r = @sdk_configuration.client.post(url) do |req|
        req.headers = headers
        Utils.configure_request_security(req, @sdk_configuration.security) if !@sdk_configuration.nil? && !@sdk_configuration.security.nil?
        if form
          req.body = Utils.encode_form(form)
        elsif Utils.match_content_type(req_content_type, 'application/x-www-form-urlencoded')
          req.body = URI.encode_www_form(data)
        else
          req.body = data
        end
      end

      content_type = r.headers.fetch('Content-Type', 'application/octet-stream')

      res = Operations::CreateCrmLeadResponse.new(
        status_code: r.status, content_type: content_type, raw_response: r
      )
      if r.status == 200
        if Utils.match_content_type(content_type, 'application/json')
          out = Utils.unmarshal_complex(r.env.response_body, Shared::CrmLead)
          res.crm_lead = out
        end
      end
      res
    end

    sig { params(connection_id: String, crm_pipeline: T.nilable(Shared::CrmPipeline)).returns(Utils::FieldAugmented) }
    def create_crm_pipeline(connection_id, crm_pipeline = nil)
      # create_crm_pipeline - Create a pipeline
      request = Operations::CreateCrmPipelineRequest.new(
        
        connection_id: connection_id,
        crm_pipeline: crm_pipeline
      )
      url, params = @sdk_configuration.get_server_details
      base_url = Utils.template_url(url, params)
      url = Utils.generate_url(
        Operations::CreateCrmPipelineRequest,
        base_url,
        '/crm/{connection_id}/pipeline',
        request
      )
      headers = {}
      req_content_type, data, form = Utils.serialize_request_body(request, :crm_pipeline, :json)
      headers['content-type'] = req_content_type
      headers['Accept'] = 'application/json'
      headers['user-agent'] = @sdk_configuration.user_agent

      r = @sdk_configuration.client.post(url) do |req|
        req.headers = headers
        Utils.configure_request_security(req, @sdk_configuration.security) if !@sdk_configuration.nil? && !@sdk_configuration.security.nil?
        if form
          req.body = Utils.encode_form(form)
        elsif Utils.match_content_type(req_content_type, 'application/x-www-form-urlencoded')
          req.body = URI.encode_www_form(data)
        else
          req.body = data
        end
      end

      content_type = r.headers.fetch('Content-Type', 'application/octet-stream')

      res = Operations::CreateCrmPipelineResponse.new(
        status_code: r.status, content_type: content_type, raw_response: r
      )
      if r.status == 200
        if Utils.match_content_type(content_type, 'application/json')
          out = Utils.unmarshal_complex(r.env.response_body, Shared::CrmPipeline)
          res.crm_pipeline = out
        end
      end
      res
    end

    sig { params(connection_id: String, id: String, fields: T.nilable(T::Array[String])).returns(Utils::FieldAugmented) }
    def get_crm_company(connection_id, id, fields = nil)
      # get_crm_company - Retrieve a company
      request = Operations::GetCrmCompanyRequest.new(
        
        connection_id: connection_id,
        id: id,
        fields: fields
      )
      url, params = @sdk_configuration.get_server_details
      base_url = Utils.template_url(url, params)
      url = Utils.generate_url(
        Operations::GetCrmCompanyRequest,
        base_url,
        '/crm/{connection_id}/company/{id}',
        request
      )
      headers = {}
      query_params = Utils.get_query_params(Operations::GetCrmCompanyRequest, request)
      headers['Accept'] = 'application/json'
      headers['user-agent'] = @sdk_configuration.user_agent

      r = @sdk_configuration.client.get(url) do |req|
        req.headers = headers
        req.params = query_params
        Utils.configure_request_security(req, @sdk_configuration.security) if !@sdk_configuration.nil? && !@sdk_configuration.security.nil?
      end

      content_type = r.headers.fetch('Content-Type', 'application/octet-stream')

      res = Operations::GetCrmCompanyResponse.new(
        status_code: r.status, content_type: content_type, raw_response: r
      )
      if r.status == 200
        if Utils.match_content_type(content_type, 'application/json')
          out = Utils.unmarshal_complex(r.env.response_body, Shared::CrmCompany)
          res.crm_company = out
        end
      end
      res
    end

    sig { params(connection_id: String, id: String, fields: T.nilable(T::Array[String])).returns(Utils::FieldAugmented) }
    def get_crm_contact(connection_id, id, fields = nil)
      # get_crm_contact - Retrieve a contact
      request = Operations::GetCrmContactRequest.new(
        
        connection_id: connection_id,
        id: id,
        fields: fields
      )
      url, params = @sdk_configuration.get_server_details
      base_url = Utils.template_url(url, params)
      url = Utils.generate_url(
        Operations::GetCrmContactRequest,
        base_url,
        '/crm/{connection_id}/contact/{id}',
        request
      )
      headers = {}
      query_params = Utils.get_query_params(Operations::GetCrmContactRequest, request)
      headers['Accept'] = 'application/json'
      headers['user-agent'] = @sdk_configuration.user_agent

      r = @sdk_configuration.client.get(url) do |req|
        req.headers = headers
        req.params = query_params
        Utils.configure_request_security(req, @sdk_configuration.security) if !@sdk_configuration.nil? && !@sdk_configuration.security.nil?
      end

      content_type = r.headers.fetch('Content-Type', 'application/octet-stream')

      res = Operations::GetCrmContactResponse.new(
        status_code: r.status, content_type: content_type, raw_response: r
      )
      if r.status == 200
        if Utils.match_content_type(content_type, 'application/json')
          out = Utils.unmarshal_complex(r.env.response_body, Shared::CrmContact)
          res.crm_contact = out
        end
      end
      res
    end

    sig { params(connection_id: String, id: String, fields: T.nilable(T::Array[String])).returns(Utils::FieldAugmented) }
    def get_crm_deal(connection_id, id, fields = nil)
      # get_crm_deal - Retrieve a deal
      request = Operations::GetCrmDealRequest.new(
        
        connection_id: connection_id,
        id: id,
        fields: fields
      )
      url, params = @sdk_configuration.get_server_details
      base_url = Utils.template_url(url, params)
      url = Utils.generate_url(
        Operations::GetCrmDealRequest,
        base_url,
        '/crm/{connection_id}/deal/{id}',
        request
      )
      headers = {}
      query_params = Utils.get_query_params(Operations::GetCrmDealRequest, request)
      headers['Accept'] = 'application/json'
      headers['user-agent'] = @sdk_configuration.user_agent

      r = @sdk_configuration.client.get(url) do |req|
        req.headers = headers
        req.params = query_params
        Utils.configure_request_security(req, @sdk_configuration.security) if !@sdk_configuration.nil? && !@sdk_configuration.security.nil?
      end

      content_type = r.headers.fetch('Content-Type', 'application/octet-stream')

      res = Operations::GetCrmDealResponse.new(
        status_code: r.status, content_type: content_type, raw_response: r
      )
      if r.status == 200
        if Utils.match_content_type(content_type, 'application/json')
          out = Utils.unmarshal_complex(r.env.response_body, Shared::CrmDeal)
          res.crm_deal = out
        end
      end
      res
    end

    sig { params(connection_id: String, id: String, fields: T.nilable(T::Array[String])).returns(Utils::FieldAugmented) }
    def get_crm_event(connection_id, id, fields = nil)
      # get_crm_event - Retrieve a event
      request = Operations::GetCrmEventRequest.new(
        
        connection_id: connection_id,
        id: id,
        fields: fields
      )
      url, params = @sdk_configuration.get_server_details
      base_url = Utils.template_url(url, params)
      url = Utils.generate_url(
        Operations::GetCrmEventRequest,
        base_url,
        '/crm/{connection_id}/event/{id}',
        request
      )
      headers = {}
      query_params = Utils.get_query_params(Operations::GetCrmEventRequest, request)
      headers['Accept'] = 'application/json'
      headers['user-agent'] = @sdk_configuration.user_agent

      r = @sdk_configuration.client.get(url) do |req|
        req.headers = headers
        req.params = query_params
        Utils.configure_request_security(req, @sdk_configuration.security) if !@sdk_configuration.nil? && !@sdk_configuration.security.nil?
      end

      content_type = r.headers.fetch('Content-Type', 'application/octet-stream')

      res = Operations::GetCrmEventResponse.new(
        status_code: r.status, content_type: content_type, raw_response: r
      )
      if r.status == 200
        if Utils.match_content_type(content_type, 'application/json')
          out = Utils.unmarshal_complex(r.env.response_body, Shared::CrmEvent)
          res.crm_event = out
        end
      end
      res
    end

    sig { params(connection_id: String, id: String, fields: T.nilable(T::Array[String])).returns(Utils::FieldAugmented) }
    def get_crm_file(connection_id, id, fields = nil)
      # get_crm_file - Retrieve a file
      request = Operations::GetCrmFileRequest.new(
        
        connection_id: connection_id,
        id: id,
        fields: fields
      )
      url, params = @sdk_configuration.get_server_details
      base_url = Utils.template_url(url, params)
      url = Utils.generate_url(
        Operations::GetCrmFileRequest,
        base_url,
        '/crm/{connection_id}/file/{id}',
        request
      )
      headers = {}
      query_params = Utils.get_query_params(Operations::GetCrmFileRequest, request)
      headers['Accept'] = 'application/json'
      headers['user-agent'] = @sdk_configuration.user_agent

      r = @sdk_configuration.client.get(url) do |req|
        req.headers = headers
        req.params = query_params
        Utils.configure_request_security(req, @sdk_configuration.security) if !@sdk_configuration.nil? && !@sdk_configuration.security.nil?
      end

      content_type = r.headers.fetch('Content-Type', 'application/octet-stream')

      res = Operations::GetCrmFileResponse.new(
        status_code: r.status, content_type: content_type, raw_response: r
      )
      if r.status == 200
        if Utils.match_content_type(content_type, 'application/json')
          out = Utils.unmarshal_complex(r.env.response_body, Shared::CrmFile)
          res.crm_file = out
        end
      end
      res
    end

    sig { params(connection_id: String, id: String, fields: T.nilable(T::Array[String])).returns(Utils::FieldAugmented) }
    def get_crm_lead(connection_id, id, fields = nil)
      # get_crm_lead - Retrieve a lead
      request = Operations::GetCrmLeadRequest.new(
        
        connection_id: connection_id,
        id: id,
        fields: fields
      )
      url, params = @sdk_configuration.get_server_details
      base_url = Utils.template_url(url, params)
      url = Utils.generate_url(
        Operations::GetCrmLeadRequest,
        base_url,
        '/crm/{connection_id}/lead/{id}',
        request
      )
      headers = {}
      query_params = Utils.get_query_params(Operations::GetCrmLeadRequest, request)
      headers['Accept'] = 'application/json'
      headers['user-agent'] = @sdk_configuration.user_agent

      r = @sdk_configuration.client.get(url) do |req|
        req.headers = headers
        req.params = query_params
        Utils.configure_request_security(req, @sdk_configuration.security) if !@sdk_configuration.nil? && !@sdk_configuration.security.nil?
      end

      content_type = r.headers.fetch('Content-Type', 'application/octet-stream')

      res = Operations::GetCrmLeadResponse.new(
        status_code: r.status, content_type: content_type, raw_response: r
      )
      if r.status == 200
        if Utils.match_content_type(content_type, 'application/json')
          out = Utils.unmarshal_complex(r.env.response_body, Shared::CrmLead)
          res.crm_lead = out
        end
      end
      res
    end

    sig { params(connection_id: String, id: String, fields: T.nilable(T::Array[String])).returns(Utils::FieldAugmented) }
    def get_crm_pipeline(connection_id, id, fields = nil)
      # get_crm_pipeline - Retrieve a pipeline
      request = Operations::GetCrmPipelineRequest.new(
        
        connection_id: connection_id,
        id: id,
        fields: fields
      )
      url, params = @sdk_configuration.get_server_details
      base_url = Utils.template_url(url, params)
      url = Utils.generate_url(
        Operations::GetCrmPipelineRequest,
        base_url,
        '/crm/{connection_id}/pipeline/{id}',
        request
      )
      headers = {}
      query_params = Utils.get_query_params(Operations::GetCrmPipelineRequest, request)
      headers['Accept'] = 'application/json'
      headers['user-agent'] = @sdk_configuration.user_agent

      r = @sdk_configuration.client.get(url) do |req|
        req.headers = headers
        req.params = query_params
        Utils.configure_request_security(req, @sdk_configuration.security) if !@sdk_configuration.nil? && !@sdk_configuration.security.nil?
      end

      content_type = r.headers.fetch('Content-Type', 'application/octet-stream')

      res = Operations::GetCrmPipelineResponse.new(
        status_code: r.status, content_type: content_type, raw_response: r
      )
      if r.status == 200
        if Utils.match_content_type(content_type, 'application/json')
          out = Utils.unmarshal_complex(r.env.response_body, Shared::CrmPipeline)
          res.crm_pipeline = out
        end
      end
      res
    end

    sig { params(request: T.nilable(Operations::ListCrmCompaniesRequest)).returns(Utils::FieldAugmented) }
    def list_crm_companies(request)
      # list_crm_companies - List all companies
      url, params = @sdk_configuration.get_server_details
      base_url = Utils.template_url(url, params)
      url = Utils.generate_url(
        Operations::ListCrmCompaniesRequest,
        base_url,
        '/crm/{connection_id}/company',
        request
      )
      headers = {}
      query_params = Utils.get_query_params(Operations::ListCrmCompaniesRequest, request)
      headers['Accept'] = 'application/json'
      headers['user-agent'] = @sdk_configuration.user_agent

      r = @sdk_configuration.client.get(url) do |req|
        req.headers = headers
        req.params = query_params
        Utils.configure_request_security(req, @sdk_configuration.security) if !@sdk_configuration.nil? && !@sdk_configuration.security.nil?
      end

      content_type = r.headers.fetch('Content-Type', 'application/octet-stream')

      res = Operations::ListCrmCompaniesResponse.new(
        status_code: r.status, content_type: content_type, raw_response: r
      )
      if r.status == 200
        if Utils.match_content_type(content_type, 'application/json')
          out = Utils.unmarshal_complex(r.env.response_body, T::Array[Shared::CrmCompany])
          res.crm_companies = out
        end
      end
      res
    end

    sig { params(request: T.nilable(Operations::ListCrmContactsRequest)).returns(Utils::FieldAugmented) }
    def list_crm_contacts(request)
      # list_crm_contacts - List all contacts
      url, params = @sdk_configuration.get_server_details
      base_url = Utils.template_url(url, params)
      url = Utils.generate_url(
        Operations::ListCrmContactsRequest,
        base_url,
        '/crm/{connection_id}/contact',
        request
      )
      headers = {}
      query_params = Utils.get_query_params(Operations::ListCrmContactsRequest, request)
      headers['Accept'] = 'application/json'
      headers['user-agent'] = @sdk_configuration.user_agent

      r = @sdk_configuration.client.get(url) do |req|
        req.headers = headers
        req.params = query_params
        Utils.configure_request_security(req, @sdk_configuration.security) if !@sdk_configuration.nil? && !@sdk_configuration.security.nil?
      end

      content_type = r.headers.fetch('Content-Type', 'application/octet-stream')

      res = Operations::ListCrmContactsResponse.new(
        status_code: r.status, content_type: content_type, raw_response: r
      )
      if r.status == 200
        if Utils.match_content_type(content_type, 'application/json')
          out = Utils.unmarshal_complex(r.env.response_body, T::Array[Shared::CrmContact])
          res.crm_contacts = out
        end
      end
      res
    end

    sig { params(request: T.nilable(Operations::ListCrmDealsRequest)).returns(Utils::FieldAugmented) }
    def list_crm_deals(request)
      # list_crm_deals - List all deals
      url, params = @sdk_configuration.get_server_details
      base_url = Utils.template_url(url, params)
      url = Utils.generate_url(
        Operations::ListCrmDealsRequest,
        base_url,
        '/crm/{connection_id}/deal',
        request
      )
      headers = {}
      query_params = Utils.get_query_params(Operations::ListCrmDealsRequest, request)
      headers['Accept'] = 'application/json'
      headers['user-agent'] = @sdk_configuration.user_agent

      r = @sdk_configuration.client.get(url) do |req|
        req.headers = headers
        req.params = query_params
        Utils.configure_request_security(req, @sdk_configuration.security) if !@sdk_configuration.nil? && !@sdk_configuration.security.nil?
      end

      content_type = r.headers.fetch('Content-Type', 'application/octet-stream')

      res = Operations::ListCrmDealsResponse.new(
        status_code: r.status, content_type: content_type, raw_response: r
      )
      if r.status == 200
        if Utils.match_content_type(content_type, 'application/json')
          out = Utils.unmarshal_complex(r.env.response_body, T::Array[Shared::CrmDeal])
          res.crm_deals = out
        end
      end
      res
    end

    sig { params(request: T.nilable(Operations::ListCrmEventsRequest)).returns(Utils::FieldAugmented) }
    def list_crm_events(request)
      # list_crm_events - List all events
      url, params = @sdk_configuration.get_server_details
      base_url = Utils.template_url(url, params)
      url = Utils.generate_url(
        Operations::ListCrmEventsRequest,
        base_url,
        '/crm/{connection_id}/event',
        request
      )
      headers = {}
      query_params = Utils.get_query_params(Operations::ListCrmEventsRequest, request)
      headers['Accept'] = 'application/json'
      headers['user-agent'] = @sdk_configuration.user_agent

      r = @sdk_configuration.client.get(url) do |req|
        req.headers = headers
        req.params = query_params
        Utils.configure_request_security(req, @sdk_configuration.security) if !@sdk_configuration.nil? && !@sdk_configuration.security.nil?
      end

      content_type = r.headers.fetch('Content-Type', 'application/octet-stream')

      res = Operations::ListCrmEventsResponse.new(
        status_code: r.status, content_type: content_type, raw_response: r
      )
      if r.status == 200
        if Utils.match_content_type(content_type, 'application/json')
          out = Utils.unmarshal_complex(r.env.response_body, T::Array[Shared::CrmEvent])
          res.crm_events = out
        end
      end
      res
    end

    sig { params(request: T.nilable(Operations::ListCrmFilesRequest)).returns(Utils::FieldAugmented) }
    def list_crm_files(request)
      # list_crm_files - List all files
      url, params = @sdk_configuration.get_server_details
      base_url = Utils.template_url(url, params)
      url = Utils.generate_url(
        Operations::ListCrmFilesRequest,
        base_url,
        '/crm/{connection_id}/file',
        request
      )
      headers = {}
      query_params = Utils.get_query_params(Operations::ListCrmFilesRequest, request)
      headers['Accept'] = 'application/json'
      headers['user-agent'] = @sdk_configuration.user_agent

      r = @sdk_configuration.client.get(url) do |req|
        req.headers = headers
        req.params = query_params
        Utils.configure_request_security(req, @sdk_configuration.security) if !@sdk_configuration.nil? && !@sdk_configuration.security.nil?
      end

      content_type = r.headers.fetch('Content-Type', 'application/octet-stream')

      res = Operations::ListCrmFilesResponse.new(
        status_code: r.status, content_type: content_type, raw_response: r
      )
      if r.status == 200
        if Utils.match_content_type(content_type, 'application/json')
          out = Utils.unmarshal_complex(r.env.response_body, T::Array[Shared::CrmFile])
          res.crm_files = out
        end
      end
      res
    end

    sig { params(request: T.nilable(Operations::ListCrmLeadsRequest)).returns(Utils::FieldAugmented) }
    def list_crm_leads(request)
      # list_crm_leads - List all leads
      url, params = @sdk_configuration.get_server_details
      base_url = Utils.template_url(url, params)
      url = Utils.generate_url(
        Operations::ListCrmLeadsRequest,
        base_url,
        '/crm/{connection_id}/lead',
        request
      )
      headers = {}
      query_params = Utils.get_query_params(Operations::ListCrmLeadsRequest, request)
      headers['Accept'] = 'application/json'
      headers['user-agent'] = @sdk_configuration.user_agent

      r = @sdk_configuration.client.get(url) do |req|
        req.headers = headers
        req.params = query_params
        Utils.configure_request_security(req, @sdk_configuration.security) if !@sdk_configuration.nil? && !@sdk_configuration.security.nil?
      end

      content_type = r.headers.fetch('Content-Type', 'application/octet-stream')

      res = Operations::ListCrmLeadsResponse.new(
        status_code: r.status, content_type: content_type, raw_response: r
      )
      if r.status == 200
        if Utils.match_content_type(content_type, 'application/json')
          out = Utils.unmarshal_complex(r.env.response_body, T::Array[Shared::CrmLead])
          res.crm_leads = out
        end
      end
      res
    end

    sig { params(request: T.nilable(Operations::ListCrmPipelinesRequest)).returns(Utils::FieldAugmented) }
    def list_crm_pipelines(request)
      # list_crm_pipelines - List all pipelines
      url, params = @sdk_configuration.get_server_details
      base_url = Utils.template_url(url, params)
      url = Utils.generate_url(
        Operations::ListCrmPipelinesRequest,
        base_url,
        '/crm/{connection_id}/pipeline',
        request
      )
      headers = {}
      query_params = Utils.get_query_params(Operations::ListCrmPipelinesRequest, request)
      headers['Accept'] = 'application/json'
      headers['user-agent'] = @sdk_configuration.user_agent

      r = @sdk_configuration.client.get(url) do |req|
        req.headers = headers
        req.params = query_params
        Utils.configure_request_security(req, @sdk_configuration.security) if !@sdk_configuration.nil? && !@sdk_configuration.security.nil?
      end

      content_type = r.headers.fetch('Content-Type', 'application/octet-stream')

      res = Operations::ListCrmPipelinesResponse.new(
        status_code: r.status, content_type: content_type, raw_response: r
      )
      if r.status == 200
        if Utils.match_content_type(content_type, 'application/json')
          out = Utils.unmarshal_complex(r.env.response_body, T::Array[Shared::CrmPipeline])
          res.crm_pipelines = out
        end
      end
      res
    end

    sig { params(connection_id: String, id: String, crm_company: T.nilable(Shared::CrmCompany)).returns(Utils::FieldAugmented) }
    def patch_crm_company(connection_id, id, crm_company = nil)
      # patch_crm_company - Update a company
      request = Operations::PatchCrmCompanyRequest.new(
        
        connection_id: connection_id,
        id: id,
        crm_company: crm_company
      )
      url, params = @sdk_configuration.get_server_details
      base_url = Utils.template_url(url, params)
      url = Utils.generate_url(
        Operations::PatchCrmCompanyRequest,
        base_url,
        '/crm/{connection_id}/company/{id}',
        request
      )
      headers = {}
      req_content_type, data, form = Utils.serialize_request_body(request, :crm_company, :json)
      headers['content-type'] = req_content_type
      headers['Accept'] = 'application/json'
      headers['user-agent'] = @sdk_configuration.user_agent

      r = @sdk_configuration.client.patch(url) do |req|
        req.headers = headers
        Utils.configure_request_security(req, @sdk_configuration.security) if !@sdk_configuration.nil? && !@sdk_configuration.security.nil?
        if form
          req.body = Utils.encode_form(form)
        elsif Utils.match_content_type(req_content_type, 'application/x-www-form-urlencoded')
          req.body = URI.encode_www_form(data)
        else
          req.body = data
        end
      end

      content_type = r.headers.fetch('Content-Type', 'application/octet-stream')

      res = Operations::PatchCrmCompanyResponse.new(
        status_code: r.status, content_type: content_type, raw_response: r
      )
      if r.status == 200
        if Utils.match_content_type(content_type, 'application/json')
          out = Utils.unmarshal_complex(r.env.response_body, Shared::CrmCompany)
          res.crm_company = out
        end
      end
      res
    end

    sig { params(connection_id: String, id: String, crm_contact: T.nilable(Shared::CrmContact)).returns(Utils::FieldAugmented) }
    def patch_crm_contact(connection_id, id, crm_contact = nil)
      # patch_crm_contact - Update a contact
      request = Operations::PatchCrmContactRequest.new(
        
        connection_id: connection_id,
        id: id,
        crm_contact: crm_contact
      )
      url, params = @sdk_configuration.get_server_details
      base_url = Utils.template_url(url, params)
      url = Utils.generate_url(
        Operations::PatchCrmContactRequest,
        base_url,
        '/crm/{connection_id}/contact/{id}',
        request
      )
      headers = {}
      req_content_type, data, form = Utils.serialize_request_body(request, :crm_contact, :json)
      headers['content-type'] = req_content_type
      headers['Accept'] = 'application/json'
      headers['user-agent'] = @sdk_configuration.user_agent

      r = @sdk_configuration.client.patch(url) do |req|
        req.headers = headers
        Utils.configure_request_security(req, @sdk_configuration.security) if !@sdk_configuration.nil? && !@sdk_configuration.security.nil?
        if form
          req.body = Utils.encode_form(form)
        elsif Utils.match_content_type(req_content_type, 'application/x-www-form-urlencoded')
          req.body = URI.encode_www_form(data)
        else
          req.body = data
        end
      end

      content_type = r.headers.fetch('Content-Type', 'application/octet-stream')

      res = Operations::PatchCrmContactResponse.new(
        status_code: r.status, content_type: content_type, raw_response: r
      )
      if r.status == 200
        if Utils.match_content_type(content_type, 'application/json')
          out = Utils.unmarshal_complex(r.env.response_body, Shared::CrmContact)
          res.crm_contact = out
        end
      end
      res
    end

    sig { params(connection_id: String, id: String, crm_deal: T.nilable(Shared::CrmDeal)).returns(Utils::FieldAugmented) }
    def patch_crm_deal(connection_id, id, crm_deal = nil)
      # patch_crm_deal - Update a deal
      request = Operations::PatchCrmDealRequest.new(
        
        connection_id: connection_id,
        id: id,
        crm_deal: crm_deal
      )
      url, params = @sdk_configuration.get_server_details
      base_url = Utils.template_url(url, params)
      url = Utils.generate_url(
        Operations::PatchCrmDealRequest,
        base_url,
        '/crm/{connection_id}/deal/{id}',
        request
      )
      headers = {}
      req_content_type, data, form = Utils.serialize_request_body(request, :crm_deal, :json)
      headers['content-type'] = req_content_type
      headers['Accept'] = 'application/json'
      headers['user-agent'] = @sdk_configuration.user_agent

      r = @sdk_configuration.client.patch(url) do |req|
        req.headers = headers
        Utils.configure_request_security(req, @sdk_configuration.security) if !@sdk_configuration.nil? && !@sdk_configuration.security.nil?
        if form
          req.body = Utils.encode_form(form)
        elsif Utils.match_content_type(req_content_type, 'application/x-www-form-urlencoded')
          req.body = URI.encode_www_form(data)
        else
          req.body = data
        end
      end

      content_type = r.headers.fetch('Content-Type', 'application/octet-stream')

      res = Operations::PatchCrmDealResponse.new(
        status_code: r.status, content_type: content_type, raw_response: r
      )
      if r.status == 200
        if Utils.match_content_type(content_type, 'application/json')
          out = Utils.unmarshal_complex(r.env.response_body, Shared::CrmDeal)
          res.crm_deal = out
        end
      end
      res
    end

    sig { params(connection_id: String, id: String, crm_event: T.nilable(Shared::CrmEvent)).returns(Utils::FieldAugmented) }
    def patch_crm_event(connection_id, id, crm_event = nil)
      # patch_crm_event - Update a event
      request = Operations::PatchCrmEventRequest.new(
        
        connection_id: connection_id,
        id: id,
        crm_event: crm_event
      )
      url, params = @sdk_configuration.get_server_details
      base_url = Utils.template_url(url, params)
      url = Utils.generate_url(
        Operations::PatchCrmEventRequest,
        base_url,
        '/crm/{connection_id}/event/{id}',
        request
      )
      headers = {}
      req_content_type, data, form = Utils.serialize_request_body(request, :crm_event, :json)
      headers['content-type'] = req_content_type
      headers['Accept'] = 'application/json'
      headers['user-agent'] = @sdk_configuration.user_agent

      r = @sdk_configuration.client.patch(url) do |req|
        req.headers = headers
        Utils.configure_request_security(req, @sdk_configuration.security) if !@sdk_configuration.nil? && !@sdk_configuration.security.nil?
        if form
          req.body = Utils.encode_form(form)
        elsif Utils.match_content_type(req_content_type, 'application/x-www-form-urlencoded')
          req.body = URI.encode_www_form(data)
        else
          req.body = data
        end
      end

      content_type = r.headers.fetch('Content-Type', 'application/octet-stream')

      res = Operations::PatchCrmEventResponse.new(
        status_code: r.status, content_type: content_type, raw_response: r
      )
      if r.status == 200
        if Utils.match_content_type(content_type, 'application/json')
          out = Utils.unmarshal_complex(r.env.response_body, Shared::CrmEvent)
          res.crm_event = out
        end
      end
      res
    end

    sig { params(connection_id: String, id: String, crm_file: T.nilable(Shared::CrmFile)).returns(Utils::FieldAugmented) }
    def patch_crm_file(connection_id, id, crm_file = nil)
      # patch_crm_file - Update a file
      request = Operations::PatchCrmFileRequest.new(
        
        connection_id: connection_id,
        id: id,
        crm_file: crm_file
      )
      url, params = @sdk_configuration.get_server_details
      base_url = Utils.template_url(url, params)
      url = Utils.generate_url(
        Operations::PatchCrmFileRequest,
        base_url,
        '/crm/{connection_id}/file/{id}',
        request
      )
      headers = {}
      req_content_type, data, form = Utils.serialize_request_body(request, :crm_file, :json)
      headers['content-type'] = req_content_type
      headers['Accept'] = 'application/json'
      headers['user-agent'] = @sdk_configuration.user_agent

      r = @sdk_configuration.client.patch(url) do |req|
        req.headers = headers
        Utils.configure_request_security(req, @sdk_configuration.security) if !@sdk_configuration.nil? && !@sdk_configuration.security.nil?
        if form
          req.body = Utils.encode_form(form)
        elsif Utils.match_content_type(req_content_type, 'application/x-www-form-urlencoded')
          req.body = URI.encode_www_form(data)
        else
          req.body = data
        end
      end

      content_type = r.headers.fetch('Content-Type', 'application/octet-stream')

      res = Operations::PatchCrmFileResponse.new(
        status_code: r.status, content_type: content_type, raw_response: r
      )
      if r.status == 200
        if Utils.match_content_type(content_type, 'application/json')
          out = Utils.unmarshal_complex(r.env.response_body, Shared::CrmFile)
          res.crm_file = out
        end
      end
      res
    end

    sig { params(connection_id: String, id: String, crm_lead: T.nilable(Shared::CrmLead)).returns(Utils::FieldAugmented) }
    def patch_crm_lead(connection_id, id, crm_lead = nil)
      # patch_crm_lead - Update a lead
      request = Operations::PatchCrmLeadRequest.new(
        
        connection_id: connection_id,
        id: id,
        crm_lead: crm_lead
      )
      url, params = @sdk_configuration.get_server_details
      base_url = Utils.template_url(url, params)
      url = Utils.generate_url(
        Operations::PatchCrmLeadRequest,
        base_url,
        '/crm/{connection_id}/lead/{id}',
        request
      )
      headers = {}
      req_content_type, data, form = Utils.serialize_request_body(request, :crm_lead, :json)
      headers['content-type'] = req_content_type
      headers['Accept'] = 'application/json'
      headers['user-agent'] = @sdk_configuration.user_agent

      r = @sdk_configuration.client.patch(url) do |req|
        req.headers = headers
        Utils.configure_request_security(req, @sdk_configuration.security) if !@sdk_configuration.nil? && !@sdk_configuration.security.nil?
        if form
          req.body = Utils.encode_form(form)
        elsif Utils.match_content_type(req_content_type, 'application/x-www-form-urlencoded')
          req.body = URI.encode_www_form(data)
        else
          req.body = data
        end
      end

      content_type = r.headers.fetch('Content-Type', 'application/octet-stream')

      res = Operations::PatchCrmLeadResponse.new(
        status_code: r.status, content_type: content_type, raw_response: r
      )
      if r.status == 200
        if Utils.match_content_type(content_type, 'application/json')
          out = Utils.unmarshal_complex(r.env.response_body, Shared::CrmLead)
          res.crm_lead = out
        end
      end
      res
    end

    sig { params(connection_id: String, id: String, crm_pipeline: T.nilable(Shared::CrmPipeline)).returns(Utils::FieldAugmented) }
    def patch_crm_pipeline(connection_id, id, crm_pipeline = nil)
      # patch_crm_pipeline - Update a pipeline
      request = Operations::PatchCrmPipelineRequest.new(
        
        connection_id: connection_id,
        id: id,
        crm_pipeline: crm_pipeline
      )
      url, params = @sdk_configuration.get_server_details
      base_url = Utils.template_url(url, params)
      url = Utils.generate_url(
        Operations::PatchCrmPipelineRequest,
        base_url,
        '/crm/{connection_id}/pipeline/{id}',
        request
      )
      headers = {}
      req_content_type, data, form = Utils.serialize_request_body(request, :crm_pipeline, :json)
      headers['content-type'] = req_content_type
      headers['Accept'] = 'application/json'
      headers['user-agent'] = @sdk_configuration.user_agent

      r = @sdk_configuration.client.patch(url) do |req|
        req.headers = headers
        Utils.configure_request_security(req, @sdk_configuration.security) if !@sdk_configuration.nil? && !@sdk_configuration.security.nil?
        if form
          req.body = Utils.encode_form(form)
        elsif Utils.match_content_type(req_content_type, 'application/x-www-form-urlencoded')
          req.body = URI.encode_www_form(data)
        else
          req.body = data
        end
      end

      content_type = r.headers.fetch('Content-Type', 'application/octet-stream')

      res = Operations::PatchCrmPipelineResponse.new(
        status_code: r.status, content_type: content_type, raw_response: r
      )
      if r.status == 200
        if Utils.match_content_type(content_type, 'application/json')
          out = Utils.unmarshal_complex(r.env.response_body, Shared::CrmPipeline)
          res.crm_pipeline = out
        end
      end
      res
    end

    sig { params(connection_id: String, id: String).returns(Utils::FieldAugmented) }
    def remove_crm_company(connection_id, id)
      # remove_crm_company - Remove a company
      request = Operations::RemoveCrmCompanyRequest.new(
        
        connection_id: connection_id,
        id: id
      )
      url, params = @sdk_configuration.get_server_details
      base_url = Utils.template_url(url, params)
      url = Utils.generate_url(
        Operations::RemoveCrmCompanyRequest,
        base_url,
        '/crm/{connection_id}/company/{id}',
        request
      )
      headers = {}
      headers['Accept'] = 'application/json'
      headers['user-agent'] = @sdk_configuration.user_agent

      r = @sdk_configuration.client.delete(url) do |req|
        req.headers = headers
        Utils.configure_request_security(req, @sdk_configuration.security) if !@sdk_configuration.nil? && !@sdk_configuration.security.nil?
      end

      content_type = r.headers.fetch('Content-Type', 'application/octet-stream')

      res = Operations::RemoveCrmCompanyResponse.new(
        status_code: r.status, content_type: content_type, raw_response: r
      )
      if true
        res.res = r.env.response_body if Utils.match_content_type(content_type, 'application/json')
      end
      res
    end

    sig { params(connection_id: String, id: String).returns(Utils::FieldAugmented) }
    def remove_crm_contact(connection_id, id)
      # remove_crm_contact - Remove a contact
      request = Operations::RemoveCrmContactRequest.new(
        
        connection_id: connection_id,
        id: id
      )
      url, params = @sdk_configuration.get_server_details
      base_url = Utils.template_url(url, params)
      url = Utils.generate_url(
        Operations::RemoveCrmContactRequest,
        base_url,
        '/crm/{connection_id}/contact/{id}',
        request
      )
      headers = {}
      headers['Accept'] = 'application/json'
      headers['user-agent'] = @sdk_configuration.user_agent

      r = @sdk_configuration.client.delete(url) do |req|
        req.headers = headers
        Utils.configure_request_security(req, @sdk_configuration.security) if !@sdk_configuration.nil? && !@sdk_configuration.security.nil?
      end

      content_type = r.headers.fetch('Content-Type', 'application/octet-stream')

      res = Operations::RemoveCrmContactResponse.new(
        status_code: r.status, content_type: content_type, raw_response: r
      )
      if true
        res.res = r.env.response_body if Utils.match_content_type(content_type, 'application/json')
      end
      res
    end

    sig { params(connection_id: String, id: String).returns(Utils::FieldAugmented) }
    def remove_crm_deal(connection_id, id)
      # remove_crm_deal - Remove a deal
      request = Operations::RemoveCrmDealRequest.new(
        
        connection_id: connection_id,
        id: id
      )
      url, params = @sdk_configuration.get_server_details
      base_url = Utils.template_url(url, params)
      url = Utils.generate_url(
        Operations::RemoveCrmDealRequest,
        base_url,
        '/crm/{connection_id}/deal/{id}',
        request
      )
      headers = {}
      headers['Accept'] = 'application/json'
      headers['user-agent'] = @sdk_configuration.user_agent

      r = @sdk_configuration.client.delete(url) do |req|
        req.headers = headers
        Utils.configure_request_security(req, @sdk_configuration.security) if !@sdk_configuration.nil? && !@sdk_configuration.security.nil?
      end

      content_type = r.headers.fetch('Content-Type', 'application/octet-stream')

      res = Operations::RemoveCrmDealResponse.new(
        status_code: r.status, content_type: content_type, raw_response: r
      )
      if true
        res.res = r.env.response_body if Utils.match_content_type(content_type, 'application/json')
      end
      res
    end

    sig { params(connection_id: String, id: String).returns(Utils::FieldAugmented) }
    def remove_crm_event(connection_id, id)
      # remove_crm_event - Remove a event
      request = Operations::RemoveCrmEventRequest.new(
        
        connection_id: connection_id,
        id: id
      )
      url, params = @sdk_configuration.get_server_details
      base_url = Utils.template_url(url, params)
      url = Utils.generate_url(
        Operations::RemoveCrmEventRequest,
        base_url,
        '/crm/{connection_id}/event/{id}',
        request
      )
      headers = {}
      headers['Accept'] = 'application/json'
      headers['user-agent'] = @sdk_configuration.user_agent

      r = @sdk_configuration.client.delete(url) do |req|
        req.headers = headers
        Utils.configure_request_security(req, @sdk_configuration.security) if !@sdk_configuration.nil? && !@sdk_configuration.security.nil?
      end

      content_type = r.headers.fetch('Content-Type', 'application/octet-stream')

      res = Operations::RemoveCrmEventResponse.new(
        status_code: r.status, content_type: content_type, raw_response: r
      )
      if true
        res.res = r.env.response_body if Utils.match_content_type(content_type, 'application/json')
      end
      res
    end

    sig { params(connection_id: String, id: String).returns(Utils::FieldAugmented) }
    def remove_crm_file(connection_id, id)
      # remove_crm_file - Remove a file
      request = Operations::RemoveCrmFileRequest.new(
        
        connection_id: connection_id,
        id: id
      )
      url, params = @sdk_configuration.get_server_details
      base_url = Utils.template_url(url, params)
      url = Utils.generate_url(
        Operations::RemoveCrmFileRequest,
        base_url,
        '/crm/{connection_id}/file/{id}',
        request
      )
      headers = {}
      headers['Accept'] = 'application/json'
      headers['user-agent'] = @sdk_configuration.user_agent

      r = @sdk_configuration.client.delete(url) do |req|
        req.headers = headers
        Utils.configure_request_security(req, @sdk_configuration.security) if !@sdk_configuration.nil? && !@sdk_configuration.security.nil?
      end

      content_type = r.headers.fetch('Content-Type', 'application/octet-stream')

      res = Operations::RemoveCrmFileResponse.new(
        status_code: r.status, content_type: content_type, raw_response: r
      )
      if true
        res.res = r.env.response_body if Utils.match_content_type(content_type, 'application/json')
      end
      res
    end

    sig { params(connection_id: String, id: String).returns(Utils::FieldAugmented) }
    def remove_crm_lead(connection_id, id)
      # remove_crm_lead - Remove a lead
      request = Operations::RemoveCrmLeadRequest.new(
        
        connection_id: connection_id,
        id: id
      )
      url, params = @sdk_configuration.get_server_details
      base_url = Utils.template_url(url, params)
      url = Utils.generate_url(
        Operations::RemoveCrmLeadRequest,
        base_url,
        '/crm/{connection_id}/lead/{id}',
        request
      )
      headers = {}
      headers['Accept'] = 'application/json'
      headers['user-agent'] = @sdk_configuration.user_agent

      r = @sdk_configuration.client.delete(url) do |req|
        req.headers = headers
        Utils.configure_request_security(req, @sdk_configuration.security) if !@sdk_configuration.nil? && !@sdk_configuration.security.nil?
      end

      content_type = r.headers.fetch('Content-Type', 'application/octet-stream')

      res = Operations::RemoveCrmLeadResponse.new(
        status_code: r.status, content_type: content_type, raw_response: r
      )
      if true
        res.res = r.env.response_body if Utils.match_content_type(content_type, 'application/json')
      end
      res
    end

    sig { params(connection_id: String, id: String).returns(Utils::FieldAugmented) }
    def remove_crm_pipeline(connection_id, id)
      # remove_crm_pipeline - Remove a pipeline
      request = Operations::RemoveCrmPipelineRequest.new(
        
        connection_id: connection_id,
        id: id
      )
      url, params = @sdk_configuration.get_server_details
      base_url = Utils.template_url(url, params)
      url = Utils.generate_url(
        Operations::RemoveCrmPipelineRequest,
        base_url,
        '/crm/{connection_id}/pipeline/{id}',
        request
      )
      headers = {}
      headers['Accept'] = 'application/json'
      headers['user-agent'] = @sdk_configuration.user_agent

      r = @sdk_configuration.client.delete(url) do |req|
        req.headers = headers
        Utils.configure_request_security(req, @sdk_configuration.security) if !@sdk_configuration.nil? && !@sdk_configuration.security.nil?
      end

      content_type = r.headers.fetch('Content-Type', 'application/octet-stream')

      res = Operations::RemoveCrmPipelineResponse.new(
        status_code: r.status, content_type: content_type, raw_response: r
      )
      if true
        res.res = r.env.response_body if Utils.match_content_type(content_type, 'application/json')
      end
      res
    end

    sig { params(connection_id: String, id: String, crm_company: T.nilable(Shared::CrmCompany)).returns(Utils::FieldAugmented) }
    def update_crm_company(connection_id, id, crm_company = nil)
      # update_crm_company - Update a company
      request = Operations::UpdateCrmCompanyRequest.new(
        
        connection_id: connection_id,
        id: id,
        crm_company: crm_company
      )
      url, params = @sdk_configuration.get_server_details
      base_url = Utils.template_url(url, params)
      url = Utils.generate_url(
        Operations::UpdateCrmCompanyRequest,
        base_url,
        '/crm/{connection_id}/company/{id}',
        request
      )
      headers = {}
      req_content_type, data, form = Utils.serialize_request_body(request, :crm_company, :json)
      headers['content-type'] = req_content_type
      headers['Accept'] = 'application/json'
      headers['user-agent'] = @sdk_configuration.user_agent

      r = @sdk_configuration.client.put(url) do |req|
        req.headers = headers
        Utils.configure_request_security(req, @sdk_configuration.security) if !@sdk_configuration.nil? && !@sdk_configuration.security.nil?
        if form
          req.body = Utils.encode_form(form)
        elsif Utils.match_content_type(req_content_type, 'application/x-www-form-urlencoded')
          req.body = URI.encode_www_form(data)
        else
          req.body = data
        end
      end

      content_type = r.headers.fetch('Content-Type', 'application/octet-stream')

      res = Operations::UpdateCrmCompanyResponse.new(
        status_code: r.status, content_type: content_type, raw_response: r
      )
      if r.status == 200
        if Utils.match_content_type(content_type, 'application/json')
          out = Utils.unmarshal_complex(r.env.response_body, Shared::CrmCompany)
          res.crm_company = out
        end
      end
      res
    end

    sig { params(connection_id: String, id: String, crm_contact: T.nilable(Shared::CrmContact)).returns(Utils::FieldAugmented) }
    def update_crm_contact(connection_id, id, crm_contact = nil)
      # update_crm_contact - Update a contact
      request = Operations::UpdateCrmContactRequest.new(
        
        connection_id: connection_id,
        id: id,
        crm_contact: crm_contact
      )
      url, params = @sdk_configuration.get_server_details
      base_url = Utils.template_url(url, params)
      url = Utils.generate_url(
        Operations::UpdateCrmContactRequest,
        base_url,
        '/crm/{connection_id}/contact/{id}',
        request
      )
      headers = {}
      req_content_type, data, form = Utils.serialize_request_body(request, :crm_contact, :json)
      headers['content-type'] = req_content_type
      headers['Accept'] = 'application/json'
      headers['user-agent'] = @sdk_configuration.user_agent

      r = @sdk_configuration.client.put(url) do |req|
        req.headers = headers
        Utils.configure_request_security(req, @sdk_configuration.security) if !@sdk_configuration.nil? && !@sdk_configuration.security.nil?
        if form
          req.body = Utils.encode_form(form)
        elsif Utils.match_content_type(req_content_type, 'application/x-www-form-urlencoded')
          req.body = URI.encode_www_form(data)
        else
          req.body = data
        end
      end

      content_type = r.headers.fetch('Content-Type', 'application/octet-stream')

      res = Operations::UpdateCrmContactResponse.new(
        status_code: r.status, content_type: content_type, raw_response: r
      )
      if r.status == 200
        if Utils.match_content_type(content_type, 'application/json')
          out = Utils.unmarshal_complex(r.env.response_body, Shared::CrmContact)
          res.crm_contact = out
        end
      end
      res
    end

    sig { params(connection_id: String, id: String, crm_deal: T.nilable(Shared::CrmDeal)).returns(Utils::FieldAugmented) }
    def update_crm_deal(connection_id, id, crm_deal = nil)
      # update_crm_deal - Update a deal
      request = Operations::UpdateCrmDealRequest.new(
        
        connection_id: connection_id,
        id: id,
        crm_deal: crm_deal
      )
      url, params = @sdk_configuration.get_server_details
      base_url = Utils.template_url(url, params)
      url = Utils.generate_url(
        Operations::UpdateCrmDealRequest,
        base_url,
        '/crm/{connection_id}/deal/{id}',
        request
      )
      headers = {}
      req_content_type, data, form = Utils.serialize_request_body(request, :crm_deal, :json)
      headers['content-type'] = req_content_type
      headers['Accept'] = 'application/json'
      headers['user-agent'] = @sdk_configuration.user_agent

      r = @sdk_configuration.client.put(url) do |req|
        req.headers = headers
        Utils.configure_request_security(req, @sdk_configuration.security) if !@sdk_configuration.nil? && !@sdk_configuration.security.nil?
        if form
          req.body = Utils.encode_form(form)
        elsif Utils.match_content_type(req_content_type, 'application/x-www-form-urlencoded')
          req.body = URI.encode_www_form(data)
        else
          req.body = data
        end
      end

      content_type = r.headers.fetch('Content-Type', 'application/octet-stream')

      res = Operations::UpdateCrmDealResponse.new(
        status_code: r.status, content_type: content_type, raw_response: r
      )
      if r.status == 200
        if Utils.match_content_type(content_type, 'application/json')
          out = Utils.unmarshal_complex(r.env.response_body, Shared::CrmDeal)
          res.crm_deal = out
        end
      end
      res
    end

    sig { params(connection_id: String, id: String, crm_event: T.nilable(Shared::CrmEvent)).returns(Utils::FieldAugmented) }
    def update_crm_event(connection_id, id, crm_event = nil)
      # update_crm_event - Update a event
      request = Operations::UpdateCrmEventRequest.new(
        
        connection_id: connection_id,
        id: id,
        crm_event: crm_event
      )
      url, params = @sdk_configuration.get_server_details
      base_url = Utils.template_url(url, params)
      url = Utils.generate_url(
        Operations::UpdateCrmEventRequest,
        base_url,
        '/crm/{connection_id}/event/{id}',
        request
      )
      headers = {}
      req_content_type, data, form = Utils.serialize_request_body(request, :crm_event, :json)
      headers['content-type'] = req_content_type
      headers['Accept'] = 'application/json'
      headers['user-agent'] = @sdk_configuration.user_agent

      r = @sdk_configuration.client.put(url) do |req|
        req.headers = headers
        Utils.configure_request_security(req, @sdk_configuration.security) if !@sdk_configuration.nil? && !@sdk_configuration.security.nil?
        if form
          req.body = Utils.encode_form(form)
        elsif Utils.match_content_type(req_content_type, 'application/x-www-form-urlencoded')
          req.body = URI.encode_www_form(data)
        else
          req.body = data
        end
      end

      content_type = r.headers.fetch('Content-Type', 'application/octet-stream')

      res = Operations::UpdateCrmEventResponse.new(
        status_code: r.status, content_type: content_type, raw_response: r
      )
      if r.status == 200
        if Utils.match_content_type(content_type, 'application/json')
          out = Utils.unmarshal_complex(r.env.response_body, Shared::CrmEvent)
          res.crm_event = out
        end
      end
      res
    end

    sig { params(connection_id: String, id: String, crm_file: T.nilable(Shared::CrmFile)).returns(Utils::FieldAugmented) }
    def update_crm_file(connection_id, id, crm_file = nil)
      # update_crm_file - Update a file
      request = Operations::UpdateCrmFileRequest.new(
        
        connection_id: connection_id,
        id: id,
        crm_file: crm_file
      )
      url, params = @sdk_configuration.get_server_details
      base_url = Utils.template_url(url, params)
      url = Utils.generate_url(
        Operations::UpdateCrmFileRequest,
        base_url,
        '/crm/{connection_id}/file/{id}',
        request
      )
      headers = {}
      req_content_type, data, form = Utils.serialize_request_body(request, :crm_file, :json)
      headers['content-type'] = req_content_type
      headers['Accept'] = 'application/json'
      headers['user-agent'] = @sdk_configuration.user_agent

      r = @sdk_configuration.client.put(url) do |req|
        req.headers = headers
        Utils.configure_request_security(req, @sdk_configuration.security) if !@sdk_configuration.nil? && !@sdk_configuration.security.nil?
        if form
          req.body = Utils.encode_form(form)
        elsif Utils.match_content_type(req_content_type, 'application/x-www-form-urlencoded')
          req.body = URI.encode_www_form(data)
        else
          req.body = data
        end
      end

      content_type = r.headers.fetch('Content-Type', 'application/octet-stream')

      res = Operations::UpdateCrmFileResponse.new(
        status_code: r.status, content_type: content_type, raw_response: r
      )
      if r.status == 200
        if Utils.match_content_type(content_type, 'application/json')
          out = Utils.unmarshal_complex(r.env.response_body, Shared::CrmFile)
          res.crm_file = out
        end
      end
      res
    end

    sig { params(connection_id: String, id: String, crm_lead: T.nilable(Shared::CrmLead)).returns(Utils::FieldAugmented) }
    def update_crm_lead(connection_id, id, crm_lead = nil)
      # update_crm_lead - Update a lead
      request = Operations::UpdateCrmLeadRequest.new(
        
        connection_id: connection_id,
        id: id,
        crm_lead: crm_lead
      )
      url, params = @sdk_configuration.get_server_details
      base_url = Utils.template_url(url, params)
      url = Utils.generate_url(
        Operations::UpdateCrmLeadRequest,
        base_url,
        '/crm/{connection_id}/lead/{id}',
        request
      )
      headers = {}
      req_content_type, data, form = Utils.serialize_request_body(request, :crm_lead, :json)
      headers['content-type'] = req_content_type
      headers['Accept'] = 'application/json'
      headers['user-agent'] = @sdk_configuration.user_agent

      r = @sdk_configuration.client.put(url) do |req|
        req.headers = headers
        Utils.configure_request_security(req, @sdk_configuration.security) if !@sdk_configuration.nil? && !@sdk_configuration.security.nil?
        if form
          req.body = Utils.encode_form(form)
        elsif Utils.match_content_type(req_content_type, 'application/x-www-form-urlencoded')
          req.body = URI.encode_www_form(data)
        else
          req.body = data
        end
      end

      content_type = r.headers.fetch('Content-Type', 'application/octet-stream')

      res = Operations::UpdateCrmLeadResponse.new(
        status_code: r.status, content_type: content_type, raw_response: r
      )
      if r.status == 200
        if Utils.match_content_type(content_type, 'application/json')
          out = Utils.unmarshal_complex(r.env.response_body, Shared::CrmLead)
          res.crm_lead = out
        end
      end
      res
    end

    sig { params(connection_id: String, id: String, crm_pipeline: T.nilable(Shared::CrmPipeline)).returns(Utils::FieldAugmented) }
    def update_crm_pipeline(connection_id, id, crm_pipeline = nil)
      # update_crm_pipeline - Update a pipeline
      request = Operations::UpdateCrmPipelineRequest.new(
        
        connection_id: connection_id,
        id: id,
        crm_pipeline: crm_pipeline
      )
      url, params = @sdk_configuration.get_server_details
      base_url = Utils.template_url(url, params)
      url = Utils.generate_url(
        Operations::UpdateCrmPipelineRequest,
        base_url,
        '/crm/{connection_id}/pipeline/{id}',
        request
      )
      headers = {}
      req_content_type, data, form = Utils.serialize_request_body(request, :crm_pipeline, :json)
      headers['content-type'] = req_content_type
      headers['Accept'] = 'application/json'
      headers['user-agent'] = @sdk_configuration.user_agent

      r = @sdk_configuration.client.put(url) do |req|
        req.headers = headers
        Utils.configure_request_security(req, @sdk_configuration.security) if !@sdk_configuration.nil? && !@sdk_configuration.security.nil?
        if form
          req.body = Utils.encode_form(form)
        elsif Utils.match_content_type(req_content_type, 'application/x-www-form-urlencoded')
          req.body = URI.encode_www_form(data)
        else
          req.body = data
        end
      end

      content_type = r.headers.fetch('Content-Type', 'application/octet-stream')

      res = Operations::UpdateCrmPipelineResponse.new(
        status_code: r.status, content_type: content_type, raw_response: r
      )
      if r.status == 200
        if Utils.match_content_type(content_type, 'application/json')
          out = Utils.unmarshal_complex(r.env.response_body, Shared::CrmPipeline)
          res.crm_pipeline = out
        end
      end
      res
    end
  end
end
