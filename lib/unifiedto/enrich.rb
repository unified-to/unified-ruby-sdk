# Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

# typed: true
# frozen_string_literal: true

require 'faraday'
require 'faraday/multipart'
require 'sorbet-runtime'

module OpenApiSDK
  extend T::Sig
  class Enrich

    extend T::Sig
    sig { params(sdk_config: SDKConfiguration).void }
    def initialize(sdk_config)
      @sdk_configuration = sdk_config
    end

    sig { params(connection_id: String, domain: T.nilable(String), name: T.nilable(String)).returns(Utils::FieldAugmented) }
    def list_enrich_companies(connection_id, domain = nil, name = nil)
      # list_enrich_companies - Retrieve enrichment information for a company
      request = Operations::ListEnrichCompaniesRequest.new(
        
        connection_id: connection_id,
        domain: domain,
        name: name
      )
      url, params = @sdk_configuration.get_server_details
      base_url = Utils.template_url(url, params)
      url = Utils.generate_url(
        Operations::ListEnrichCompaniesRequest,
        base_url,
        '/enrich/{connection_id}/company',
        request
      )
      headers = {}
      query_params = Utils.get_query_params(Operations::ListEnrichCompaniesRequest, request)
      headers['Accept'] = 'application/json'
      headers['user-agent'] = @sdk_configuration.user_agent

      r = @sdk_configuration.client.get(url) do |req|
        req.headers = headers
        req.params = query_params
        Utils.configure_request_security(req, @sdk_configuration.security) if !@sdk_configuration.nil? && !@sdk_configuration.security.nil?
      end

      content_type = r.headers.fetch('Content-Type', 'application/octet-stream')

      res = Operations::ListEnrichCompaniesResponse.new(
        status_code: r.status, content_type: content_type, raw_response: r
      )
      if r.status == 200
        if Utils.match_content_type(content_type, 'application/json')
          out = Utils.unmarshal_complex(r.env.response_body, Shared::EnrichCompany)
          res.enrich_company = out
        end
      end
      res
    end

    sig { params(request: T.nilable(Operations::ListEnrichPeopleRequest)).returns(Utils::FieldAugmented) }
    def list_enrich_people(request)
      # list_enrich_people - Retrieve enrichment information for a person
      url, params = @sdk_configuration.get_server_details
      base_url = Utils.template_url(url, params)
      url = Utils.generate_url(
        Operations::ListEnrichPeopleRequest,
        base_url,
        '/enrich/{connection_id}/person',
        request
      )
      headers = {}
      query_params = Utils.get_query_params(Operations::ListEnrichPeopleRequest, request)
      headers['Accept'] = 'application/json'
      headers['user-agent'] = @sdk_configuration.user_agent

      r = @sdk_configuration.client.get(url) do |req|
        req.headers = headers
        req.params = query_params
        Utils.configure_request_security(req, @sdk_configuration.security) if !@sdk_configuration.nil? && !@sdk_configuration.security.nil?
      end

      content_type = r.headers.fetch('Content-Type', 'application/octet-stream')

      res = Operations::ListEnrichPeopleResponse.new(
        status_code: r.status, content_type: content_type, raw_response: r
      )
      if r.status == 200
        if Utils.match_content_type(content_type, 'application/json')
          out = Utils.unmarshal_complex(r.env.response_body, Shared::EnrichPerson)
          res.enrich_person = out
        end
      end
      res
    end
  end
end
