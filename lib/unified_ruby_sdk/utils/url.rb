# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true

require 'faraday/retry'
require 'sorbet-runtime'

module UnifiedRubySDK
  module Utils
    sig { params(clazz: Object, server_url: String, path: String, path_params: Object, gbls: T.nilable(T::Hash[Symbol, T::Hash[Symbol, T::Hash[Symbol, Object]]])).returns(String) }
    def self.generate_url(clazz, server_url, path, path_params, gbls = nil)
      T.unsafe(clazz).fields.each do |f|
        param_metadata = f.metadata[:path_param]
        next if param_metadata.nil?

        if param_metadata.fetch(:style, 'simple') == 'simple'
          param = path_params.send(f.name) if !path_params.nil?
          param = _populate_from_globals(f.name, param, 'pathParam', gbls)
        end

        f_name = param_metadata.fetch(:field_name, f.name)
        serialization = param_metadata.fetch(:serialization, '')
        if serialization != ''
          serialized_params = _get_serialized_params(param_metadata, f_name, param)
          serialized_params.each do |k, v|
            path = path.sub("{#{k}}", v.join(', '))
          end
        else
          if param.is_a? Array
            pp_vals = []
            param.each do |pp_val|
              pp_vals.append(pp_val.to_s)
            end
            path = path.sub("{#{param_metadata.fetch(:field_name, f.name)}}", pp_vals.join(','))
          elsif param.is_a? Hash
            pp_vals = []
            param.each do |pp_key, pp_val|
              value = val_to_string(pp_val)

              if param_metadata.fetch(:explode, false)
                pp_vals.append("#{pp_key}=#{value}")
              else
                pp_vals.append("#{pp_key},#{value}")
              end
            end
            path = path.sub("{#{param_metadata.fetch(:field_name, f.name)}}", pp_vals.join(','))
          elsif param.class.include?(::Crystalline::MetadataFields)
            pp_vals = []
            attrs = T.unsafe(param).fields.filter { |field| field.name && param.respond_to?(field.name.to_sym) }.map(&:name)
            attrs.each do |attr|
              field = T.unsafe(param).field(attr)

              param_value_metadata = field.metadata[:path_param]

              next if param_value_metadata.nil?

              parm_name = param_value_metadata.fetch(:field_name, f.name)

              param_field_val = param.send(attr)

              if param_field_val.class.respond_to?(:enums)
                param_field_val = param_field_val.serialize
              elsif param_field_val.is_a? DateTime
                param_field_val = param_field_val.strftime('%Y-%m-%dT%H:%M:%S.%NZ')
              end
              if !field.nil? && ::Crystalline::Utils.nilable?(field.type) && param_field_val.nil?
                next
              elsif param_metadata.fetch(:explode, false)
                pp_vals.append("#{parm_name}=#{param_field_val}")
              else
                pp_vals.append("#{parm_name},#{param_field_val}")
              end
            end
            path = path.sub("{#{param_metadata.fetch(:field_name, f.name)}}", pp_vals.join(','))
          else
            path = path.sub("{#{param_metadata.fetch(:field_name, f.name)}}", param.to_s)
          end
        end
      end

      server_url.delete_suffix('/') + path
    end

    sig { params(url_with_params: String, params: T::Hash[Symbol, T.any(String, T::Enum)]).returns(String) }
    def self.template_url(url_with_params, params)
      params.each do |key, value|
        if value.class.respond_to? :enums
          val_str = T.cast(value, T::Enum).serialize
        else
          val_str = value
        end
        url_with_params = url_with_params.gsub("{#{key}}", val_str)
      end

      url_with_params
    end

  end
end
