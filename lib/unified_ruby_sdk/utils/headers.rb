# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true

require 'cgi'
require 'date'
require 'base64'
require 'sorbet-runtime'

module UnifiedRubySDK
  module Utils
    extend T::Sig

    sig { params(headers_params: Object, gbls: T.nilable(T::Hash[Symbol, T::Hash[Symbol, T::Hash[Symbol, Object]]])).returns(T::Hash[Symbol, String]) }
    def self.get_headers(headers_params, gbls = nil)
      return {} if headers_params.nil?

      headers = {}
      T.unsafe(headers_params).fields.each do |f|
        metadata = f.metadata[:header]
        next if metadata.nil?

        value = _populate_from_globals(f.name, headers_params&.send(f.name), 'header', gbls)
        value = _serialize_header(metadata.fetch(:explode, false), value)
        headers[metadata.fetch(:field_name, f.name)] = value if !T.must(value).empty?
      end
      headers
    end

    sig { params(explode: T::Boolean, obj: Object).returns(T.nilable(String)) }
    def self._serialize_header(explode, obj)
      return '' if obj.nil?

      if obj.respond_to? :fields
        items = []
        T.unsafe(obj).fields.each do |obj_field|
          obj_param_metadata = obj_field.metadata[:header]
          next if obj_param_metadata.nil?

          obj_field_name = obj_param_metadata.fetch(:field_name, obj_field.name)
          next if obj_field_name == ''

          val = obj.send(obj_field.name)
          next if val.nil?

          if explode
            items.append("#{obj_field_name}=#{val_to_string(val)}")
          else
            items.append(obj_field_name)
            items.append(val_to_string(val))
          end
        end

        items.join(',') if !items.empty?
      elsif obj.is_a? Hash
        items = []
        obj.each do |key, value|
          next if value.nil?

          if explode
            items.append("#{key}=#{val_to_string(value)}")
          else
            items.append(key)
            items.append(val_to_string(value))
          end
        end

        items.join(',') if !items.empty?
      elsif obj.is_a? Array
        items = obj.filter { |v| !v.nil? }.map { |v| val_to_string(v) }.join(',')
      else
        val_to_string(obj)
      end
    end
  end
end
