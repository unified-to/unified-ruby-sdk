# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module UnifiedRubySDK
  module Models
    module Shared
    

      class AccountingAssociatedContact
        extend T::Sig
        include Crystalline::MetadataFields


        field :emails, Crystalline::Nilable.new(Crystalline::Array.new(Models::Shared::AccountingEmail)), { 'format_json': { 'letter_case': ::UnifiedRubySDK::Utils.field_name('emails') } }

        field :id, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::UnifiedRubySDK::Utils.field_name('id') } }

        field :name, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::UnifiedRubySDK::Utils.field_name('name') } }

        sig { params(emails: T.nilable(T::Array[Models::Shared::AccountingEmail]), id: T.nilable(::String), name: T.nilable(::String)).void }
        def initialize(emails: nil, id: nil, name: nil)
          @emails = emails
          @id = id
          @name = name
        end

        sig { params(other: T.untyped).returns(T::Boolean) }
        def ==(other)
          return false unless other.is_a? self.class
          return false unless @emails == other.emails
          return false unless @id == other.id
          return false unless @name == other.name
          true
        end
      end
    end
  end
end
