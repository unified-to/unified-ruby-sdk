# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module UnifiedRubySDK
  module Models
    module Shared
    

      class AccountingTelephone
        extend T::Sig
        include Crystalline::MetadataFields


        field :telephone, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::UnifiedRubySDK::Utils.field_name('telephone') } }

        field :type, Crystalline::Nilable.new(Models::Shared::AccountingTelephoneType), { 'format_json': { 'letter_case': ::UnifiedRubySDK::Utils.field_name('type'), 'decoder': Utils.enum_from_string(Models::Shared::AccountingTelephoneType, true) } }

        sig { params(telephone: T.nilable(::String), type: T.nilable(Models::Shared::AccountingTelephoneType)).void }
        def initialize(telephone: nil, type: nil)
          @telephone = telephone
          @type = type
        end

        sig { params(other: T.untyped).returns(T::Boolean) }
        def ==(other)
          return false unless other.is_a? self.class
          return false unless @telephone == other.telephone
          return false unless @type == other.type
          true
        end
      end
    end
  end
end
