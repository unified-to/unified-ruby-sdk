# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module UnifiedRubySDK
  module Models
    module Shared
    
      # Sections
      class AccountingCashflow
        extend T::Sig
        include Crystalline::MetadataFields


        field :cash_beginning_amount, Crystalline::Nilable.new(::Float), { 'format_json': { 'letter_case': ::UnifiedRubySDK::Utils.field_name('cash_beginning_amount') } }

        field :cash_ending_amount, Crystalline::Nilable.new(::Float), { 'format_json': { 'letter_case': ::UnifiedRubySDK::Utils.field_name('cash_ending_amount') } }

        field :category_ids, Crystalline::Nilable.new(Crystalline::Array.new(::String)), { 'format_json': { 'letter_case': ::UnifiedRubySDK::Utils.field_name('category_ids') } }

        field :contact_id, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::UnifiedRubySDK::Utils.field_name('contact_id') } }

        field :created_at, Crystalline::Nilable.new(::DateTime), { 'format_json': { 'letter_case': ::UnifiedRubySDK::Utils.field_name('created_at'), 'decoder': Utils.datetime_from_iso_format(true) } }

        field :currency, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::UnifiedRubySDK::Utils.field_name('currency') } }

        field :end_at, Crystalline::Nilable.new(::DateTime), { 'format_json': { 'letter_case': ::UnifiedRubySDK::Utils.field_name('end_at'), 'decoder': Utils.datetime_from_iso_format(true) } }

        field :financing_sections, Crystalline::Nilable.new(Crystalline::Array.new(Models::Shared::AccountingCashflowSection)), { 'format_json': { 'letter_case': ::UnifiedRubySDK::Utils.field_name('financing_sections') } }

        field :id, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::UnifiedRubySDK::Utils.field_name('id') } }

        field :investing_sections, Crystalline::Nilable.new(Crystalline::Array.new(Models::Shared::AccountingCashflowSection)), { 'format_json': { 'letter_case': ::UnifiedRubySDK::Utils.field_name('investing_sections') } }

        field :name, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::UnifiedRubySDK::Utils.field_name('name') } }

        field :net_change_in_cash_amount, Crystalline::Nilable.new(::Float), { 'format_json': { 'letter_case': ::UnifiedRubySDK::Utils.field_name('net_change_in_cash_amount') } }

        field :operating_sections, Crystalline::Nilable.new(Crystalline::Array.new(Models::Shared::AccountingCashflowSection)), { 'format_json': { 'letter_case': ::UnifiedRubySDK::Utils.field_name('operating_sections') } }

        field :raw, Crystalline::Nilable.new(Crystalline::Hash.new(Symbol, ::Object)), { 'format_json': { 'letter_case': ::UnifiedRubySDK::Utils.field_name('raw') } }

        field :start_at, Crystalline::Nilable.new(::DateTime), { 'format_json': { 'letter_case': ::UnifiedRubySDK::Utils.field_name('start_at'), 'decoder': Utils.datetime_from_iso_format(true) } }

        field :updated_at, Crystalline::Nilable.new(::DateTime), { 'format_json': { 'letter_case': ::UnifiedRubySDK::Utils.field_name('updated_at'), 'decoder': Utils.datetime_from_iso_format(true) } }

        sig { params(cash_beginning_amount: T.nilable(::Float), cash_ending_amount: T.nilable(::Float), category_ids: T.nilable(T::Array[::String]), contact_id: T.nilable(::String), created_at: T.nilable(::DateTime), currency: T.nilable(::String), end_at: T.nilable(::DateTime), financing_sections: T.nilable(T::Array[Models::Shared::AccountingCashflowSection]), id: T.nilable(::String), investing_sections: T.nilable(T::Array[Models::Shared::AccountingCashflowSection]), name: T.nilable(::String), net_change_in_cash_amount: T.nilable(::Float), operating_sections: T.nilable(T::Array[Models::Shared::AccountingCashflowSection]), raw: T.nilable(T::Hash[Symbol, ::Object]), start_at: T.nilable(::DateTime), updated_at: T.nilable(::DateTime)).void }
        def initialize(cash_beginning_amount: nil, cash_ending_amount: nil, category_ids: nil, contact_id: nil, created_at: nil, currency: nil, end_at: nil, financing_sections: nil, id: nil, investing_sections: nil, name: nil, net_change_in_cash_amount: nil, operating_sections: nil, raw: nil, start_at: nil, updated_at: nil)
          @cash_beginning_amount = cash_beginning_amount
          @cash_ending_amount = cash_ending_amount
          @category_ids = category_ids
          @contact_id = contact_id
          @created_at = created_at
          @currency = currency
          @end_at = end_at
          @financing_sections = financing_sections
          @id = id
          @investing_sections = investing_sections
          @name = name
          @net_change_in_cash_amount = net_change_in_cash_amount
          @operating_sections = operating_sections
          @raw = raw
          @start_at = start_at
          @updated_at = updated_at
        end

        sig { params(other: T.untyped).returns(T::Boolean) }
        def ==(other)
          return false unless other.is_a? self.class
          return false unless @cash_beginning_amount == other.cash_beginning_amount
          return false unless @cash_ending_amount == other.cash_ending_amount
          return false unless @category_ids == other.category_ids
          return false unless @contact_id == other.contact_id
          return false unless @created_at == other.created_at
          return false unless @currency == other.currency
          return false unless @end_at == other.end_at
          return false unless @financing_sections == other.financing_sections
          return false unless @id == other.id
          return false unless @investing_sections == other.investing_sections
          return false unless @name == other.name
          return false unless @net_change_in_cash_amount == other.net_change_in_cash_amount
          return false unless @operating_sections == other.operating_sections
          return false unless @raw == other.raw
          return false unless @start_at == other.start_at
          return false unless @updated_at == other.updated_at
          true
        end
      end
    end
  end
end
