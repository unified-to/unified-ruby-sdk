# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module UnifiedRubySDK
  module Models
    module Shared
    

      class AtsCompensation
        extend T::Sig
        include Crystalline::MetadataFields


        field :currency, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::UnifiedRubySDK::Utils.field_name('currency') } }

        field :frequency, Crystalline::Nilable.new(Models::Shared::Frequency), { 'format_json': { 'letter_case': ::UnifiedRubySDK::Utils.field_name('frequency'), 'decoder': Utils.enum_from_string(Models::Shared::Frequency, true) } }

        field :max, Crystalline::Nilable.new(::Float), { 'format_json': { 'letter_case': ::UnifiedRubySDK::Utils.field_name('max') } }

        field :min, Crystalline::Nilable.new(::Float), { 'format_json': { 'letter_case': ::UnifiedRubySDK::Utils.field_name('min') } }

        field :type, Crystalline::Nilable.new(Models::Shared::AtsCompensationType), { 'format_json': { 'letter_case': ::UnifiedRubySDK::Utils.field_name('type'), 'decoder': Utils.enum_from_string(Models::Shared::AtsCompensationType, true) } }

        sig { params(currency: T.nilable(::String), frequency: T.nilable(Models::Shared::Frequency), max: T.nilable(::Float), min: T.nilable(::Float), type: T.nilable(Models::Shared::AtsCompensationType)).void }
        def initialize(currency: nil, frequency: nil, max: nil, min: nil, type: nil)
          @currency = currency
          @frequency = frequency
          @max = max
          @min = min
          @type = type
        end

        sig { params(other: T.untyped).returns(T::Boolean) }
        def ==(other)
          return false unless other.is_a? self.class
          return false unless @currency == other.currency
          return false unless @frequency == other.frequency
          return false unless @max == other.max
          return false unless @min == other.min
          return false unless @type == other.type
          true
        end
      end
    end
  end
end
