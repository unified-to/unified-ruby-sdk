# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module UnifiedRubySDK
  module Models
    module Shared
    

      class AtsJobPosting
        extend T::Sig
        include Crystalline::MetadataFields

        # job-post-specific address
        field :address, Crystalline::Nilable.new(Models::Shared::PropertyAtsJobPostingAddress), { 'format_json': { 'letter_case': ::UnifiedRubySDK::Utils.field_name('address') } }

        field :created_at, Crystalline::Nilable.new(::DateTime), { 'format_json': { 'letter_case': ::UnifiedRubySDK::Utils.field_name('created_at'), 'decoder': Utils.datetime_from_iso_format(true) } }

        field :description, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::UnifiedRubySDK::Utils.field_name('description') } }

        field :id, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::UnifiedRubySDK::Utils.field_name('id') } }

        field :is_active, Crystalline::Nilable.new(Crystalline::Boolean.new), { 'format_json': { 'letter_case': ::UnifiedRubySDK::Utils.field_name('is_active') } }

        field :location, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::UnifiedRubySDK::Utils.field_name('location') } }

        field :name, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::UnifiedRubySDK::Utils.field_name('name') } }

        field :posting_url, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::UnifiedRubySDK::Utils.field_name('posting_url') } }

        field :updated_at, Crystalline::Nilable.new(::DateTime), { 'format_json': { 'letter_case': ::UnifiedRubySDK::Utils.field_name('updated_at'), 'decoder': Utils.datetime_from_iso_format(true) } }

        sig { params(address: T.nilable(Models::Shared::PropertyAtsJobPostingAddress), created_at: T.nilable(::DateTime), description: T.nilable(::String), id: T.nilable(::String), is_active: T.nilable(T::Boolean), location: T.nilable(::String), name: T.nilable(::String), posting_url: T.nilable(::String), updated_at: T.nilable(::DateTime)).void }
        def initialize(address: nil, created_at: nil, description: nil, id: nil, is_active: nil, location: nil, name: nil, posting_url: nil, updated_at: nil)
          @address = address
          @created_at = created_at
          @description = description
          @id = id
          @is_active = is_active
          @location = location
          @name = name
          @posting_url = posting_url
          @updated_at = updated_at
        end

        sig { params(other: T.untyped).returns(T::Boolean) }
        def ==(other)
          return false unless other.is_a? self.class
          return false unless @address == other.address
          return false unless @created_at == other.created_at
          return false unless @description == other.description
          return false unless @id == other.id
          return false unless @is_active == other.is_active
          return false unless @location == other.location
          return false unless @name == other.name
          return false unless @posting_url == other.posting_url
          return false unless @updated_at == other.updated_at
          true
        end
      end
    end
  end
end
