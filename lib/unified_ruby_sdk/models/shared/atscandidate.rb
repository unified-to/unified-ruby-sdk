# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module UnifiedRubySDK
  module Models
    module Shared
    

      class AtsCandidate
        extend T::Sig
        include Crystalline::MetadataFields


        field :address, Crystalline::Nilable.new(Models::Shared::PropertyAtsCandidateAddress), { 'format_json': { 'letter_case': ::UnifiedRubySDK::Utils.field_name('address') } }

        field :company_id, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::UnifiedRubySDK::Utils.field_name('company_id') } }

        field :company_name, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::UnifiedRubySDK::Utils.field_name('company_name') } }

        field :created_at, Crystalline::Nilable.new(::DateTime), { 'format_json': { 'letter_case': ::UnifiedRubySDK::Utils.field_name('created_at'), 'decoder': Utils.datetime_from_iso_format(true) } }

        field :date_of_birth, Crystalline::Nilable.new(::DateTime), { 'format_json': { 'letter_case': ::UnifiedRubySDK::Utils.field_name('date_of_birth'), 'decoder': Utils.datetime_from_iso_format(true) } }

        field :education, Crystalline::Nilable.new(Crystalline::Array.new(Models::Shared::AtsCandidateEducation)), { 'format_json': { 'letter_case': ::UnifiedRubySDK::Utils.field_name('education') } }

        field :emails, Crystalline::Nilable.new(Crystalline::Array.new(Models::Shared::AtsEmail)), { 'format_json': { 'letter_case': ::UnifiedRubySDK::Utils.field_name('emails') } }

        field :experiences, Crystalline::Nilable.new(Crystalline::Array.new(Models::Shared::AtsCandidateExperience)), { 'format_json': { 'letter_case': ::UnifiedRubySDK::Utils.field_name('experiences') } }

        field :external_identifier, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::UnifiedRubySDK::Utils.field_name('external_identifier') } }

        field :first_name, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::UnifiedRubySDK::Utils.field_name('first_name') } }

        field :id, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::UnifiedRubySDK::Utils.field_name('id') } }

        field :image_url, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::UnifiedRubySDK::Utils.field_name('image_url') } }

        field :last_name, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::UnifiedRubySDK::Utils.field_name('last_name') } }
        # URLs for web pages containing additional material about the candidate (LinkedIn, other social media, articles, etc.)
        field :link_urls, Crystalline::Nilable.new(Crystalline::Array.new(::String)), { 'format_json': { 'letter_case': ::UnifiedRubySDK::Utils.field_name('link_urls') } }

        field :metadata, Crystalline::Nilable.new(Crystalline::Array.new(Models::Shared::AtsMetadata)), { 'format_json': { 'letter_case': ::UnifiedRubySDK::Utils.field_name('metadata') } }

        field :name, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::UnifiedRubySDK::Utils.field_name('name') } }

        field :origin, Crystalline::Nilable.new(Models::Shared::Origin), { 'format_json': { 'letter_case': ::UnifiedRubySDK::Utils.field_name('origin'), 'decoder': Utils.enum_from_string(Models::Shared::Origin, true) } }

        field :raw, Crystalline::Nilable.new(Crystalline::Hash.new(Symbol, ::Object)), { 'format_json': { 'letter_case': ::UnifiedRubySDK::Utils.field_name('raw') } }

        field :skills, Crystalline::Nilable.new(Crystalline::Array.new(::String)), { 'format_json': { 'letter_case': ::UnifiedRubySDK::Utils.field_name('skills') } }

        field :sources, Crystalline::Nilable.new(Crystalline::Array.new(::String)), { 'format_json': { 'letter_case': ::UnifiedRubySDK::Utils.field_name('sources') } }

        field :tags, Crystalline::Nilable.new(Crystalline::Array.new(::String)), { 'format_json': { 'letter_case': ::UnifiedRubySDK::Utils.field_name('tags') } }

        field :telephones, Crystalline::Nilable.new(Crystalline::Array.new(Models::Shared::AtsTelephone)), { 'format_json': { 'letter_case': ::UnifiedRubySDK::Utils.field_name('telephones') } }

        field :title, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::UnifiedRubySDK::Utils.field_name('title') } }

        field :updated_at, Crystalline::Nilable.new(::DateTime), { 'format_json': { 'letter_case': ::UnifiedRubySDK::Utils.field_name('updated_at'), 'decoder': Utils.datetime_from_iso_format(true) } }

        field :user_id, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::UnifiedRubySDK::Utils.field_name('user_id') } }

        field :web_url, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::UnifiedRubySDK::Utils.field_name('web_url') } }

        sig { params(address: T.nilable(Models::Shared::PropertyAtsCandidateAddress), company_id: T.nilable(::String), company_name: T.nilable(::String), created_at: T.nilable(::DateTime), date_of_birth: T.nilable(::DateTime), education: T.nilable(T::Array[Models::Shared::AtsCandidateEducation]), emails: T.nilable(T::Array[Models::Shared::AtsEmail]), experiences: T.nilable(T::Array[Models::Shared::AtsCandidateExperience]), external_identifier: T.nilable(::String), first_name: T.nilable(::String), id: T.nilable(::String), image_url: T.nilable(::String), last_name: T.nilable(::String), link_urls: T.nilable(T::Array[::String]), metadata: T.nilable(T::Array[Models::Shared::AtsMetadata]), name: T.nilable(::String), origin: T.nilable(Models::Shared::Origin), raw: T.nilable(T::Hash[Symbol, ::Object]), skills: T.nilable(T::Array[::String]), sources: T.nilable(T::Array[::String]), tags: T.nilable(T::Array[::String]), telephones: T.nilable(T::Array[Models::Shared::AtsTelephone]), title: T.nilable(::String), updated_at: T.nilable(::DateTime), user_id: T.nilable(::String), web_url: T.nilable(::String)).void }
        def initialize(address: nil, company_id: nil, company_name: nil, created_at: nil, date_of_birth: nil, education: nil, emails: nil, experiences: nil, external_identifier: nil, first_name: nil, id: nil, image_url: nil, last_name: nil, link_urls: nil, metadata: nil, name: nil, origin: nil, raw: nil, skills: nil, sources: nil, tags: nil, telephones: nil, title: nil, updated_at: nil, user_id: nil, web_url: nil)
          @address = address
          @company_id = company_id
          @company_name = company_name
          @created_at = created_at
          @date_of_birth = date_of_birth
          @education = education
          @emails = emails
          @experiences = experiences
          @external_identifier = external_identifier
          @first_name = first_name
          @id = id
          @image_url = image_url
          @last_name = last_name
          @link_urls = link_urls
          @metadata = metadata
          @name = name
          @origin = origin
          @raw = raw
          @skills = skills
          @sources = sources
          @tags = tags
          @telephones = telephones
          @title = title
          @updated_at = updated_at
          @user_id = user_id
          @web_url = web_url
        end

        sig { params(other: T.untyped).returns(T::Boolean) }
        def ==(other)
          return false unless other.is_a? self.class
          return false unless @address == other.address
          return false unless @company_id == other.company_id
          return false unless @company_name == other.company_name
          return false unless @created_at == other.created_at
          return false unless @date_of_birth == other.date_of_birth
          return false unless @education == other.education
          return false unless @emails == other.emails
          return false unless @experiences == other.experiences
          return false unless @external_identifier == other.external_identifier
          return false unless @first_name == other.first_name
          return false unless @id == other.id
          return false unless @image_url == other.image_url
          return false unless @last_name == other.last_name
          return false unless @link_urls == other.link_urls
          return false unless @metadata == other.metadata
          return false unless @name == other.name
          return false unless @origin == other.origin
          return false unless @raw == other.raw
          return false unless @skills == other.skills
          return false unless @sources == other.sources
          return false unless @tags == other.tags
          return false unless @telephones == other.telephones
          return false unless @title == other.title
          return false unless @updated_at == other.updated_at
          return false unless @user_id == other.user_id
          return false unless @web_url == other.web_url
          true
        end
      end
    end
  end
end
