# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module UnifiedRubySDK
  module Models
    module Shared
    

      class MessagingMessage
        extend T::Sig
        include Crystalline::MetadataFields


        field :attachments, Crystalline::Nilable.new(Crystalline::Array.new(Models::Shared::MessagingAttachment)), { 'format_json': { 'letter_case': ::UnifiedRubySDK::Utils.field_name('attachments') } }

        field :author_member, Crystalline::Nilable.new(Models::Shared::PropertyMessagingMessageAuthorMember), { 'format_json': { 'letter_case': ::UnifiedRubySDK::Utils.field_name('author_member') } }

        field :channel_id, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::UnifiedRubySDK::Utils.field_name('channel_id') } }
        # Represents the IDs of all channels to which the message is sent. Identifies the channels where the message is posted.
        field :channel_ids, Crystalline::Nilable.new(Crystalline::Array.new(::String)), { 'format_json': { 'letter_case': ::UnifiedRubySDK::Utils.field_name('channel_ids') } }

        field :created_at, Crystalline::Nilable.new(::DateTime), { 'format_json': { 'letter_case': ::UnifiedRubySDK::Utils.field_name('created_at'), 'decoder': Utils.datetime_from_iso_format(true) } }

        field :destination_members, Crystalline::Nilable.new(Crystalline::Array.new(Models::Shared::MessagingMember)), { 'format_json': { 'letter_case': ::UnifiedRubySDK::Utils.field_name('destination_members') } }

        field :has_children, Crystalline::Nilable.new(Crystalline::Boolean.new), { 'format_json': { 'letter_case': ::UnifiedRubySDK::Utils.field_name('has_children') } }

        field :hidden_members, Crystalline::Nilable.new(Crystalline::Array.new(Models::Shared::MessagingMember)), { 'format_json': { 'letter_case': ::UnifiedRubySDK::Utils.field_name('hidden_members') } }

        field :id, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::UnifiedRubySDK::Utils.field_name('id') } }

        field :mentioned_members, Crystalline::Nilable.new(Crystalline::Array.new(Models::Shared::MessagingMember)), { 'format_json': { 'letter_case': ::UnifiedRubySDK::Utils.field_name('mentioned_members') } }

        field :message, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::UnifiedRubySDK::Utils.field_name('message') } }

        field :message_html, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::UnifiedRubySDK::Utils.field_name('message_html') } }

        field :message_markdown, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::UnifiedRubySDK::Utils.field_name('message_markdown') } }

        field :parent_id, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::UnifiedRubySDK::Utils.field_name('parent_id') } }

        field :parent_message_id, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::UnifiedRubySDK::Utils.field_name('parent_message_id') } }

        field :raw, Crystalline::Nilable.new(Crystalline::Hash.new(Symbol, ::Object)), { 'format_json': { 'letter_case': ::UnifiedRubySDK::Utils.field_name('raw') } }

        field :reactions, Crystalline::Nilable.new(Crystalline::Array.new(Models::Shared::MessagingReaction)), { 'format_json': { 'letter_case': ::UnifiedRubySDK::Utils.field_name('reactions') } }

        field :reference, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::UnifiedRubySDK::Utils.field_name('reference') } }

        field :root_message_id, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::UnifiedRubySDK::Utils.field_name('root_message_id') } }

        field :subject, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::UnifiedRubySDK::Utils.field_name('subject') } }

        field :updated_at, Crystalline::Nilable.new(::DateTime), { 'format_json': { 'letter_case': ::UnifiedRubySDK::Utils.field_name('updated_at'), 'decoder': Utils.datetime_from_iso_format(true) } }

        field :web_url, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::UnifiedRubySDK::Utils.field_name('web_url') } }

        sig { params(attachments: T.nilable(T::Array[Models::Shared::MessagingAttachment]), author_member: T.nilable(Models::Shared::PropertyMessagingMessageAuthorMember), channel_id: T.nilable(::String), channel_ids: T.nilable(T::Array[::String]), created_at: T.nilable(::DateTime), destination_members: T.nilable(T::Array[Models::Shared::MessagingMember]), has_children: T.nilable(T::Boolean), hidden_members: T.nilable(T::Array[Models::Shared::MessagingMember]), id: T.nilable(::String), mentioned_members: T.nilable(T::Array[Models::Shared::MessagingMember]), message: T.nilable(::String), message_html: T.nilable(::String), message_markdown: T.nilable(::String), parent_id: T.nilable(::String), parent_message_id: T.nilable(::String), raw: T.nilable(T::Hash[Symbol, ::Object]), reactions: T.nilable(T::Array[Models::Shared::MessagingReaction]), reference: T.nilable(::String), root_message_id: T.nilable(::String), subject: T.nilable(::String), updated_at: T.nilable(::DateTime), web_url: T.nilable(::String)).void }
        def initialize(attachments: nil, author_member: nil, channel_id: nil, channel_ids: nil, created_at: nil, destination_members: nil, has_children: nil, hidden_members: nil, id: nil, mentioned_members: nil, message: nil, message_html: nil, message_markdown: nil, parent_id: nil, parent_message_id: nil, raw: nil, reactions: nil, reference: nil, root_message_id: nil, subject: nil, updated_at: nil, web_url: nil)
          @attachments = attachments
          @author_member = author_member
          @channel_id = channel_id
          @channel_ids = channel_ids
          @created_at = created_at
          @destination_members = destination_members
          @has_children = has_children
          @hidden_members = hidden_members
          @id = id
          @mentioned_members = mentioned_members
          @message = message
          @message_html = message_html
          @message_markdown = message_markdown
          @parent_id = parent_id
          @parent_message_id = parent_message_id
          @raw = raw
          @reactions = reactions
          @reference = reference
          @root_message_id = root_message_id
          @subject = subject
          @updated_at = updated_at
          @web_url = web_url
        end

        sig { params(other: T.untyped).returns(T::Boolean) }
        def ==(other)
          return false unless other.is_a? self.class
          return false unless @attachments == other.attachments
          return false unless @author_member == other.author_member
          return false unless @channel_id == other.channel_id
          return false unless @channel_ids == other.channel_ids
          return false unless @created_at == other.created_at
          return false unless @destination_members == other.destination_members
          return false unless @has_children == other.has_children
          return false unless @hidden_members == other.hidden_members
          return false unless @id == other.id
          return false unless @mentioned_members == other.mentioned_members
          return false unless @message == other.message
          return false unless @message_html == other.message_html
          return false unless @message_markdown == other.message_markdown
          return false unless @parent_id == other.parent_id
          return false unless @parent_message_id == other.parent_message_id
          return false unless @raw == other.raw
          return false unless @reactions == other.reactions
          return false unless @reference == other.reference
          return false unless @root_message_id == other.root_message_id
          return false unless @subject == other.subject
          return false unless @updated_at == other.updated_at
          return false unless @web_url == other.web_url
          true
        end
      end
    end
  end
end
