# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module UnifiedRubySDK
  module Models
    module Shared
    

      class VerificationTime
        extend T::Sig
        include Crystalline::MetadataFields


        field :milliseconds, Crystalline::Nilable.new(::Float), { 'format_json': { 'letter_case': ::UnifiedRubySDK::Utils.field_name('milliseconds') } }
        # {country}-{stateprovince/territory} or just {country} 2-digit ISO codes
        field :valid_regions, Crystalline::Nilable.new(Crystalline::Array.new(::String)), { 'format_json': { 'letter_case': ::UnifiedRubySDK::Utils.field_name('valid_regions') } }

        sig { params(milliseconds: T.nilable(::Float), valid_regions: T.nilable(T::Array[::String])).void }
        def initialize(milliseconds: nil, valid_regions: nil)
          @milliseconds = milliseconds
          @valid_regions = valid_regions
        end

        sig { params(other: T.untyped).returns(T::Boolean) }
        def ==(other)
          return false unless other.is_a? self.class
          return false unless @milliseconds == other.milliseconds
          return false unless @valid_regions == other.valid_regions
          true
        end
      end
    end
  end
end
