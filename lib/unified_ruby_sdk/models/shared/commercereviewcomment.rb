# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module UnifiedRubySDK
  module Models
    module Shared
    

      class CommerceReviewComment
        extend T::Sig
        include Crystalline::MetadataFields


        field :content, ::String, { 'format_json': { 'letter_case': ::UnifiedRubySDK::Utils.field_name('content'), required: true } }

        field :author_avatar_url, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::UnifiedRubySDK::Utils.field_name('author_avatar_url') } }

        field :author_email, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::UnifiedRubySDK::Utils.field_name('author_email') } }

        field :author_location, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::UnifiedRubySDK::Utils.field_name('author_location') } }

        field :author_name, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::UnifiedRubySDK::Utils.field_name('author_name') } }

        field :created_at, Crystalline::Nilable.new(::DateTime), { 'format_json': { 'letter_case': ::UnifiedRubySDK::Utils.field_name('created_at'), 'decoder': Utils.datetime_from_iso_format(true) } }

        field :helpful_votes, Crystalline::Nilable.new(::Float), { 'format_json': { 'letter_case': ::UnifiedRubySDK::Utils.field_name('helpful_votes') } }

        field :id, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::UnifiedRubySDK::Utils.field_name('id') } }

        field :is_public, Crystalline::Nilable.new(Crystalline::Boolean.new), { 'format_json': { 'letter_case': ::UnifiedRubySDK::Utils.field_name('is_public') } }

        field :is_verified, Crystalline::Nilable.new(Crystalline::Boolean.new), { 'format_json': { 'letter_case': ::UnifiedRubySDK::Utils.field_name('is_verified') } }

        field :metadata, Crystalline::Nilable.new(Crystalline::Array.new(Models::Shared::CommerceMetadata)), { 'format_json': { 'letter_case': ::UnifiedRubySDK::Utils.field_name('metadata') } }

        field :raw, Crystalline::Nilable.new(Crystalline::Hash.new(Symbol, ::Object)), { 'format_json': { 'letter_case': ::UnifiedRubySDK::Utils.field_name('raw') } }

        field :status, Crystalline::Nilable.new(Models::Shared::CommerceReviewCommentStatus), { 'format_json': { 'letter_case': ::UnifiedRubySDK::Utils.field_name('status'), 'decoder': Utils.enum_from_string(Models::Shared::CommerceReviewCommentStatus, true) } }

        field :unhelpful_votes, Crystalline::Nilable.new(::Float), { 'format_json': { 'letter_case': ::UnifiedRubySDK::Utils.field_name('unhelpful_votes') } }

        field :updated_at, Crystalline::Nilable.new(::DateTime), { 'format_json': { 'letter_case': ::UnifiedRubySDK::Utils.field_name('updated_at'), 'decoder': Utils.datetime_from_iso_format(true) } }

        sig { params(content: ::String, author_avatar_url: T.nilable(::String), author_email: T.nilable(::String), author_location: T.nilable(::String), author_name: T.nilable(::String), created_at: T.nilable(::DateTime), helpful_votes: T.nilable(::Float), id: T.nilable(::String), is_public: T.nilable(T::Boolean), is_verified: T.nilable(T::Boolean), metadata: T.nilable(T::Array[Models::Shared::CommerceMetadata]), raw: T.nilable(T::Hash[Symbol, ::Object]), status: T.nilable(Models::Shared::CommerceReviewCommentStatus), unhelpful_votes: T.nilable(::Float), updated_at: T.nilable(::DateTime)).void }
        def initialize(content:, author_avatar_url: nil, author_email: nil, author_location: nil, author_name: nil, created_at: nil, helpful_votes: nil, id: nil, is_public: nil, is_verified: nil, metadata: nil, raw: nil, status: nil, unhelpful_votes: nil, updated_at: nil)
          @content = content
          @author_avatar_url = author_avatar_url
          @author_email = author_email
          @author_location = author_location
          @author_name = author_name
          @created_at = created_at
          @helpful_votes = helpful_votes
          @id = id
          @is_public = is_public
          @is_verified = is_verified
          @metadata = metadata
          @raw = raw
          @status = status
          @unhelpful_votes = unhelpful_votes
          @updated_at = updated_at
        end

        sig { params(other: T.untyped).returns(T::Boolean) }
        def ==(other)
          return false unless other.is_a? self.class
          return false unless @content == other.content
          return false unless @author_avatar_url == other.author_avatar_url
          return false unless @author_email == other.author_email
          return false unless @author_location == other.author_location
          return false unless @author_name == other.author_name
          return false unless @created_at == other.created_at
          return false unless @helpful_votes == other.helpful_votes
          return false unless @id == other.id
          return false unless @is_public == other.is_public
          return false unless @is_verified == other.is_verified
          return false unless @metadata == other.metadata
          return false unless @raw == other.raw
          return false unless @status == other.status
          return false unless @unhelpful_votes == other.unhelpful_votes
          return false unless @updated_at == other.updated_at
          true
        end
      end
    end
  end
end
