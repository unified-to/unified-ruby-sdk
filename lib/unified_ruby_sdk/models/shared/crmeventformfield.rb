# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module UnifiedRubySDK
  module Shared
  

    class CrmEventFormField < ::Crystalline::FieldAugmented
      extend T::Sig


      field :name, T.nilable(::String), { 'format_json': { 'letter_case': ::UnifiedRubySDK::Utils.field_name('name') } }

      field :options, T.nilable(T::Array[::UnifiedRubySDK::Shared::CrmEventFormOption]), { 'format_json': { 'letter_case': ::UnifiedRubySDK::Utils.field_name('options') } }

      field :required, T.nilable(T::Boolean), { 'format_json': { 'letter_case': ::UnifiedRubySDK::Utils.field_name('required') } }

      field :type, T.nilable(::UnifiedRubySDK::Shared::CrmEventFormFieldType), { 'format_json': { 'letter_case': ::UnifiedRubySDK::Utils.field_name('type'), 'decoder': Utils.enum_from_string(::UnifiedRubySDK::Shared::CrmEventFormFieldType, true) } }


      sig { params(name: T.nilable(::String), options: T.nilable(T::Array[::UnifiedRubySDK::Shared::CrmEventFormOption]), required: T.nilable(T::Boolean), type: T.nilable(::UnifiedRubySDK::Shared::CrmEventFormFieldType)).void }
      def initialize(name: nil, options: nil, required: nil, type: nil)
        @name = name
        @options = options
        @required = required
        @type = type
      end
    end
  end
end
