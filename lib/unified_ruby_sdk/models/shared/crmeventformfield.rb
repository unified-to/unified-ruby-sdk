# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module UnifiedRubySDK
  module Models
    module Shared
    

      class CrmEventFormField
        extend T::Sig
        include Crystalline::MetadataFields


        field :name, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::UnifiedRubySDK::Utils.field_name('name') } }

        field :options, Crystalline::Nilable.new(Crystalline::Array.new(Models::Shared::CrmEventFormOption)), { 'format_json': { 'letter_case': ::UnifiedRubySDK::Utils.field_name('options') } }

        field :required, Crystalline::Nilable.new(Crystalline::Boolean.new), { 'format_json': { 'letter_case': ::UnifiedRubySDK::Utils.field_name('required') } }

        field :type, Crystalline::Nilable.new(Models::Shared::CrmEventFormFieldType), { 'format_json': { 'letter_case': ::UnifiedRubySDK::Utils.field_name('type'), 'decoder': Utils.enum_from_string(Models::Shared::CrmEventFormFieldType, true) } }

        sig { params(name: T.nilable(::String), options: T.nilable(T::Array[Models::Shared::CrmEventFormOption]), required: T.nilable(T::Boolean), type: T.nilable(Models::Shared::CrmEventFormFieldType)).void }
        def initialize(name: nil, options: nil, required: nil, type: nil)
          @name = name
          @options = options
          @required = required
          @type = type
        end

        sig { params(other: T.untyped).returns(T::Boolean) }
        def ==(other)
          return false unless other.is_a? self.class
          return false unless @name == other.name
          return false unless @options == other.options
          return false unless @required == other.required
          return false unless @type == other.type
          true
        end
      end
    end
  end
end
