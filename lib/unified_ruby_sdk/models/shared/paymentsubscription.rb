# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module UnifiedRubySDK
  module Models
    module Shared
    

      class PaymentSubscription
        extend T::Sig
        include Crystalline::MetadataFields


        field :canceled_at, Crystalline::Nilable.new(::DateTime), { 'format_json': { 'letter_case': ::UnifiedRubySDK::Utils.field_name('canceled_at'), 'decoder': Utils.datetime_from_iso_format(true) } }

        field :contact_id, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::UnifiedRubySDK::Utils.field_name('contact_id') } }

        field :created_at, Crystalline::Nilable.new(::DateTime), { 'format_json': { 'letter_case': ::UnifiedRubySDK::Utils.field_name('created_at'), 'decoder': Utils.datetime_from_iso_format(true) } }

        field :currency, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::UnifiedRubySDK::Utils.field_name('currency') } }

        field :current_period_end_at, Crystalline::Nilable.new(::DateTime), { 'format_json': { 'letter_case': ::UnifiedRubySDK::Utils.field_name('current_period_end_at'), 'decoder': Utils.datetime_from_iso_format(true) } }

        field :current_period_start_at, Crystalline::Nilable.new(::DateTime), { 'format_json': { 'letter_case': ::UnifiedRubySDK::Utils.field_name('current_period_start_at'), 'decoder': Utils.datetime_from_iso_format(true) } }

        field :day_of_month, Crystalline::Nilable.new(::Float), { 'format_json': { 'letter_case': ::UnifiedRubySDK::Utils.field_name('day_of_month') } }

        field :day_of_week, Crystalline::Nilable.new(::Float), { 'format_json': { 'letter_case': ::UnifiedRubySDK::Utils.field_name('day_of_week') } }

        field :description, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::UnifiedRubySDK::Utils.field_name('description') } }

        field :end_at, Crystalline::Nilable.new(::DateTime), { 'format_json': { 'letter_case': ::UnifiedRubySDK::Utils.field_name('end_at'), 'decoder': Utils.datetime_from_iso_format(true) } }

        field :id, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::UnifiedRubySDK::Utils.field_name('id') } }

        field :interval, Crystalline::Nilable.new(::Float), { 'format_json': { 'letter_case': ::UnifiedRubySDK::Utils.field_name('interval') } }

        field :interval_unit, Crystalline::Nilable.new(Models::Shared::IntervalUnit), { 'format_json': { 'letter_case': ::UnifiedRubySDK::Utils.field_name('interval_unit'), 'decoder': Utils.enum_from_string(Models::Shared::IntervalUnit, true) } }

        field :invoice_id, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::UnifiedRubySDK::Utils.field_name('invoice_id') } }

        field :lineitems, Crystalline::Nilable.new(Crystalline::Array.new(Models::Shared::PaymentLineitem)), { 'format_json': { 'letter_case': ::UnifiedRubySDK::Utils.field_name('lineitems') } }

        field :month, Crystalline::Nilable.new(::Float), { 'format_json': { 'letter_case': ::UnifiedRubySDK::Utils.field_name('month') } }

        field :raw, Crystalline::Nilable.new(Crystalline::Hash.new(Symbol, ::Object)), { 'format_json': { 'letter_case': ::UnifiedRubySDK::Utils.field_name('raw') } }

        field :start_at, Crystalline::Nilable.new(::DateTime), { 'format_json': { 'letter_case': ::UnifiedRubySDK::Utils.field_name('start_at'), 'decoder': Utils.datetime_from_iso_format(true) } }

        field :status, Crystalline::Nilable.new(Models::Shared::PaymentSubscriptionStatus), { 'format_json': { 'letter_case': ::UnifiedRubySDK::Utils.field_name('status'), 'decoder': Utils.enum_from_string(Models::Shared::PaymentSubscriptionStatus, true) } }

        field :updated_at, Crystalline::Nilable.new(::DateTime), { 'format_json': { 'letter_case': ::UnifiedRubySDK::Utils.field_name('updated_at'), 'decoder': Utils.datetime_from_iso_format(true) } }

        sig { params(canceled_at: T.nilable(::DateTime), contact_id: T.nilable(::String), created_at: T.nilable(::DateTime), currency: T.nilable(::String), current_period_end_at: T.nilable(::DateTime), current_period_start_at: T.nilable(::DateTime), day_of_month: T.nilable(::Float), day_of_week: T.nilable(::Float), description: T.nilable(::String), end_at: T.nilable(::DateTime), id: T.nilable(::String), interval: T.nilable(::Float), interval_unit: T.nilable(Models::Shared::IntervalUnit), invoice_id: T.nilable(::String), lineitems: T.nilable(T::Array[Models::Shared::PaymentLineitem]), month: T.nilable(::Float), raw: T.nilable(T::Hash[Symbol, ::Object]), start_at: T.nilable(::DateTime), status: T.nilable(Models::Shared::PaymentSubscriptionStatus), updated_at: T.nilable(::DateTime)).void }
        def initialize(canceled_at: nil, contact_id: nil, created_at: nil, currency: nil, current_period_end_at: nil, current_period_start_at: nil, day_of_month: nil, day_of_week: nil, description: nil, end_at: nil, id: nil, interval: nil, interval_unit: nil, invoice_id: nil, lineitems: nil, month: nil, raw: nil, start_at: nil, status: nil, updated_at: nil)
          @canceled_at = canceled_at
          @contact_id = contact_id
          @created_at = created_at
          @currency = currency
          @current_period_end_at = current_period_end_at
          @current_period_start_at = current_period_start_at
          @day_of_month = day_of_month
          @day_of_week = day_of_week
          @description = description
          @end_at = end_at
          @id = id
          @interval = interval
          @interval_unit = interval_unit
          @invoice_id = invoice_id
          @lineitems = lineitems
          @month = month
          @raw = raw
          @start_at = start_at
          @status = status
          @updated_at = updated_at
        end

        sig { params(other: T.untyped).returns(T::Boolean) }
        def ==(other)
          return false unless other.is_a? self.class
          return false unless @canceled_at == other.canceled_at
          return false unless @contact_id == other.contact_id
          return false unless @created_at == other.created_at
          return false unless @currency == other.currency
          return false unless @current_period_end_at == other.current_period_end_at
          return false unless @current_period_start_at == other.current_period_start_at
          return false unless @day_of_month == other.day_of_month
          return false unless @day_of_week == other.day_of_week
          return false unless @description == other.description
          return false unless @end_at == other.end_at
          return false unless @id == other.id
          return false unless @interval == other.interval
          return false unless @interval_unit == other.interval_unit
          return false unless @invoice_id == other.invoice_id
          return false unless @lineitems == other.lineitems
          return false unless @month == other.month
          return false unless @raw == other.raw
          return false unless @start_at == other.start_at
          return false unless @status == other.status
          return false unless @updated_at == other.updated_at
          true
        end
      end
    end
  end
end
