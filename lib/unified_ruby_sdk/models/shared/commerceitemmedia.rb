# Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module UnifiedRubySDK
  module Shared
  

    class CommerceItemMedia < ::UnifiedRubySDK::Utils::FieldAugmented
      extend T::Sig


      field :url, ::String, { 'format_json': { 'letter_case': ::UnifiedRubySDK::Utils.field_name('url') } }

      field :alt, T.nilable(::String), { 'format_json': { 'letter_case': ::UnifiedRubySDK::Utils.field_name('alt') } }

      field :height, T.nilable(::Float), { 'format_json': { 'letter_case': ::UnifiedRubySDK::Utils.field_name('height') } }

      field :id, T.nilable(::String), { 'format_json': { 'letter_case': ::UnifiedRubySDK::Utils.field_name('id') } }

      field :position, T.nilable(::Float), { 'format_json': { 'letter_case': ::UnifiedRubySDK::Utils.field_name('position') } }

      field :type, T.nilable(::UnifiedRubySDK::Shared::CommerceItemMediaType), { 'format_json': { 'letter_case': ::UnifiedRubySDK::Utils.field_name('type'), 'decoder': Utils.enum_from_string(::UnifiedRubySDK::Shared::CommerceItemMediaType, true) } }

      field :width, T.nilable(::Float), { 'format_json': { 'letter_case': ::UnifiedRubySDK::Utils.field_name('width') } }


      sig { params(url: ::String, alt: T.nilable(::String), height: T.nilable(::Float), id: T.nilable(::String), position: T.nilable(::Float), type: T.nilable(::UnifiedRubySDK::Shared::CommerceItemMediaType), width: T.nilable(::Float)).void }
      def initialize(url: nil, alt: nil, height: nil, id: nil, position: nil, type: nil, width: nil)
        @url = url
        @alt = alt
        @height = height
        @id = id
        @position = position
        @type = type
        @width = width
      end
    end
  end
end
