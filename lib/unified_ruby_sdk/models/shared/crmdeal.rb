# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module UnifiedRubySDK
  module Models
    module Shared
    
      # A deal represents an opportunity with companies and/or contacts
      class CrmDeal
        extend T::Sig
        include Crystalline::MetadataFields


        field :amount, T.nilable(::Float), { 'format_json': { 'letter_case': ::UnifiedRubySDK::Utils.field_name('amount') } }

        field :closed_at, T.nilable(::DateTime), { 'format_json': { 'letter_case': ::UnifiedRubySDK::Utils.field_name('closed_at'), 'decoder': Utils.datetime_from_iso_format(true) } }

        field :company_ids, T.nilable(T::Array[::String]), { 'format_json': { 'letter_case': ::UnifiedRubySDK::Utils.field_name('company_ids') } }

        field :contact_ids, T.nilable(T::Array[::String]), { 'format_json': { 'letter_case': ::UnifiedRubySDK::Utils.field_name('contact_ids') } }

        field :created_at, T.nilable(::DateTime), { 'format_json': { 'letter_case': ::UnifiedRubySDK::Utils.field_name('created_at'), 'decoder': Utils.datetime_from_iso_format(true) } }

        field :currency, T.nilable(::String), { 'format_json': { 'letter_case': ::UnifiedRubySDK::Utils.field_name('currency') } }

        field :id, T.nilable(::String), { 'format_json': { 'letter_case': ::UnifiedRubySDK::Utils.field_name('id') } }

        field :lost_reason, T.nilable(::String), { 'format_json': { 'letter_case': ::UnifiedRubySDK::Utils.field_name('lost_reason') } }

        field :metadata, T.nilable(T::Array[Models::Shared::CrmMetadata]), { 'format_json': { 'letter_case': ::UnifiedRubySDK::Utils.field_name('metadata') } }

        field :name, T.nilable(::String), { 'format_json': { 'letter_case': ::UnifiedRubySDK::Utils.field_name('name') } }

        field :pipeline, T.nilable(::String), { 'format_json': { 'letter_case': ::UnifiedRubySDK::Utils.field_name('pipeline') } }

        field :pipeline_id, T.nilable(::String), { 'format_json': { 'letter_case': ::UnifiedRubySDK::Utils.field_name('pipeline_id') } }

        field :probability, T.nilable(::Float), { 'format_json': { 'letter_case': ::UnifiedRubySDK::Utils.field_name('probability') } }

        field :raw, T.nilable(T::Hash[Symbol, ::Object]), { 'format_json': { 'letter_case': ::UnifiedRubySDK::Utils.field_name('raw') } }

        field :source, T.nilable(::String), { 'format_json': { 'letter_case': ::UnifiedRubySDK::Utils.field_name('source') } }

        field :stage, T.nilable(::String), { 'format_json': { 'letter_case': ::UnifiedRubySDK::Utils.field_name('stage') } }

        field :stage_id, T.nilable(::String), { 'format_json': { 'letter_case': ::UnifiedRubySDK::Utils.field_name('stage_id') } }

        field :tags, T.nilable(T::Array[::String]), { 'format_json': { 'letter_case': ::UnifiedRubySDK::Utils.field_name('tags') } }

        field :updated_at, T.nilable(::DateTime), { 'format_json': { 'letter_case': ::UnifiedRubySDK::Utils.field_name('updated_at'), 'decoder': Utils.datetime_from_iso_format(true) } }

        field :user_id, T.nilable(::String), { 'format_json': { 'letter_case': ::UnifiedRubySDK::Utils.field_name('user_id') } }

        field :won_reason, T.nilable(::String), { 'format_json': { 'letter_case': ::UnifiedRubySDK::Utils.field_name('won_reason') } }


        sig { params(amount: T.nilable(::Float), closed_at: T.nilable(::DateTime), company_ids: T.nilable(T::Array[::String]), contact_ids: T.nilable(T::Array[::String]), created_at: T.nilable(::DateTime), currency: T.nilable(::String), id: T.nilable(::String), lost_reason: T.nilable(::String), metadata: T.nilable(T::Array[Models::Shared::CrmMetadata]), name: T.nilable(::String), pipeline: T.nilable(::String), pipeline_id: T.nilable(::String), probability: T.nilable(::Float), raw: T.nilable(T::Hash[Symbol, ::Object]), source: T.nilable(::String), stage: T.nilable(::String), stage_id: T.nilable(::String), tags: T.nilable(T::Array[::String]), updated_at: T.nilable(::DateTime), user_id: T.nilable(::String), won_reason: T.nilable(::String)).void }
        def initialize(amount: nil, closed_at: nil, company_ids: nil, contact_ids: nil, created_at: nil, currency: nil, id: nil, lost_reason: nil, metadata: nil, name: nil, pipeline: nil, pipeline_id: nil, probability: nil, raw: nil, source: nil, stage: nil, stage_id: nil, tags: nil, updated_at: nil, user_id: nil, won_reason: nil)
          @amount = amount
          @closed_at = closed_at
          @company_ids = company_ids
          @contact_ids = contact_ids
          @created_at = created_at
          @currency = currency
          @id = id
          @lost_reason = lost_reason
          @metadata = metadata
          @name = name
          @pipeline = pipeline
          @pipeline_id = pipeline_id
          @probability = probability
          @raw = raw
          @source = source
          @stage = stage
          @stage_id = stage_id
          @tags = tags
          @updated_at = updated_at
          @user_id = user_id
          @won_reason = won_reason
        end

        def ==(other)
          return false unless other.is_a? self.class
          return false unless @amount == other.amount
          return false unless @closed_at == other.closed_at
          return false unless @company_ids == other.company_ids
          return false unless @contact_ids == other.contact_ids
          return false unless @created_at == other.created_at
          return false unless @currency == other.currency
          return false unless @id == other.id
          return false unless @lost_reason == other.lost_reason
          return false unless @metadata == other.metadata
          return false unless @name == other.name
          return false unless @pipeline == other.pipeline
          return false unless @pipeline_id == other.pipeline_id
          return false unless @probability == other.probability
          return false unless @raw == other.raw
          return false unless @source == other.source
          return false unless @stage == other.stage
          return false unless @stage_id == other.stage_id
          return false unless @tags == other.tags
          return false unless @updated_at == other.updated_at
          return false unless @user_id == other.user_id
          return false unless @won_reason == other.won_reason
          true
        end
      end
    end
  end
end
