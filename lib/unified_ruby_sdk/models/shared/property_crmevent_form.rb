# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module UnifiedRubySDK
  module Models
    module Shared
    

      class PropertyCrmEventForm
        extend T::Sig
        include Crystalline::MetadataFields


        field :archived_at, Crystalline::Nilable.new(::DateTime), { 'format_json': { 'letter_case': ::UnifiedRubySDK::Utils.field_name('archived_at'), 'decoder': Utils.datetime_from_iso_format(true) } }

        field :fields_, Crystalline::Nilable.new(Crystalline::Array.new(Models::Shared::CrmEventFormField)), { 'format_json': { 'letter_case': ::UnifiedRubySDK::Utils.field_name('fields') } }

        field :name, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::UnifiedRubySDK::Utils.field_name('name') } }

        field :redirect_url, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::UnifiedRubySDK::Utils.field_name('redirect_url') } }

        sig { params(archived_at: T.nilable(::DateTime), fields_: T.nilable(T::Array[Models::Shared::CrmEventFormField]), name: T.nilable(::String), redirect_url: T.nilable(::String)).void }
        def initialize(archived_at: nil, fields_: nil, name: nil, redirect_url: nil)
          @archived_at = archived_at
          @fields_ = fields_
          @name = name
          @redirect_url = redirect_url
        end

        sig { params(other: T.untyped).returns(T::Boolean) }
        def ==(other)
          return false unless other.is_a? self.class
          return false unless @archived_at == other.archived_at
          return false unless @fields_ == other.fields_
          return false unless @name == other.name
          return false unless @redirect_url == other.redirect_url
          true
        end
      end
    end
  end
end
