# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module UnifiedRubySDK
  module Models
    module Shared
    

      class PropertyScimUserUrnIetfParamsScimSchemasExtensionLatticeAttributes10User
        extend T::Sig
        include Crystalline::MetadataFields


        field :job_level, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::UnifiedRubySDK::Utils.field_name('Job Level') } }

        field :people_manager_reviews, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::UnifiedRubySDK::Utils.field_name('People Manager (Reviews)') } }

        field :remote_work_location, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::UnifiedRubySDK::Utils.field_name('Remote Work - Location') } }

        field :salary_information, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::UnifiedRubySDK::Utils.field_name('Salary Information') } }

        field :sub_departments, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::UnifiedRubySDK::Utils.field_name('Sub Departments') } }

        field :birth_date, Crystalline::Nilable.new(::DateTime), { 'format_json': { 'letter_case': ::UnifiedRubySDK::Utils.field_name('birthDate'), 'decoder': Utils.datetime_from_iso_format(true) } }

        field :ethnicity, Crystalline::Nilable.new(Models::Shared::Ethnicity), { 'format_json': { 'letter_case': ::UnifiedRubySDK::Utils.field_name('ethnicity'), 'decoder': Utils.enum_from_string(Models::Shared::Ethnicity, true) } }

        field :gender, Crystalline::Nilable.new(Models::Shared::PropertyScimUserUrnIetfParamsScimSchemasExtensionLatticeAttributes10UserGender), { 'format_json': { 'letter_case': ::UnifiedRubySDK::Utils.field_name('gender'), 'decoder': Utils.enum_from_string(Models::Shared::PropertyScimUserUrnIetfParamsScimSchemasExtensionLatticeAttributes10UserGender, true) } }

        field :sexual_orientation, Crystalline::Nilable.new(Models::Shared::SexualOrientation), { 'format_json': { 'letter_case': ::UnifiedRubySDK::Utils.field_name('sexualOrientation'), 'decoder': Utils.enum_from_string(Models::Shared::SexualOrientation, true) } }

        field :start_date, Crystalline::Nilable.new(::DateTime), { 'format_json': { 'letter_case': ::UnifiedRubySDK::Utils.field_name('startDate'), 'decoder': Utils.datetime_from_iso_format(true) } }

        sig { params(job_level: T.nilable(::String), people_manager_reviews: T.nilable(::String), remote_work_location: T.nilable(::String), salary_information: T.nilable(::String), sub_departments: T.nilable(::String), birth_date: T.nilable(::DateTime), ethnicity: T.nilable(Models::Shared::Ethnicity), gender: T.nilable(Models::Shared::PropertyScimUserUrnIetfParamsScimSchemasExtensionLatticeAttributes10UserGender), sexual_orientation: T.nilable(Models::Shared::SexualOrientation), start_date: T.nilable(::DateTime)).void }
        def initialize(job_level: nil, people_manager_reviews: nil, remote_work_location: nil, salary_information: nil, sub_departments: nil, birth_date: nil, ethnicity: nil, gender: nil, sexual_orientation: nil, start_date: nil)
          @job_level = job_level
          @people_manager_reviews = people_manager_reviews
          @remote_work_location = remote_work_location
          @salary_information = salary_information
          @sub_departments = sub_departments
          @birth_date = birth_date
          @ethnicity = ethnicity
          @gender = gender
          @sexual_orientation = sexual_orientation
          @start_date = start_date
        end

        sig { params(other: T.untyped).returns(T::Boolean) }
        def ==(other)
          return false unless other.is_a? self.class
          return false unless @job_level == other.job_level
          return false unless @people_manager_reviews == other.people_manager_reviews
          return false unless @remote_work_location == other.remote_work_location
          return false unless @salary_information == other.salary_information
          return false unless @sub_departments == other.sub_departments
          return false unless @birth_date == other.birth_date
          return false unless @ethnicity == other.ethnicity
          return false unless @gender == other.gender
          return false unless @sexual_orientation == other.sexual_orientation
          return false unless @start_date == other.start_date
          true
        end
      end
    end
  end
end
