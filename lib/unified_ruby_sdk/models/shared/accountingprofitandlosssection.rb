# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module UnifiedRubySDK
  module Models
    module Shared
    

      class AccountingProfitAndLossSection
        extend T::Sig
        include Crystalline::MetadataFields


        field :accounts, T.nilable(T::Array[Models::Shared::AccountingProfitAndLossAccount]), { 'format_json': { 'letter_case': ::UnifiedRubySDK::Utils.field_name('accounts') } }

        field :section_name, T.nilable(::String), { 'format_json': { 'letter_case': ::UnifiedRubySDK::Utils.field_name('section_name') } }

        field :section_type, T.nilable(::String), { 'format_json': { 'letter_case': ::UnifiedRubySDK::Utils.field_name('section_type') } }

        field :total_amount, T.nilable(::Float), { 'format_json': { 'letter_case': ::UnifiedRubySDK::Utils.field_name('total_amount') } }


        sig { params(accounts: T.nilable(T::Array[Models::Shared::AccountingProfitAndLossAccount]), section_name: T.nilable(::String), section_type: T.nilable(::String), total_amount: T.nilable(::Float)).void }
        def initialize(accounts: nil, section_name: nil, section_type: nil, total_amount: nil)
          @accounts = accounts
          @section_name = section_name
          @section_type = section_type
          @total_amount = total_amount
        end

        def ==(other)
          return false unless other.is_a? self.class
          return false unless @accounts == other.accounts
          return false unless @section_name == other.section_name
          return false unless @section_type == other.section_type
          return false unless @total_amount == other.total_amount
          true
        end
      end
    end
  end
end
