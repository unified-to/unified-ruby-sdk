# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module UnifiedRubySDK
  module Models
    module Shared
    

      class LmsStudent
        extend T::Sig
        include Crystalline::MetadataFields


        field :address, Crystalline::Nilable.new(Models::Shared::PropertyLmsStudentAddress), { 'format_json': { 'letter_case': ::UnifiedRubySDK::Utils.field_name('address') } }

        field :created_at, Crystalline::Nilable.new(::DateTime), { 'format_json': { 'letter_case': ::UnifiedRubySDK::Utils.field_name('created_at'), 'decoder': Utils.datetime_from_iso_format(true) } }

        field :emails, Crystalline::Nilable.new(Crystalline::Array.new(Models::Shared::LmsEmail)), { 'format_json': { 'letter_case': ::UnifiedRubySDK::Utils.field_name('emails') } }

        field :id, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::UnifiedRubySDK::Utils.field_name('id') } }

        field :image_url, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::UnifiedRubySDK::Utils.field_name('image_url') } }

        field :name, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::UnifiedRubySDK::Utils.field_name('name') } }

        field :raw, Crystalline::Nilable.new(Crystalline::Hash.new(Symbol, ::Object)), { 'format_json': { 'letter_case': ::UnifiedRubySDK::Utils.field_name('raw') } }

        field :telephones, Crystalline::Nilable.new(Crystalline::Array.new(Models::Shared::LmsTelephone)), { 'format_json': { 'letter_case': ::UnifiedRubySDK::Utils.field_name('telephones') } }

        field :updated_at, Crystalline::Nilable.new(::DateTime), { 'format_json': { 'letter_case': ::UnifiedRubySDK::Utils.field_name('updated_at'), 'decoder': Utils.datetime_from_iso_format(true) } }

        sig { params(address: T.nilable(Models::Shared::PropertyLmsStudentAddress), created_at: T.nilable(::DateTime), emails: T.nilable(T::Array[Models::Shared::LmsEmail]), id: T.nilable(::String), image_url: T.nilable(::String), name: T.nilable(::String), raw: T.nilable(T::Hash[Symbol, ::Object]), telephones: T.nilable(T::Array[Models::Shared::LmsTelephone]), updated_at: T.nilable(::DateTime)).void }
        def initialize(address: nil, created_at: nil, emails: nil, id: nil, image_url: nil, name: nil, raw: nil, telephones: nil, updated_at: nil)
          @address = address
          @created_at = created_at
          @emails = emails
          @id = id
          @image_url = image_url
          @name = name
          @raw = raw
          @telephones = telephones
          @updated_at = updated_at
        end

        sig { params(other: T.untyped).returns(T::Boolean) }
        def ==(other)
          return false unless other.is_a? self.class
          return false unless @address == other.address
          return false unless @created_at == other.created_at
          return false unless @emails == other.emails
          return false unless @id == other.id
          return false unless @image_url == other.image_url
          return false unless @name == other.name
          return false unless @raw == other.raw
          return false unless @telephones == other.telephones
          return false unless @updated_at == other.updated_at
          true
        end
      end
    end
  end
end
