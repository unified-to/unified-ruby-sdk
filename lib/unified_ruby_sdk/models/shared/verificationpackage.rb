# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module UnifiedRubySDK
  module Models
    module Shared
    

      class VerificationPackage
        extend T::Sig
        include Crystalline::MetadataFields


        field :id, ::String, { 'format_json': { 'letter_case': ::UnifiedRubySDK::Utils.field_name('id'), required: true } }

        field :name, ::String, { 'format_json': { 'letter_case': ::UnifiedRubySDK::Utils.field_name('name'), required: true } }

        field :type, Models::Shared::VerificationPackageType, { 'format_json': { 'letter_case': ::UnifiedRubySDK::Utils.field_name('type'), required: true, 'decoder': Utils.enum_from_string(Models::Shared::VerificationPackageType, false) } }

        field :aliases, Crystalline::Nilable.new(Crystalline::Array.new(::String)), { 'format_json': { 'letter_case': ::UnifiedRubySDK::Utils.field_name('aliases') } }
        # average processing time in minutes
        field :average_processing_times, Crystalline::Nilable.new(Crystalline::Array.new(Models::Shared::VerificationTime)), { 'format_json': { 'letter_case': ::UnifiedRubySDK::Utils.field_name('average_processing_times') } }

        field :cost_amount, Crystalline::Nilable.new(::Float), { 'format_json': { 'letter_case': ::UnifiedRubySDK::Utils.field_name('cost_amount') } }

        field :created_at, Crystalline::Nilable.new(::DateTime), { 'format_json': { 'letter_case': ::UnifiedRubySDK::Utils.field_name('created_at'), 'decoder': Utils.datetime_from_iso_format(true) } }

        field :currency, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::UnifiedRubySDK::Utils.field_name('currency') } }

        field :description, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::UnifiedRubySDK::Utils.field_name('description') } }

        field :has_redirect_url, Crystalline::Nilable.new(Crystalline::Boolean.new), { 'format_json': { 'letter_case': ::UnifiedRubySDK::Utils.field_name('has_redirect_url') } }

        field :has_target_url, Crystalline::Nilable.new(Crystalline::Boolean.new), { 'format_json': { 'letter_case': ::UnifiedRubySDK::Utils.field_name('has_target_url') } }

        field :info_url, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::UnifiedRubySDK::Utils.field_name('info_url') } }

        field :max_score, Crystalline::Nilable.new(::Float), { 'format_json': { 'letter_case': ::UnifiedRubySDK::Utils.field_name('max_score') } }

        field :needs_ip_address, Crystalline::Nilable.new(Crystalline::Boolean.new), { 'format_json': { 'letter_case': ::UnifiedRubySDK::Utils.field_name('needs_ip_address') } }
        # Questions that need to be answered for this verification
        field :parameters, Crystalline::Nilable.new(Crystalline::Array.new(Models::Shared::VerificationParameter)), { 'format_json': { 'letter_case': ::UnifiedRubySDK::Utils.field_name('parameters') } }

        field :raw, Crystalline::Nilable.new(Crystalline::Hash.new(Symbol, ::Object)), { 'format_json': { 'letter_case': ::UnifiedRubySDK::Utils.field_name('raw') } }
        # Category (Verification, Validation, Background Check)
        field :tags, Crystalline::Nilable.new(Crystalline::Array.new(::String)), { 'format_json': { 'letter_case': ::UnifiedRubySDK::Utils.field_name('tags') } }

        field :updated_at, Crystalline::Nilable.new(::DateTime), { 'format_json': { 'letter_case': ::UnifiedRubySDK::Utils.field_name('updated_at'), 'decoder': Utils.datetime_from_iso_format(true) } }

        sig { params(id: ::String, name: ::String, type: Models::Shared::VerificationPackageType, aliases: T.nilable(T::Array[::String]), average_processing_times: T.nilable(T::Array[Models::Shared::VerificationTime]), cost_amount: T.nilable(::Float), created_at: T.nilable(::DateTime), currency: T.nilable(::String), description: T.nilable(::String), has_redirect_url: T.nilable(T::Boolean), has_target_url: T.nilable(T::Boolean), info_url: T.nilable(::String), max_score: T.nilable(::Float), needs_ip_address: T.nilable(T::Boolean), parameters: T.nilable(T::Array[Models::Shared::VerificationParameter]), raw: T.nilable(T::Hash[Symbol, ::Object]), tags: T.nilable(T::Array[::String]), updated_at: T.nilable(::DateTime)).void }
        def initialize(id:, name:, type:, aliases: nil, average_processing_times: nil, cost_amount: nil, created_at: nil, currency: nil, description: nil, has_redirect_url: nil, has_target_url: nil, info_url: nil, max_score: nil, needs_ip_address: nil, parameters: nil, raw: nil, tags: nil, updated_at: nil)
          @id = id
          @name = name
          @type = type
          @aliases = aliases
          @average_processing_times = average_processing_times
          @cost_amount = cost_amount
          @created_at = created_at
          @currency = currency
          @description = description
          @has_redirect_url = has_redirect_url
          @has_target_url = has_target_url
          @info_url = info_url
          @max_score = max_score
          @needs_ip_address = needs_ip_address
          @parameters = parameters
          @raw = raw
          @tags = tags
          @updated_at = updated_at
        end

        sig { params(other: T.untyped).returns(T::Boolean) }
        def ==(other)
          return false unless other.is_a? self.class
          return false unless @id == other.id
          return false unless @name == other.name
          return false unless @type == other.type
          return false unless @aliases == other.aliases
          return false unless @average_processing_times == other.average_processing_times
          return false unless @cost_amount == other.cost_amount
          return false unless @created_at == other.created_at
          return false unless @currency == other.currency
          return false unless @description == other.description
          return false unless @has_redirect_url == other.has_redirect_url
          return false unless @has_target_url == other.has_target_url
          return false unless @info_url == other.info_url
          return false unless @max_score == other.max_score
          return false unless @needs_ip_address == other.needs_ip_address
          return false unless @parameters == other.parameters
          return false unless @raw == other.raw
          return false unless @tags == other.tags
          return false unless @updated_at == other.updated_at
          true
        end
      end
    end
  end
end
