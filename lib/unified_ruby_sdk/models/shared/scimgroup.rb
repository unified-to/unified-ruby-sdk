# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module UnifiedRubySDK
  module Models
    module Shared
    

      class ScimGroup
        extend T::Sig
        include Crystalline::MetadataFields


        field :display_name, ::String, { 'format_json': { 'letter_case': ::UnifiedRubySDK::Utils.field_name('displayName'), required: true } }

        field :external_id, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::UnifiedRubySDK::Utils.field_name('externalId') } }

        field :group_type, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::UnifiedRubySDK::Utils.field_name('groupType') } }

        field :id, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::UnifiedRubySDK::Utils.field_name('id') } }
        # An array of members
        field :members, Crystalline::Nilable.new(Crystalline::Array.new(Models::Shared::ScimGroupMember)), { 'format_json': { 'letter_case': ::UnifiedRubySDK::Utils.field_name('members') } }

        field :meta, Crystalline::Nilable.new(Models::Shared::PropertyScimGroupMeta), { 'format_json': { 'letter_case': ::UnifiedRubySDK::Utils.field_name('meta') } }
        # Array of schema URIs
        field :schemas, Crystalline::Nilable.new(Crystalline::Array.new(Models::Shared::PropertyScimGroupSchemas)), { 'format_json': { 'letter_case': ::UnifiedRubySDK::Utils.field_name('schemas') } }

        sig { params(display_name: ::String, external_id: T.nilable(::String), group_type: T.nilable(::String), id: T.nilable(::String), members: T.nilable(T::Array[Models::Shared::ScimGroupMember]), meta: T.nilable(Models::Shared::PropertyScimGroupMeta), schemas: T.nilable(T::Array[Models::Shared::PropertyScimGroupSchemas])).void }
        def initialize(display_name:, external_id: nil, group_type: nil, id: nil, members: nil, meta: nil, schemas: nil)
          @display_name = display_name
          @external_id = external_id
          @group_type = group_type
          @id = id
          @members = members
          @meta = meta
          @schemas = schemas
        end

        sig { params(other: T.untyped).returns(T::Boolean) }
        def ==(other)
          return false unless other.is_a? self.class
          return false unless @display_name == other.display_name
          return false unless @external_id == other.external_id
          return false unless @group_type == other.group_type
          return false unless @id == other.id
          return false unless @members == other.members
          return false unless @meta == other.meta
          return false unless @schemas == other.schemas
          true
        end
      end
    end
  end
end
