# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module UnifiedRubySDK
  module Models
    module Shared
    

      class AccountingTrialbalanceSubItem
        extend T::Sig
        include Crystalline::MetadataFields


        field :account_id, T.nilable(::String), { 'format_json': { 'letter_case': ::UnifiedRubySDK::Utils.field_name('account_id') } }

        field :account_name, T.nilable(::String), { 'format_json': { 'letter_case': ::UnifiedRubySDK::Utils.field_name('account_name') } }

        field :amount, T.nilable(::Float), { 'format_json': { 'letter_case': ::UnifiedRubySDK::Utils.field_name('amount') } }


        sig { params(account_id: T.nilable(::String), account_name: T.nilable(::String), amount: T.nilable(::Float)).void }
        def initialize(account_id: nil, account_name: nil, amount: nil)
          @account_id = account_id
          @account_name = account_name
          @amount = amount
        end

        def ==(other)
          return false unless other.is_a? self.class
          return false unless @account_id == other.account_id
          return false unless @account_name == other.account_name
          return false unless @amount == other.amount
          true
        end
      end
    end
  end
end
