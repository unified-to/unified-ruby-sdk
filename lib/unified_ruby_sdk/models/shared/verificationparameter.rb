# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module UnifiedRubySDK
  module Models
    module Shared
    

      class VerificationParameter
        extend T::Sig
        include Crystalline::MetadataFields


        field :name, ::String, { 'format_json': { 'letter_case': ::UnifiedRubySDK::Utils.field_name('name'), required: true } }
        # valid file mime types
        field :file_types, Crystalline::Nilable.new(Crystalline::Array.new(::String)), { 'format_json': { 'letter_case': ::UnifiedRubySDK::Utils.field_name('file_types') } }

        field :id, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::UnifiedRubySDK::Utils.field_name('id') } }

        field :is_required, Crystalline::Nilable.new(Crystalline::Boolean.new), { 'format_json': { 'letter_case': ::UnifiedRubySDK::Utils.field_name('is_required') } }
        # options for MULTIPLE_CHOICE and MULTIPLE_SELECT
        field :options, Crystalline::Nilable.new(Crystalline::Array.new(::String)), { 'format_json': { 'letter_case': ::UnifiedRubySDK::Utils.field_name('options') } }

        field :public_question, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::UnifiedRubySDK::Utils.field_name('public_question') } }

        field :type, Crystalline::Nilable.new(Models::Shared::VerificationParameterType), { 'format_json': { 'letter_case': ::UnifiedRubySDK::Utils.field_name('type'), 'decoder': Utils.enum_from_string(Models::Shared::VerificationParameterType, true) } }
        # {country}-{stateprovince/territory} or just {country} 2-digit ISO codes
        field :valid_regions, Crystalline::Nilable.new(Crystalline::Array.new(::String)), { 'format_json': { 'letter_case': ::UnifiedRubySDK::Utils.field_name('valid_regions') } }

        sig { params(name: ::String, file_types: T.nilable(T::Array[::String]), id: T.nilable(::String), is_required: T.nilable(T::Boolean), options: T.nilable(T::Array[::String]), public_question: T.nilable(::String), type: T.nilable(Models::Shared::VerificationParameterType), valid_regions: T.nilable(T::Array[::String])).void }
        def initialize(name:, file_types: nil, id: nil, is_required: nil, options: nil, public_question: nil, type: nil, valid_regions: nil)
          @name = name
          @file_types = file_types
          @id = id
          @is_required = is_required
          @options = options
          @public_question = public_question
          @type = type
          @valid_regions = valid_regions
        end

        sig { params(other: T.untyped).returns(T::Boolean) }
        def ==(other)
          return false unless other.is_a? self.class
          return false unless @name == other.name
          return false unless @file_types == other.file_types
          return false unless @id == other.id
          return false unless @is_required == other.is_required
          return false unless @options == other.options
          return false unless @public_question == other.public_question
          return false unless @type == other.type
          return false unless @valid_regions == other.valid_regions
          true
        end
      end
    end
  end
end
