# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module UnifiedRubySDK
  module Models
    module Shared
    

      class AccountingExpense
        extend T::Sig
        include Crystalline::MetadataFields


        field :approved_at, Crystalline::Nilable.new(::DateTime), { 'format_json': { 'letter_case': ::UnifiedRubySDK::Utils.field_name('approved_at'), 'decoder': Utils.datetime_from_iso_format(true) } }

        field :approver_user_id, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::UnifiedRubySDK::Utils.field_name('approver_user_id') } }

        field :created_at, Crystalline::Nilable.new(::DateTime), { 'format_json': { 'letter_case': ::UnifiedRubySDK::Utils.field_name('created_at'), 'decoder': Utils.datetime_from_iso_format(true) } }

        field :currency, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::UnifiedRubySDK::Utils.field_name('currency') } }

        field :id, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::UnifiedRubySDK::Utils.field_name('id') } }

        field :lineitems, Crystalline::Nilable.new(Crystalline::Array.new(Models::Shared::AccountingLineitem)), { 'format_json': { 'letter_case': ::UnifiedRubySDK::Utils.field_name('lineitems') } }

        field :name, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::UnifiedRubySDK::Utils.field_name('name') } }

        field :raw, Crystalline::Nilable.new(Crystalline::Hash.new(Symbol, ::Object)), { 'format_json': { 'letter_case': ::UnifiedRubySDK::Utils.field_name('raw') } }

        field :reimbursed_amount, Crystalline::Nilable.new(::Float), { 'format_json': { 'letter_case': ::UnifiedRubySDK::Utils.field_name('reimbursed_amount') } }

        field :reimbursed_at, Crystalline::Nilable.new(::DateTime), { 'format_json': { 'letter_case': ::UnifiedRubySDK::Utils.field_name('reimbursed_at'), 'decoder': Utils.datetime_from_iso_format(true) } }

        field :tax_amount, Crystalline::Nilable.new(::Float), { 'format_json': { 'letter_case': ::UnifiedRubySDK::Utils.field_name('tax_amount') } }

        field :total_amount, Crystalline::Nilable.new(::Float), { 'format_json': { 'letter_case': ::UnifiedRubySDK::Utils.field_name('total_amount') } }

        field :updated_at, Crystalline::Nilable.new(::DateTime), { 'format_json': { 'letter_case': ::UnifiedRubySDK::Utils.field_name('updated_at'), 'decoder': Utils.datetime_from_iso_format(true) } }

        field :user_id, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::UnifiedRubySDK::Utils.field_name('user_id') } }

        sig { params(approved_at: T.nilable(::DateTime), approver_user_id: T.nilable(::String), created_at: T.nilable(::DateTime), currency: T.nilable(::String), id: T.nilable(::String), lineitems: T.nilable(T::Array[Models::Shared::AccountingLineitem]), name: T.nilable(::String), raw: T.nilable(T::Hash[Symbol, ::Object]), reimbursed_amount: T.nilable(::Float), reimbursed_at: T.nilable(::DateTime), tax_amount: T.nilable(::Float), total_amount: T.nilable(::Float), updated_at: T.nilable(::DateTime), user_id: T.nilable(::String)).void }
        def initialize(approved_at: nil, approver_user_id: nil, created_at: nil, currency: nil, id: nil, lineitems: nil, name: nil, raw: nil, reimbursed_amount: nil, reimbursed_at: nil, tax_amount: nil, total_amount: nil, updated_at: nil, user_id: nil)
          @approved_at = approved_at
          @approver_user_id = approver_user_id
          @created_at = created_at
          @currency = currency
          @id = id
          @lineitems = lineitems
          @name = name
          @raw = raw
          @reimbursed_amount = reimbursed_amount
          @reimbursed_at = reimbursed_at
          @tax_amount = tax_amount
          @total_amount = total_amount
          @updated_at = updated_at
          @user_id = user_id
        end

        sig { params(other: T.untyped).returns(T::Boolean) }
        def ==(other)
          return false unless other.is_a? self.class
          return false unless @approved_at == other.approved_at
          return false unless @approver_user_id == other.approver_user_id
          return false unless @created_at == other.created_at
          return false unless @currency == other.currency
          return false unless @id == other.id
          return false unless @lineitems == other.lineitems
          return false unless @name == other.name
          return false unless @raw == other.raw
          return false unless @reimbursed_amount == other.reimbursed_amount
          return false unless @reimbursed_at == other.reimbursed_at
          return false unless @tax_amount == other.tax_amount
          return false unless @total_amount == other.total_amount
          return false unless @updated_at == other.updated_at
          return false unless @user_id == other.user_id
          true
        end
      end
    end
  end
end
