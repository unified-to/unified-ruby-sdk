# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module UnifiedRubySDK
  module Models
    module Shared
    

      class AccountingProfitAndLossSubcategory
        extend T::Sig
        include Crystalline::MetadataFields


        field :amount, T.nilable(::Float), { 'format_json': { 'letter_case': ::UnifiedRubySDK::Utils.field_name('amount') } }

        field :name, T.nilable(::String), { 'format_json': { 'letter_case': ::UnifiedRubySDK::Utils.field_name('name') } }

        field :transaction_ids, T.nilable(T::Array[::String]), { 'format_json': { 'letter_case': ::UnifiedRubySDK::Utils.field_name('transaction_ids') } }


        sig { params(amount: T.nilable(::Float), name: T.nilable(::String), transaction_ids: T.nilable(T::Array[::String])).void }
        def initialize(amount: nil, name: nil, transaction_ids: nil)
          @amount = amount
          @name = name
          @transaction_ids = transaction_ids
        end

        def ==(other)
          return false unless other.is_a? self.class
          return false unless @amount == other.amount
          return false unless @name == other.name
          return false unless @transaction_ids == other.transaction_ids
          true
        end
      end
    end
  end
end
