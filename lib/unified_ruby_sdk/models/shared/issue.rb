# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module UnifiedRubySDK
  module Models
    module Shared
    

      class Issue
        extend T::Sig
        include Crystalline::MetadataFields


        field :status, Models::Shared::IssueStatus, { 'format_json': { 'letter_case': ::UnifiedRubySDK::Utils.field_name('status'), required: true, 'decoder': Utils.enum_from_string(Models::Shared::IssueStatus, false) } }

        field :ticket_ref, ::String, { 'format_json': { 'letter_case': ::UnifiedRubySDK::Utils.field_name('ticket_ref'), required: true } }

        field :title, ::String, { 'format_json': { 'letter_case': ::UnifiedRubySDK::Utils.field_name('title'), required: true } }

        field :workspace_id, ::String, { 'format_json': { 'letter_case': ::UnifiedRubySDK::Utils.field_name('workspace_id'), required: true } }

        field :created_at, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::UnifiedRubySDK::Utils.field_name('created_at') } }

        field :id, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::UnifiedRubySDK::Utils.field_name('id') } }

        field :importance, Crystalline::Nilable.new(::Float), { 'format_json': { 'letter_case': ::UnifiedRubySDK::Utils.field_name('importance') } }

        field :resolution_time, Crystalline::Nilable.new(::Float), { 'format_json': { 'letter_case': ::UnifiedRubySDK::Utils.field_name('resolution_time') } }

        field :size, Crystalline::Nilable.new(::Float), { 'format_json': { 'letter_case': ::UnifiedRubySDK::Utils.field_name('size') } }

        field :type, Crystalline::Nilable.new(Crystalline::Array.new(::String)), { 'format_json': { 'letter_case': ::UnifiedRubySDK::Utils.field_name('type') } }

        field :updated_at, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::UnifiedRubySDK::Utils.field_name('updated_at') } }

        field :url, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::UnifiedRubySDK::Utils.field_name('url') } }

        sig { params(status: Models::Shared::IssueStatus, ticket_ref: ::String, title: ::String, workspace_id: ::String, created_at: T.nilable(::String), id: T.nilable(::String), importance: T.nilable(::Float), resolution_time: T.nilable(::Float), size: T.nilable(::Float), type: T.nilable(T::Array[::String]), updated_at: T.nilable(::String), url: T.nilable(::String)).void }
        def initialize(status:, ticket_ref:, title:, workspace_id:, created_at: nil, id: nil, importance: nil, resolution_time: nil, size: nil, type: nil, updated_at: nil, url: nil)
          @status = status
          @ticket_ref = ticket_ref
          @title = title
          @workspace_id = workspace_id
          @created_at = created_at
          @id = id
          @importance = importance
          @resolution_time = resolution_time
          @size = size
          @type = type
          @updated_at = updated_at
          @url = url
        end

        sig { params(other: T.untyped).returns(T::Boolean) }
        def ==(other)
          return false unless other.is_a? self.class
          return false unless @status == other.status
          return false unless @ticket_ref == other.ticket_ref
          return false unless @title == other.title
          return false unless @workspace_id == other.workspace_id
          return false unless @created_at == other.created_at
          return false unless @id == other.id
          return false unless @importance == other.importance
          return false unless @resolution_time == other.resolution_time
          return false unless @size == other.size
          return false unless @type == other.type
          return false unless @updated_at == other.updated_at
          return false unless @url == other.url
          true
        end
      end
    end
  end
end
