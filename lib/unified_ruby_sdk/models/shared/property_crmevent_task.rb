# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module UnifiedRubySDK
  module Models
    module Shared
    
      # The task object, when type = task
      class PropertyCrmEventTask
        extend T::Sig
        include Crystalline::MetadataFields


        field :description, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::UnifiedRubySDK::Utils.field_name('description') } }

        field :due_at, Crystalline::Nilable.new(::DateTime), { 'format_json': { 'letter_case': ::UnifiedRubySDK::Utils.field_name('due_at'), 'decoder': Utils.datetime_from_iso_format(true) } }

        field :name, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::UnifiedRubySDK::Utils.field_name('name') } }

        field :priority, Crystalline::Nilable.new(Models::Shared::Priority), { 'format_json': { 'letter_case': ::UnifiedRubySDK::Utils.field_name('priority'), 'decoder': Utils.enum_from_string(Models::Shared::Priority, true) } }

        field :status, Crystalline::Nilable.new(Models::Shared::PropertyCrmEventTaskStatus), { 'format_json': { 'letter_case': ::UnifiedRubySDK::Utils.field_name('status'), 'decoder': Utils.enum_from_string(Models::Shared::PropertyCrmEventTaskStatus, true) } }

        sig { params(description: T.nilable(::String), due_at: T.nilable(::DateTime), name: T.nilable(::String), priority: T.nilable(Models::Shared::Priority), status: T.nilable(Models::Shared::PropertyCrmEventTaskStatus)).void }
        def initialize(description: nil, due_at: nil, name: nil, priority: nil, status: nil)
          @description = description
          @due_at = due_at
          @name = name
          @priority = priority
          @status = status
        end

        sig { params(other: T.untyped).returns(T::Boolean) }
        def ==(other)
          return false unless other.is_a? self.class
          return false unless @description == other.description
          return false unless @due_at == other.due_at
          return false unless @name == other.name
          return false unless @priority == other.priority
          return false unless @status == other.status
          true
        end
      end
    end
  end
end
