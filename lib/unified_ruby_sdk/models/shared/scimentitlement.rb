# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module UnifiedRubySDK
  module Models
    module Shared
    

      class ScimEntitlement
        extend T::Sig
        include Crystalline::MetadataFields


        field :value, ::String, { 'format_json': { 'letter_case': ::UnifiedRubySDK::Utils.field_name('value'), required: true } }

        field :display, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::UnifiedRubySDK::Utils.field_name('display') } }

        field :primary, Crystalline::Nilable.new(Crystalline::Boolean.new), { 'format_json': { 'letter_case': ::UnifiedRubySDK::Utils.field_name('primary') } }

        field :type, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::UnifiedRubySDK::Utils.field_name('type') } }

        sig { params(value: ::String, display: T.nilable(::String), primary: T.nilable(T::Boolean), type: T.nilable(::String)).void }
        def initialize(value:, display: nil, primary: nil, type: nil)
          @value = value
          @display = display
          @primary = primary
          @type = type
        end

        sig { params(other: T.untyped).returns(T::Boolean) }
        def ==(other)
          return false unless other.is_a? self.class
          return false unless @value == other.value
          return false unless @display == other.display
          return false unless @primary == other.primary
          return false unless @type == other.type
          true
        end
      end
    end
  end
end
