# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module UnifiedRubySDK
  module Models
    module Shared
    
      # @deprecated
      class AccountingProfitlossCategory
        extend T::Sig
        include Crystalline::MetadataFields


        field :amount, Crystalline::Nilable.new(::Float), { 'format_json': { 'letter_case': ::UnifiedRubySDK::Utils.field_name('amount') } }

        field :name, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::UnifiedRubySDK::Utils.field_name('name') } }

        field :sub_items, Crystalline::Nilable.new(Crystalline::Array.new(Models::Shared::AccountingProfitlossSubcategory)), { 'format_json': { 'letter_case': ::UnifiedRubySDK::Utils.field_name('sub_items') } }

        sig { params(amount: T.nilable(::Float), name: T.nilable(::String), sub_items: T.nilable(T::Array[Models::Shared::AccountingProfitlossSubcategory])).void }
        def initialize(amount: nil, name: nil, sub_items: nil)
          @amount = amount
          @name = name
          @sub_items = sub_items
        end

        sig { params(other: T.untyped).returns(T::Boolean) }
        def ==(other)
          return false unless other.is_a? self.class
          return false unless @amount == other.amount
          return false unless @name == other.name
          return false unless @sub_items == other.sub_items
          true
        end
      end
    end
  end
end
