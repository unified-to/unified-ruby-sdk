# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module UnifiedRubySDK
  module Models
    module Shared
    

      class AccountingTrialbalance
        extend T::Sig
        include Crystalline::MetadataFields


        field :created_at, Crystalline::Nilable.new(::DateTime), { 'format_json': { 'letter_case': ::UnifiedRubySDK::Utils.field_name('created_at'), 'decoder': Utils.datetime_from_iso_format(true) } }

        field :currency, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::UnifiedRubySDK::Utils.field_name('currency') } }

        field :end_at, Crystalline::Nilable.new(::DateTime), { 'format_json': { 'letter_case': ::UnifiedRubySDK::Utils.field_name('end_at'), 'decoder': Utils.datetime_from_iso_format(true) } }

        field :id, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::UnifiedRubySDK::Utils.field_name('id') } }

        field :name, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::UnifiedRubySDK::Utils.field_name('name') } }

        field :raw, Crystalline::Nilable.new(Crystalline::Hash.new(Symbol, ::Object)), { 'format_json': { 'letter_case': ::UnifiedRubySDK::Utils.field_name('raw') } }

        field :start_at, Crystalline::Nilable.new(::DateTime), { 'format_json': { 'letter_case': ::UnifiedRubySDK::Utils.field_name('start_at'), 'decoder': Utils.datetime_from_iso_format(true) } }

        field :sub_items, Crystalline::Nilable.new(Crystalline::Array.new(Models::Shared::AccountingTrialbalanceSubItem)), { 'format_json': { 'letter_case': ::UnifiedRubySDK::Utils.field_name('sub_items') } }

        field :total_credit_amount, Crystalline::Nilable.new(::Float), { 'format_json': { 'letter_case': ::UnifiedRubySDK::Utils.field_name('total_credit_amount') } }

        field :total_debit_amount, Crystalline::Nilable.new(::Float), { 'format_json': { 'letter_case': ::UnifiedRubySDK::Utils.field_name('total_debit_amount') } }

        field :updated_at, Crystalline::Nilable.new(::DateTime), { 'format_json': { 'letter_case': ::UnifiedRubySDK::Utils.field_name('updated_at'), 'decoder': Utils.datetime_from_iso_format(true) } }

        sig { params(created_at: T.nilable(::DateTime), currency: T.nilable(::String), end_at: T.nilable(::DateTime), id: T.nilable(::String), name: T.nilable(::String), raw: T.nilable(T::Hash[Symbol, ::Object]), start_at: T.nilable(::DateTime), sub_items: T.nilable(T::Array[Models::Shared::AccountingTrialbalanceSubItem]), total_credit_amount: T.nilable(::Float), total_debit_amount: T.nilable(::Float), updated_at: T.nilable(::DateTime)).void }
        def initialize(created_at: nil, currency: nil, end_at: nil, id: nil, name: nil, raw: nil, start_at: nil, sub_items: nil, total_credit_amount: nil, total_debit_amount: nil, updated_at: nil)
          @created_at = created_at
          @currency = currency
          @end_at = end_at
          @id = id
          @name = name
          @raw = raw
          @start_at = start_at
          @sub_items = sub_items
          @total_credit_amount = total_credit_amount
          @total_debit_amount = total_debit_amount
          @updated_at = updated_at
        end

        sig { params(other: T.untyped).returns(T::Boolean) }
        def ==(other)
          return false unless other.is_a? self.class
          return false unless @created_at == other.created_at
          return false unless @currency == other.currency
          return false unless @end_at == other.end_at
          return false unless @id == other.id
          return false unless @name == other.name
          return false unless @raw == other.raw
          return false unless @start_at == other.start_at
          return false unless @sub_items == other.sub_items
          return false unless @total_credit_amount == other.total_credit_amount
          return false unless @total_debit_amount == other.total_debit_amount
          return false unless @updated_at == other.updated_at
          true
        end
      end
    end
  end
end
