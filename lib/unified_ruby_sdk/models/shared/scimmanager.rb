# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module UnifiedRubySDK
  module Models
    module Shared
    
      # "id" attribute of another User.
      class ScimManager
        extend T::Sig
        include Crystalline::MetadataFields


        field :dollar_ref, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::UnifiedRubySDK::Utils.field_name('$ref') } }

        field :display_name, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::UnifiedRubySDK::Utils.field_name('displayName') } }

        field :manager_id, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::UnifiedRubySDK::Utils.field_name('managerId') } }

        field :type, Crystalline::Nilable.new(Models::Shared::ScimManagerType), { 'format_json': { 'letter_case': ::UnifiedRubySDK::Utils.field_name('type'), 'decoder': Utils.enum_from_string(Models::Shared::ScimManagerType, true) } }

        field :value, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::UnifiedRubySDK::Utils.field_name('value') } }

        sig { params(dollar_ref: T.nilable(::String), display_name: T.nilable(::String), manager_id: T.nilable(::String), type: T.nilable(Models::Shared::ScimManagerType), value: T.nilable(::String)).void }
        def initialize(dollar_ref: nil, display_name: nil, manager_id: nil, type: nil, value: nil)
          @dollar_ref = dollar_ref
          @display_name = display_name
          @manager_id = manager_id
          @type = type
          @value = value
        end

        sig { params(other: T.untyped).returns(T::Boolean) }
        def ==(other)
          return false unless other.is_a? self.class
          return false unless @dollar_ref == other.dollar_ref
          return false unless @display_name == other.display_name
          return false unless @manager_id == other.manager_id
          return false unless @type == other.type
          return false unless @value == other.value
          true
        end
      end
    end
  end
end
