# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module UnifiedRubySDK
  module Models
    module Shared
    

      class CalendarAttendee
        extend T::Sig
        include Crystalline::MetadataFields


        field :email, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::UnifiedRubySDK::Utils.field_name('email') } }

        field :name, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::UnifiedRubySDK::Utils.field_name('name') } }

        field :required, Crystalline::Nilable.new(Crystalline::Boolean.new), { 'format_json': { 'letter_case': ::UnifiedRubySDK::Utils.field_name('required') } }

        field :status, Crystalline::Nilable.new(Models::Shared::CalendarAttendeeStatus), { 'format_json': { 'letter_case': ::UnifiedRubySDK::Utils.field_name('status'), 'decoder': Utils.enum_from_string(Models::Shared::CalendarAttendeeStatus, true) } }

        field :user_id, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::UnifiedRubySDK::Utils.field_name('user_id') } }

        sig { params(email: T.nilable(::String), name: T.nilable(::String), required: T.nilable(T::Boolean), status: T.nilable(Models::Shared::CalendarAttendeeStatus), user_id: T.nilable(::String)).void }
        def initialize(email: nil, name: nil, required: nil, status: nil, user_id: nil)
          @email = email
          @name = name
          @required = required
          @status = status
          @user_id = user_id
        end

        sig { params(other: T.untyped).returns(T::Boolean) }
        def ==(other)
          return false unless other.is_a? self.class
          return false unless @email == other.email
          return false unless @name == other.name
          return false unless @required == other.required
          return false unless @status == other.status
          return false unless @user_id == other.user_id
          true
        end
      end
    end
  end
end
