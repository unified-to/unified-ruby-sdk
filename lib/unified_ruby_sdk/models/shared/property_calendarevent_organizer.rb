# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module UnifiedRubySDK
  module Shared
  

    class PropertyCalendarEventOrganizer < ::Crystalline::FieldAugmented
      extend T::Sig


      field :email, T.nilable(::String), { 'format_json': { 'letter_case': ::UnifiedRubySDK::Utils.field_name('email') } }

      field :name, T.nilable(::String), { 'format_json': { 'letter_case': ::UnifiedRubySDK::Utils.field_name('name') } }

      field :required, T.nilable(T::Boolean), { 'format_json': { 'letter_case': ::UnifiedRubySDK::Utils.field_name('required') } }

      field :status, T.nilable(::UnifiedRubySDK::Shared::PropertyCalendarEventOrganizerStatus), { 'format_json': { 'letter_case': ::UnifiedRubySDK::Utils.field_name('status'), 'decoder': Utils.enum_from_string(::UnifiedRubySDK::Shared::PropertyCalendarEventOrganizerStatus, true) } }

      field :user_id, T.nilable(::String), { 'format_json': { 'letter_case': ::UnifiedRubySDK::Utils.field_name('user_id') } }


      sig { params(email: T.nilable(::String), name: T.nilable(::String), required: T.nilable(T::Boolean), status: T.nilable(::UnifiedRubySDK::Shared::PropertyCalendarEventOrganizerStatus), user_id: T.nilable(::String)).void }
      def initialize(email: nil, name: nil, required: nil, status: nil, user_id: nil)
        @email = email
        @name = name
        @required = required
        @status = status
        @user_id = user_id
      end
    end
  end
end
