# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module UnifiedRubySDK
  module Models
    module Shared
    

      class RepoOrganization
        extend T::Sig
        include Crystalline::MetadataFields


        field :avatar_url, T.nilable(::String), { 'format_json': { 'letter_case': ::UnifiedRubySDK::Utils.field_name('avatar_url') } }

        field :created_at, T.nilable(::DateTime), { 'format_json': { 'letter_case': ::UnifiedRubySDK::Utils.field_name('created_at'), 'decoder': Utils.datetime_from_iso_format(true) } }

        field :description, T.nilable(::String), { 'format_json': { 'letter_case': ::UnifiedRubySDK::Utils.field_name('description') } }

        field :id, T.nilable(::String), { 'format_json': { 'letter_case': ::UnifiedRubySDK::Utils.field_name('id') } }

        field :name, T.nilable(::String), { 'format_json': { 'letter_case': ::UnifiedRubySDK::Utils.field_name('name') } }

        field :raw, T.nilable(T::Hash[Symbol, ::Object]), { 'format_json': { 'letter_case': ::UnifiedRubySDK::Utils.field_name('raw') } }

        field :updated_at, T.nilable(::DateTime), { 'format_json': { 'letter_case': ::UnifiedRubySDK::Utils.field_name('updated_at'), 'decoder': Utils.datetime_from_iso_format(true) } }
        # id values of the users/employees associated with this organization
        field :user_ids, T.nilable(T::Array[::String]), { 'format_json': { 'letter_case': ::UnifiedRubySDK::Utils.field_name('user_ids') } }

        field :web_url, T.nilable(::String), { 'format_json': { 'letter_case': ::UnifiedRubySDK::Utils.field_name('web_url') } }


        sig { params(avatar_url: T.nilable(::String), created_at: T.nilable(::DateTime), description: T.nilable(::String), id: T.nilable(::String), name: T.nilable(::String), raw: T.nilable(T::Hash[Symbol, ::Object]), updated_at: T.nilable(::DateTime), user_ids: T.nilable(T::Array[::String]), web_url: T.nilable(::String)).void }
        def initialize(avatar_url: nil, created_at: nil, description: nil, id: nil, name: nil, raw: nil, updated_at: nil, user_ids: nil, web_url: nil)
          @avatar_url = avatar_url
          @created_at = created_at
          @description = description
          @id = id
          @name = name
          @raw = raw
          @updated_at = updated_at
          @user_ids = user_ids
          @web_url = web_url
        end

        def ==(other)
          return false unless other.is_a? self.class
          return false unless @avatar_url == other.avatar_url
          return false unless @created_at == other.created_at
          return false unless @description == other.description
          return false unless @id == other.id
          return false unless @name == other.name
          return false unless @raw == other.raw
          return false unless @updated_at == other.updated_at
          return false unless @user_ids == other.user_ids
          return false unless @web_url == other.web_url
          true
        end
      end
    end
  end
end
