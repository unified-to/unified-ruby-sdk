# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module UnifiedRubySDK
  module Models
    module Shared
    

      class AtsOffer
        extend T::Sig
        include Crystalline::MetadataFields


        field :accepted_at, T.nilable(::DateTime), { 'format_json': { 'letter_case': ::UnifiedRubySDK::Utils.field_name('accepted_at'), 'decoder': Utils.datetime_from_iso_format(true) } }
        # compensation details for the offer
        field :compensation, T.nilable(T::Array[Models::Shared::AtsCompensation]), { 'format_json': { 'letter_case': ::UnifiedRubySDK::Utils.field_name('compensation') } }

        field :created_at, T.nilable(::DateTime), { 'format_json': { 'letter_case': ::UnifiedRubySDK::Utils.field_name('created_at'), 'decoder': Utils.datetime_from_iso_format(true) } }

        field :creator_user_id, T.nilable(::String), { 'format_json': { 'letter_case': ::UnifiedRubySDK::Utils.field_name('creator_user_id') } }

        field :employee_user_id, T.nilable(::String), { 'format_json': { 'letter_case': ::UnifiedRubySDK::Utils.field_name('employee_user_id') } }

        field :id, T.nilable(::String), { 'format_json': { 'letter_case': ::UnifiedRubySDK::Utils.field_name('id') } }

        field :raw, T.nilable(T::Hash[Symbol, ::Object]), { 'format_json': { 'letter_case': ::UnifiedRubySDK::Utils.field_name('raw') } }

        field :rejected_at, T.nilable(::DateTime), { 'format_json': { 'letter_case': ::UnifiedRubySDK::Utils.field_name('rejected_at'), 'decoder': Utils.datetime_from_iso_format(true) } }

        field :sent_at, T.nilable(::DateTime), { 'format_json': { 'letter_case': ::UnifiedRubySDK::Utils.field_name('sent_at'), 'decoder': Utils.datetime_from_iso_format(true) } }

        field :start_at, T.nilable(::DateTime), { 'format_json': { 'letter_case': ::UnifiedRubySDK::Utils.field_name('start_at'), 'decoder': Utils.datetime_from_iso_format(true) } }

        field :status, T.nilable(Models::Shared::AtsOfferStatus), { 'format_json': { 'letter_case': ::UnifiedRubySDK::Utils.field_name('status'), 'decoder': Utils.enum_from_string(Models::Shared::AtsOfferStatus, true) } }

        field :updated_at, T.nilable(::DateTime), { 'format_json': { 'letter_case': ::UnifiedRubySDK::Utils.field_name('updated_at'), 'decoder': Utils.datetime_from_iso_format(true) } }


        sig { params(accepted_at: T.nilable(::DateTime), compensation: T.nilable(T::Array[Models::Shared::AtsCompensation]), created_at: T.nilable(::DateTime), creator_user_id: T.nilable(::String), employee_user_id: T.nilable(::String), id: T.nilable(::String), raw: T.nilable(T::Hash[Symbol, ::Object]), rejected_at: T.nilable(::DateTime), sent_at: T.nilable(::DateTime), start_at: T.nilable(::DateTime), status: T.nilable(Models::Shared::AtsOfferStatus), updated_at: T.nilable(::DateTime)).void }
        def initialize(accepted_at: nil, compensation: nil, created_at: nil, creator_user_id: nil, employee_user_id: nil, id: nil, raw: nil, rejected_at: nil, sent_at: nil, start_at: nil, status: nil, updated_at: nil)
          @accepted_at = accepted_at
          @compensation = compensation
          @created_at = created_at
          @creator_user_id = creator_user_id
          @employee_user_id = employee_user_id
          @id = id
          @raw = raw
          @rejected_at = rejected_at
          @sent_at = sent_at
          @start_at = start_at
          @status = status
          @updated_at = updated_at
        end

        def ==(other)
          return false unless other.is_a? self.class
          return false unless @accepted_at == other.accepted_at
          return false unless @compensation == other.compensation
          return false unless @created_at == other.created_at
          return false unless @creator_user_id == other.creator_user_id
          return false unless @employee_user_id == other.employee_user_id
          return false unless @id == other.id
          return false unless @raw == other.raw
          return false unless @rejected_at == other.rejected_at
          return false unless @sent_at == other.sent_at
          return false unless @start_at == other.start_at
          return false unless @status == other.status
          return false unless @updated_at == other.updated_at
          true
        end
      end
    end
  end
end
