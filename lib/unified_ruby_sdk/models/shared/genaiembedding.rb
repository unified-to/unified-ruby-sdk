# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module UnifiedRubySDK
  module Models
    module Shared
    

      class GenaiEmbedding
        extend T::Sig
        include Crystalline::MetadataFields


        field :content, Crystalline::Nilable.new(Crystalline::Array.new(Models::Shared::GenaiEmbeddingContent)), { 'format_json': { 'letter_case': ::UnifiedRubySDK::Utils.field_name('content') } }

        field :dimension, Crystalline::Nilable.new(::Float), { 'format_json': { 'letter_case': ::UnifiedRubySDK::Utils.field_name('dimension') } }

        field :embeddings, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::UnifiedRubySDK::Utils.field_name('embeddings') } }

        field :enconding_format, Crystalline::Nilable.new(Models::Shared::EncondingFormat), { 'format_json': { 'letter_case': ::UnifiedRubySDK::Utils.field_name('enconding_format'), 'decoder': Utils.enum_from_string(Models::Shared::EncondingFormat, true) } }

        field :id, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::UnifiedRubySDK::Utils.field_name('id') } }

        field :max_tokens, Crystalline::Nilable.new(::Float), { 'format_json': { 'letter_case': ::UnifiedRubySDK::Utils.field_name('max_tokens') } }

        field :model_id, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::UnifiedRubySDK::Utils.field_name('model_id') } }

        field :raw, Crystalline::Nilable.new(Crystalline::Hash.new(Symbol, ::Object)), { 'format_json': { 'letter_case': ::UnifiedRubySDK::Utils.field_name('raw') } }

        field :tokens_used, Crystalline::Nilable.new(::Float), { 'format_json': { 'letter_case': ::UnifiedRubySDK::Utils.field_name('tokens_used') } }

        field :type, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::UnifiedRubySDK::Utils.field_name('type') } }

        sig { params(content: T.nilable(T::Array[Models::Shared::GenaiEmbeddingContent]), dimension: T.nilable(::Float), embeddings: T.nilable(::String), enconding_format: T.nilable(Models::Shared::EncondingFormat), id: T.nilable(::String), max_tokens: T.nilable(::Float), model_id: T.nilable(::String), raw: T.nilable(T::Hash[Symbol, ::Object]), tokens_used: T.nilable(::Float), type: T.nilable(::String)).void }
        def initialize(content: nil, dimension: nil, embeddings: nil, enconding_format: nil, id: nil, max_tokens: nil, model_id: nil, raw: nil, tokens_used: nil, type: nil)
          @content = content
          @dimension = dimension
          @embeddings = embeddings
          @enconding_format = enconding_format
          @id = id
          @max_tokens = max_tokens
          @model_id = model_id
          @raw = raw
          @tokens_used = tokens_used
          @type = type
        end

        sig { params(other: T.untyped).returns(T::Boolean) }
        def ==(other)
          return false unless other.is_a? self.class
          return false unless @content == other.content
          return false unless @dimension == other.dimension
          return false unless @embeddings == other.embeddings
          return false unless @enconding_format == other.enconding_format
          return false unless @id == other.id
          return false unless @max_tokens == other.max_tokens
          return false unless @model_id == other.model_id
          return false unless @raw == other.raw
          return false unless @tokens_used == other.tokens_used
          return false unless @type == other.type
          true
        end
      end
    end
  end
end
