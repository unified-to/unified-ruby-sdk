# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module UnifiedRubySDK
  module Models
    module Shared
    

      class CommerceItemOption
        extend T::Sig
        include Crystalline::MetadataFields


        field :name, ::String, { 'format_json': { 'letter_case': ::UnifiedRubySDK::Utils.field_name('name'), required: true } }

        field :values, Crystalline::Array.new(::String), { 'format_json': { 'letter_case': ::UnifiedRubySDK::Utils.field_name('values'), required: true } }

        field :id, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::UnifiedRubySDK::Utils.field_name('id') } }

        field :position, Crystalline::Nilable.new(::Float), { 'format_json': { 'letter_case': ::UnifiedRubySDK::Utils.field_name('position') } }

        sig { params(name: ::String, values: T::Array[::String], id: T.nilable(::String), position: T.nilable(::Float)).void }
        def initialize(name:, values:, id: nil, position: nil)
          @name = name
          @values = values
          @id = id
          @position = position
        end

        sig { params(other: T.untyped).returns(T::Boolean) }
        def ==(other)
          return false unless other.is_a? self.class
          return false unless @name == other.name
          return false unless @values == other.values
          return false unless @id == other.id
          return false unless @position == other.position
          true
        end
      end
    end
  end
end
