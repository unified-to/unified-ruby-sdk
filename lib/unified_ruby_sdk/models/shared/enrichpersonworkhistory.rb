# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module UnifiedRubySDK
  module Models
    module Shared
    

      class EnrichPersonWorkHistory
        extend T::Sig
        include Crystalline::MetadataFields


        field :title, ::String, { 'format_json': { 'letter_case': ::UnifiedRubySDK::Utils.field_name('title'), required: true } }

        field :company_domain, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::UnifiedRubySDK::Utils.field_name('company_domain') } }

        field :company_id, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::UnifiedRubySDK::Utils.field_name('company_id') } }

        field :company_name, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::UnifiedRubySDK::Utils.field_name('company_name') } }

        field :end_at, Crystalline::Nilable.new(::DateTime), { 'format_json': { 'letter_case': ::UnifiedRubySDK::Utils.field_name('end_at'), 'decoder': Utils.datetime_from_iso_format(true) } }

        field :location, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::UnifiedRubySDK::Utils.field_name('location') } }

        field :start_at, Crystalline::Nilable.new(::DateTime), { 'format_json': { 'letter_case': ::UnifiedRubySDK::Utils.field_name('start_at'), 'decoder': Utils.datetime_from_iso_format(true) } }

        sig { params(title: ::String, company_domain: T.nilable(::String), company_id: T.nilable(::String), company_name: T.nilable(::String), end_at: T.nilable(::DateTime), location: T.nilable(::String), start_at: T.nilable(::DateTime)).void }
        def initialize(title:, company_domain: nil, company_id: nil, company_name: nil, end_at: nil, location: nil, start_at: nil)
          @title = title
          @company_domain = company_domain
          @company_id = company_id
          @company_name = company_name
          @end_at = end_at
          @location = location
          @start_at = start_at
        end

        sig { params(other: T.untyped).returns(T::Boolean) }
        def ==(other)
          return false unless other.is_a? self.class
          return false unless @title == other.title
          return false unless @company_domain == other.company_domain
          return false unless @company_id == other.company_id
          return false unless @company_name == other.company_name
          return false unless @end_at == other.end_at
          return false unless @location == other.location
          return false unless @start_at == other.start_at
          true
        end
      end
    end
  end
end
