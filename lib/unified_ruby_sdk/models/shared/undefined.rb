# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module UnifiedRubySDK
  module Shared
  

    class Undefined < ::UnifiedRubySDK::Utils::FieldAugmented
      extend T::Sig


      field :dollar_ref, T.nilable(::String), { 'format_json': { 'letter_case': ::UnifiedRubySDK::Utils.field_name('$ref') } }

      field :display, T.nilable(::String), { 'format_json': { 'letter_case': ::UnifiedRubySDK::Utils.field_name('display') } }

      field :operation, T.nilable(::UnifiedRubySDK::Shared::Operation), { 'format_json': { 'letter_case': ::UnifiedRubySDK::Utils.field_name('operation'), 'decoder': Utils.enum_from_string(::UnifiedRubySDK::Shared::Operation, true) } }

      field :type, T.nilable(::UnifiedRubySDK::Shared::UndefinedType), { 'format_json': { 'letter_case': ::UnifiedRubySDK::Utils.field_name('type'), 'decoder': Utils.enum_from_string(::UnifiedRubySDK::Shared::UndefinedType, true) } }

      field :value, T.nilable(::String), { 'format_json': { 'letter_case': ::UnifiedRubySDK::Utils.field_name('value') } }


      sig { params(dollar_ref: T.nilable(::String), display: T.nilable(::String), operation: T.nilable(::UnifiedRubySDK::Shared::Operation), type: T.nilable(::UnifiedRubySDK::Shared::UndefinedType), value: T.nilable(::String)).void }
      def initialize(dollar_ref: nil, display: nil, operation: nil, type: nil, value: nil)
        @dollar_ref = dollar_ref
        @display = display
        @operation = operation
        @type = type
        @value = value
      end
    end
  end
end
