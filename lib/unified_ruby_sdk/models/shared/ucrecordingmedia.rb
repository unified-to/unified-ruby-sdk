# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module UnifiedRubySDK
  module Models
    module Shared
    

      class UcRecordingMedia
        extend T::Sig
        include Crystalline::MetadataFields


        field :end_at, Crystalline::Nilable.new(::DateTime), { 'format_json': { 'letter_case': ::UnifiedRubySDK::Utils.field_name('end_at'), 'decoder': Utils.datetime_from_iso_format(true) } }

        field :language, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::UnifiedRubySDK::Utils.field_name('language') } }

        field :recording_download_url, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::UnifiedRubySDK::Utils.field_name('recording_download_url') } }

        field :start_at, Crystalline::Nilable.new(::DateTime), { 'format_json': { 'letter_case': ::UnifiedRubySDK::Utils.field_name('start_at'), 'decoder': Utils.datetime_from_iso_format(true) } }

        field :transcript_download_url, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::UnifiedRubySDK::Utils.field_name('transcript_download_url') } }

        field :transcripts, Crystalline::Nilable.new(Crystalline::Array.new(Models::Shared::UcRecordingTranscript)), { 'format_json': { 'letter_case': ::UnifiedRubySDK::Utils.field_name('transcripts') } }

        sig { params(end_at: T.nilable(::DateTime), language: T.nilable(::String), recording_download_url: T.nilable(::String), start_at: T.nilable(::DateTime), transcript_download_url: T.nilable(::String), transcripts: T.nilable(T::Array[Models::Shared::UcRecordingTranscript])).void }
        def initialize(end_at: nil, language: nil, recording_download_url: nil, start_at: nil, transcript_download_url: nil, transcripts: nil)
          @end_at = end_at
          @language = language
          @recording_download_url = recording_download_url
          @start_at = start_at
          @transcript_download_url = transcript_download_url
          @transcripts = transcripts
        end

        sig { params(other: T.untyped).returns(T::Boolean) }
        def ==(other)
          return false unless other.is_a? self.class
          return false unless @end_at == other.end_at
          return false unless @language == other.language
          return false unless @recording_download_url == other.recording_download_url
          return false unless @start_at == other.start_at
          return false unless @transcript_download_url == other.transcript_download_url
          return false unless @transcripts == other.transcripts
          true
        end
      end
    end
  end
end
