# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module UnifiedRubySDK
  module Models
    module Shared
    

      class HrisCompensation
        extend T::Sig
        include Crystalline::MetadataFields


        field :amount, Crystalline::Nilable.new(::Float), { 'format_json': { 'letter_case': ::UnifiedRubySDK::Utils.field_name('amount') } }

        field :currency, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::UnifiedRubySDK::Utils.field_name('currency') } }

        field :frequency, Crystalline::Nilable.new(Models::Shared::HrisCompensationFrequency), { 'format_json': { 'letter_case': ::UnifiedRubySDK::Utils.field_name('frequency'), 'decoder': Utils.enum_from_string(Models::Shared::HrisCompensationFrequency, true) } }

        field :type, Crystalline::Nilable.new(Models::Shared::HrisCompensationType), { 'format_json': { 'letter_case': ::UnifiedRubySDK::Utils.field_name('type'), 'decoder': Utils.enum_from_string(Models::Shared::HrisCompensationType, true) } }

        sig { params(amount: T.nilable(::Float), currency: T.nilable(::String), frequency: T.nilable(Models::Shared::HrisCompensationFrequency), type: T.nilable(Models::Shared::HrisCompensationType)).void }
        def initialize(amount: nil, currency: nil, frequency: nil, type: nil)
          @amount = amount
          @currency = currency
          @frequency = frequency
          @type = type
        end

        sig { params(other: T.untyped).returns(T::Boolean) }
        def ==(other)
          return false unless other.is_a? self.class
          return false unless @amount == other.amount
          return false unless @currency == other.currency
          return false unless @frequency == other.frequency
          return false unless @type == other.type
          true
        end
      end
    end
  end
end
