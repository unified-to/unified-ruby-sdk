# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module UnifiedRubySDK
  module Models
    module Shared
    

      class CalendarConference
        extend T::Sig
        include Crystalline::MetadataFields


        field :conference_identifier, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::UnifiedRubySDK::Utils.field_name('conference_identifier') } }

        field :country_code, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::UnifiedRubySDK::Utils.field_name('country_code') } }

        field :host_access_code, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::UnifiedRubySDK::Utils.field_name('host_access_code') } }

        field :label, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::UnifiedRubySDK::Utils.field_name('label') } }

        field :notes, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::UnifiedRubySDK::Utils.field_name('notes') } }

        field :participant_access_code, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::UnifiedRubySDK::Utils.field_name('participant_access_code') } }

        field :region_code, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::UnifiedRubySDK::Utils.field_name('region_code') } }

        field :telephone, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::UnifiedRubySDK::Utils.field_name('telephone') } }

        field :url, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::UnifiedRubySDK::Utils.field_name('url') } }

        sig { params(conference_identifier: T.nilable(::String), country_code: T.nilable(::String), host_access_code: T.nilable(::String), label: T.nilable(::String), notes: T.nilable(::String), participant_access_code: T.nilable(::String), region_code: T.nilable(::String), telephone: T.nilable(::String), url: T.nilable(::String)).void }
        def initialize(conference_identifier: nil, country_code: nil, host_access_code: nil, label: nil, notes: nil, participant_access_code: nil, region_code: nil, telephone: nil, url: nil)
          @conference_identifier = conference_identifier
          @country_code = country_code
          @host_access_code = host_access_code
          @label = label
          @notes = notes
          @participant_access_code = participant_access_code
          @region_code = region_code
          @telephone = telephone
          @url = url
        end

        sig { params(other: T.untyped).returns(T::Boolean) }
        def ==(other)
          return false unless other.is_a? self.class
          return false unless @conference_identifier == other.conference_identifier
          return false unless @country_code == other.country_code
          return false unless @host_access_code == other.host_access_code
          return false unless @label == other.label
          return false unless @notes == other.notes
          return false unless @participant_access_code == other.participant_access_code
          return false unless @region_code == other.region_code
          return false unless @telephone == other.telephone
          return false unless @url == other.url
          true
        end
      end
    end
  end
end
