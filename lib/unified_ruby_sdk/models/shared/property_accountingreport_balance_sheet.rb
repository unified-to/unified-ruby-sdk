# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module UnifiedRubySDK
  module Models
    module Shared
    

      class PropertyAccountingReportBalanceSheet
        extend T::Sig
        include Crystalline::MetadataFields


        field :assets, T.nilable(T::Array[Models::Shared::AccountingBalanceSheetItem]), { 'format_json': { 'letter_case': ::UnifiedRubySDK::Utils.field_name('assets') } }

        field :equity, T.nilable(T::Array[Models::Shared::AccountingBalanceSheetItem]), { 'format_json': { 'letter_case': ::UnifiedRubySDK::Utils.field_name('equity') } }

        field :liabilities, T.nilable(T::Array[Models::Shared::AccountingBalanceSheetItem]), { 'format_json': { 'letter_case': ::UnifiedRubySDK::Utils.field_name('liabilities') } }

        field :net_assets_amount, T.nilable(::Float), { 'format_json': { 'letter_case': ::UnifiedRubySDK::Utils.field_name('net_assets_amount') } }


        sig { params(assets: T.nilable(T::Array[Models::Shared::AccountingBalanceSheetItem]), equity: T.nilable(T::Array[Models::Shared::AccountingBalanceSheetItem]), liabilities: T.nilable(T::Array[Models::Shared::AccountingBalanceSheetItem]), net_assets_amount: T.nilable(::Float)).void }
        def initialize(assets: nil, equity: nil, liabilities: nil, net_assets_amount: nil)
          @assets = assets
          @equity = equity
          @liabilities = liabilities
          @net_assets_amount = net_assets_amount
        end

        def ==(other)
          return false unless other.is_a? self.class
          return false unless @assets == other.assets
          return false unless @equity == other.equity
          return false unless @liabilities == other.liabilities
          return false unless @net_assets_amount == other.net_assets_amount
          true
        end
      end
    end
  end
end
