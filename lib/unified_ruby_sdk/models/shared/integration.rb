# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module UnifiedRubySDK
  module Models
    module Shared
    
      # Informational object for supported integrations.
      class Integration
        extend T::Sig
        include Crystalline::MetadataFields

        # The categories of support solutions that this integration has
        field :categories, Crystalline::Array.new(Models::Shared::PropertyIntegrationCategories), { 'format_json': { 'letter_case': ::UnifiedRubySDK::Utils.field_name('categories'), required: true } }

        field :name, ::String, { 'format_json': { 'letter_case': ::UnifiedRubySDK::Utils.field_name('name'), required: true } }

        field :type, ::String, { 'format_json': { 'letter_case': ::UnifiedRubySDK::Utils.field_name('type'), required: true } }

        field :active_healthy_connections, Crystalline::Nilable.new(::Float), { 'format_json': { 'letter_case': ::UnifiedRubySDK::Utils.field_name('active_healthy_connections') } }

        field :api, Crystalline::Nilable.new(Crystalline::Union.new(Crystalline::Hash.new(Symbol, ::Object), ::String, ::Float, Crystalline::Boolean.new, Crystalline::Array.new(Crystalline::Union.new(Models::Shared::Integration1, ::String, ::Float, Crystalline::Boolean.new)))), { 'format_json': { 'letter_case': ::UnifiedRubySDK::Utils.field_name('api') } }

        field :api_docs_url, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::UnifiedRubySDK::Utils.field_name('api_docs_url') } }

        field :beta, Crystalline::Nilable.new(Crystalline::Boolean.new), { 'format_json': { 'letter_case': ::UnifiedRubySDK::Utils.field_name('beta') } }

        field :color, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::UnifiedRubySDK::Utils.field_name('color') } }

        field :created_at, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::UnifiedRubySDK::Utils.field_name('created_at') } }

        field :description, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::UnifiedRubySDK::Utils.field_name('description') } }

        field :fa_icon, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::UnifiedRubySDK::Utils.field_name('fa_icon') } }

        field :featured, Crystalline::Nilable.new(Crystalline::Boolean.new), { 'format_json': { 'letter_case': ::UnifiedRubySDK::Utils.field_name('featured') } }

        field :in_progress, Crystalline::Nilable.new(Crystalline::Boolean.new), { 'format_json': { 'letter_case': ::UnifiedRubySDK::Utils.field_name('in_progress') } }

        field :is_active, Crystalline::Nilable.new(Crystalline::Boolean.new), { 'format_json': { 'letter_case': ::UnifiedRubySDK::Utils.field_name('is_active') } }

        field :logo_url, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::UnifiedRubySDK::Utils.field_name('logo_url') } }

        field :partnership, Crystalline::Nilable.new(Crystalline::Union.new(Crystalline::Hash.new(Symbol, ::Object), ::String, ::Float, Crystalline::Boolean.new, Crystalline::Array.new(Crystalline::Union.new(Models::Shared::IntegrationSchemas1, ::String, ::Float, Crystalline::Boolean.new)))), { 'format_json': { 'letter_case': ::UnifiedRubySDK::Utils.field_name('partnership') } }

        field :popularity, Crystalline::Nilable.new(::Float), { 'format_json': { 'letter_case': ::UnifiedRubySDK::Utils.field_name('popularity') } }

        field :rate_limit_description, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::UnifiedRubySDK::Utils.field_name('rate_limit_description') } }

        field :sandbox, Crystalline::Nilable.new(Crystalline::Union.new(Crystalline::Hash.new(Symbol, ::Object), ::String, ::Float, Crystalline::Boolean.new, Crystalline::Array.new(Crystalline::Union.new(Models::Shared::IntegrationSchemasSandbox1, ::String, ::Float, Crystalline::Boolean.new)))), { 'format_json': { 'letter_case': ::UnifiedRubySDK::Utils.field_name('sandbox') } }

        field :support, Crystalline::Nilable.new(Crystalline::Hash.new(Symbol, ::Object)), { 'format_json': { 'letter_case': ::UnifiedRubySDK::Utils.field_name('support') } }

        field :tested_at, Crystalline::Nilable.new(::DateTime), { 'format_json': { 'letter_case': ::UnifiedRubySDK::Utils.field_name('tested_at'), 'decoder': Utils.datetime_from_iso_format(true) } }

        field :text_color, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::UnifiedRubySDK::Utils.field_name('text_color') } }
        # instructions for the user on how to find the token/key
        field :token_instructions, Crystalline::Nilable.new(Crystalline::Array.new(::String)), { 'format_json': { 'letter_case': ::UnifiedRubySDK::Utils.field_name('token_instructions') } }
        # if auth_types = 'token'
        field :token_names, Crystalline::Nilable.new(Crystalline::Array.new(::String)), { 'format_json': { 'letter_case': ::UnifiedRubySDK::Utils.field_name('token_names') } }

        field :updated_at, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::UnifiedRubySDK::Utils.field_name('updated_at') } }

        field :web_url, Crystalline::Nilable.new(::String), { 'format_json': { 'letter_case': ::UnifiedRubySDK::Utils.field_name('web_url') } }

        sig { params(categories: T::Array[Models::Shared::PropertyIntegrationCategories], name: ::String, type: ::String, active_healthy_connections: T.nilable(::Float), api: T.nilable(T.any(T::Hash[Symbol, ::Object], ::String, ::Float, T::Boolean, T::Array[T.any(Models::Shared::Integration1, ::String, ::Float, T::Boolean)])), api_docs_url: T.nilable(::String), beta: T.nilable(T::Boolean), color: T.nilable(::String), created_at: T.nilable(::String), description: T.nilable(::String), fa_icon: T.nilable(::String), featured: T.nilable(T::Boolean), in_progress: T.nilable(T::Boolean), is_active: T.nilable(T::Boolean), logo_url: T.nilable(::String), partnership: T.nilable(T.any(T::Hash[Symbol, ::Object], ::String, ::Float, T::Boolean, T::Array[T.any(Models::Shared::IntegrationSchemas1, ::String, ::Float, T::Boolean)])), popularity: T.nilable(::Float), rate_limit_description: T.nilable(::String), sandbox: T.nilable(T.any(T::Hash[Symbol, ::Object], ::String, ::Float, T::Boolean, T::Array[T.any(Models::Shared::IntegrationSchemasSandbox1, ::String, ::Float, T::Boolean)])), support: T.nilable(T::Hash[Symbol, ::Object]), tested_at: T.nilable(::DateTime), text_color: T.nilable(::String), token_instructions: T.nilable(T::Array[::String]), token_names: T.nilable(T::Array[::String]), updated_at: T.nilable(::String), web_url: T.nilable(::String)).void }
        def initialize(categories:, name:, type:, active_healthy_connections: nil, api: nil, api_docs_url: nil, beta: nil, color: nil, created_at: nil, description: nil, fa_icon: nil, featured: nil, in_progress: nil, is_active: nil, logo_url: nil, partnership: nil, popularity: nil, rate_limit_description: nil, sandbox: nil, support: nil, tested_at: nil, text_color: nil, token_instructions: nil, token_names: nil, updated_at: nil, web_url: nil)
          @categories = categories
          @name = name
          @type = type
          @active_healthy_connections = active_healthy_connections
          @api = api
          @api_docs_url = api_docs_url
          @beta = beta
          @color = color
          @created_at = created_at
          @description = description
          @fa_icon = fa_icon
          @featured = featured
          @in_progress = in_progress
          @is_active = is_active
          @logo_url = logo_url
          @partnership = partnership
          @popularity = popularity
          @rate_limit_description = rate_limit_description
          @sandbox = sandbox
          @support = support
          @tested_at = tested_at
          @text_color = text_color
          @token_instructions = token_instructions
          @token_names = token_names
          @updated_at = updated_at
          @web_url = web_url
        end

        sig { params(other: T.untyped).returns(T::Boolean) }
        def ==(other)
          return false unless other.is_a? self.class
          return false unless @categories == other.categories
          return false unless @name == other.name
          return false unless @type == other.type
          return false unless @active_healthy_connections == other.active_healthy_connections
          return false unless @api == other.api
          return false unless @api_docs_url == other.api_docs_url
          return false unless @beta == other.beta
          return false unless @color == other.color
          return false unless @created_at == other.created_at
          return false unless @description == other.description
          return false unless @fa_icon == other.fa_icon
          return false unless @featured == other.featured
          return false unless @in_progress == other.in_progress
          return false unless @is_active == other.is_active
          return false unless @logo_url == other.logo_url
          return false unless @partnership == other.partnership
          return false unless @popularity == other.popularity
          return false unless @rate_limit_description == other.rate_limit_description
          return false unless @sandbox == other.sandbox
          return false unless @support == other.support
          return false unless @tested_at == other.tested_at
          return false unless @text_color == other.text_color
          return false unless @token_instructions == other.token_instructions
          return false unless @token_names == other.token_names
          return false unless @updated_at == other.updated_at
          return false unless @web_url == other.web_url
          true
        end
      end
    end
  end
end
