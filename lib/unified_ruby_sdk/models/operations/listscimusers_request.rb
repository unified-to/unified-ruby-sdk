# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module UnifiedRubySDK
  module Models
    module Operations
    

      class ListScimUsersRequest
        extend T::Sig
        include Crystalline::MetadataFields

        # ID of the connection
        field :connection_id, ::String, { 'path_param': { 'field_name': 'connection_id', 'style': 'simple', 'explode': false } }

        field :count, T.nilable(::Float), { 'query_param': { 'field_name': 'count', 'style': 'form', 'explode': true } }

        field :filter, T.nilable(::String), { 'query_param': { 'field_name': 'filter', 'style': 'form', 'explode': true } }

        field :sort_by, T.nilable(::String), { 'query_param': { 'field_name': 'sortBy', 'style': 'form', 'explode': true } }

        field :sort_order, T.nilable(::String), { 'query_param': { 'field_name': 'sortOrder', 'style': 'form', 'explode': true } }

        field :start_index, T.nilable(::Float), { 'query_param': { 'field_name': 'startIndex', 'style': 'form', 'explode': true } }


        sig { params(connection_id: ::String, count: T.nilable(::Float), filter: T.nilable(::String), sort_by: T.nilable(::String), sort_order: T.nilable(::String), start_index: T.nilable(::Float)).void }
        def initialize(connection_id: nil, count: nil, filter: nil, sort_by: nil, sort_order: nil, start_index: nil)
          @connection_id = connection_id
          @count = count
          @filter = filter
          @sort_by = sort_by
          @sort_order = sort_order
          @start_index = start_index
        end

        def ==(other)
          return false unless other.is_a? self.class
          return false unless @connection_id == other.connection_id
          return false unless @count == other.count
          return false unless @filter == other.filter
          return false unless @sort_by == other.sort_by
          return false unless @sort_order == other.sort_order
          return false unless @start_index == other.start_index
          true
        end
      end
    end
  end
end
