# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module UnifiedRubySDK
  module Models
    module Operations
    

      class ListUnifiedWebhooksRequest
        extend T::Sig
        include Crystalline::MetadataFields

        # Filter the results to just this integration
        field :connection_id, Crystalline::Nilable.new(::String), { 'query_param': { 'field_name': 'connection_id', 'style': 'form', 'explode': true } }
        # Return only results whose created date is equal or less to this value
        field :created_lte, Crystalline::Nilable.new(::String), { 'query_param': { 'field_name': 'created_lte', 'style': 'form', 'explode': true } }

        field :env, Crystalline::Nilable.new(::String), { 'query_param': { 'field_name': 'env', 'style': 'form', 'explode': true } }
        # Filter the results to just this integration
        field :integration_type, Crystalline::Nilable.new(::String), { 'query_param': { 'field_name': 'integration_type', 'style': 'form', 'explode': true } }

        field :limit, Crystalline::Nilable.new(::Float), { 'query_param': { 'field_name': 'limit', 'style': 'form', 'explode': true } }
        # Filter the results for webhooks for only this object
        field :object, Crystalline::Nilable.new(::String), { 'query_param': { 'field_name': 'object', 'style': 'form', 'explode': true } }

        field :offset, Crystalline::Nilable.new(::Float), { 'query_param': { 'field_name': 'offset', 'style': 'form', 'explode': true } }

        field :order, Crystalline::Nilable.new(::String), { 'query_param': { 'field_name': 'order', 'style': 'form', 'explode': true } }

        field :sort, Crystalline::Nilable.new(::String), { 'query_param': { 'field_name': 'sort', 'style': 'form', 'explode': true } }
        # Return only results whose updated date is equal or greater to this value
        field :updated_gte, Crystalline::Nilable.new(::String), { 'query_param': { 'field_name': 'updated_gte', 'style': 'form', 'explode': true } }

        sig { params(connection_id: T.nilable(::String), created_lte: T.nilable(::String), env: T.nilable(::String), integration_type: T.nilable(::String), limit: T.nilable(::Float), object: T.nilable(::String), offset: T.nilable(::Float), order: T.nilable(::String), sort: T.nilable(::String), updated_gte: T.nilable(::String)).void }
        def initialize(connection_id: nil, created_lte: nil, env: nil, integration_type: nil, limit: nil, object: nil, offset: nil, order: nil, sort: nil, updated_gte: nil)
          @connection_id = connection_id
          @created_lte = created_lte
          @env = env
          @integration_type = integration_type
          @limit = limit
          @object = object
          @offset = offset
          @order = order
          @sort = sort
          @updated_gte = updated_gte
        end

        sig { params(other: T.untyped).returns(T::Boolean) }
        def ==(other)
          return false unless other.is_a? self.class
          return false unless @connection_id == other.connection_id
          return false unless @created_lte == other.created_lte
          return false unless @env == other.env
          return false unless @integration_type == other.integration_type
          return false unless @limit == other.limit
          return false unless @object == other.object
          return false unless @offset == other.offset
          return false unless @order == other.order
          return false unless @sort == other.sort
          return false unless @updated_gte == other.updated_gte
          true
        end
      end
    end
  end
end
