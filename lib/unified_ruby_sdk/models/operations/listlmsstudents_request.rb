# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module UnifiedRubySDK
  module Models
    module Operations
    

      class ListLmsStudentsRequest
        extend T::Sig
        include Crystalline::MetadataFields

        # ID of the connection
        field :connection_id, ::String, { 'path_param': { 'field_name': 'connection_id', 'style': 'simple', 'explode': false } }
        # The class ID to filter by
        field :class_id, T.nilable(::String), { 'query_param': { 'field_name': 'class_id', 'style': 'form', 'explode': true } }
        # The course ID to filter by
        field :course_id, T.nilable(::String), { 'query_param': { 'field_name': 'course_id', 'style': 'form', 'explode': true } }
        # Comma-delimited fields to return
        field :fields_, T.nilable(T::Array[::String]), { 'query_param': { 'field_name': 'fields', 'style': 'form', 'explode': true } }

        field :limit, T.nilable(::Float), { 'query_param': { 'field_name': 'limit', 'style': 'form', 'explode': true } }
        # The location ID to filter by
        field :location_id, T.nilable(::String), { 'query_param': { 'field_name': 'location_id', 'style': 'form', 'explode': true } }

        field :offset, T.nilable(::Float), { 'query_param': { 'field_name': 'offset', 'style': 'form', 'explode': true } }

        field :order, T.nilable(::String), { 'query_param': { 'field_name': 'order', 'style': 'form', 'explode': true } }
        # Query string to search. eg. email address or name
        field :query, T.nilable(::String), { 'query_param': { 'field_name': 'query', 'style': 'form', 'explode': true } }
        # Raw parameters to include in the 3rd-party request. Encoded as a URL component. eg. raw parameters: foo=bar&zoo=bar -> raw=foo%3Dbar%26zoo%3Dbar
        field :raw, T.nilable(::String), { 'query_param': { 'field_name': 'raw', 'style': 'form', 'explode': true } }

        field :sort, T.nilable(::String), { 'query_param': { 'field_name': 'sort', 'style': 'form', 'explode': true } }
        # Return only results whose updated date is equal or greater to this value
        field :updated_gte, T.nilable(::String), { 'query_param': { 'field_name': 'updated_gte', 'style': 'form', 'explode': true } }


        sig { params(connection_id: ::String, class_id: T.nilable(::String), course_id: T.nilable(::String), fields_: T.nilable(T::Array[::String]), limit: T.nilable(::Float), location_id: T.nilable(::String), offset: T.nilable(::Float), order: T.nilable(::String), query: T.nilable(::String), raw: T.nilable(::String), sort: T.nilable(::String), updated_gte: T.nilable(::String)).void }
        def initialize(connection_id: nil, class_id: nil, course_id: nil, fields_: nil, limit: nil, location_id: nil, offset: nil, order: nil, query: nil, raw: nil, sort: nil, updated_gte: nil)
          @connection_id = connection_id
          @class_id = class_id
          @course_id = course_id
          @fields_ = fields_
          @limit = limit
          @location_id = location_id
          @offset = offset
          @order = order
          @query = query
          @raw = raw
          @sort = sort
          @updated_gte = updated_gte
        end

        def ==(other)
          return false unless other.is_a? self.class
          return false unless @connection_id == other.connection_id
          return false unless @class_id == other.class_id
          return false unless @course_id == other.course_id
          return false unless @fields_ == other.fields_
          return false unless @limit == other.limit
          return false unless @location_id == other.location_id
          return false unless @offset == other.offset
          return false unless @order == other.order
          return false unless @query == other.query
          return false unless @raw == other.raw
          return false unless @sort == other.sort
          return false unless @updated_gte == other.updated_gte
          true
        end
      end
    end
  end
end
