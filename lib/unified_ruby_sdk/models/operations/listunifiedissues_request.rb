# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module UnifiedRubySDK
  module Models
    module Operations
    

      class ListUnifiedIssuesRequest
        extend T::Sig
        include Crystalline::MetadataFields


        field :limit, T.nilable(::Float), { 'query_param': { 'field_name': 'limit', 'style': 'form', 'explode': true } }

        field :offset, T.nilable(::Float), { 'query_param': { 'field_name': 'offset', 'style': 'form', 'explode': true } }

        field :order, T.nilable(::String), { 'query_param': { 'field_name': 'order', 'style': 'form', 'explode': true } }

        field :sort, T.nilable(::String), { 'query_param': { 'field_name': 'sort', 'style': 'form', 'explode': true } }
        # Return only results whose updated date is equal or greater to this value
        field :updated_gte, T.nilable(::DateTime), { 'query_param': { 'field_name': 'updated_gte', 'style': 'form', 'explode': true } }


        sig { params(limit: T.nilable(::Float), offset: T.nilable(::Float), order: T.nilable(::String), sort: T.nilable(::String), updated_gte: T.nilable(::DateTime)).void }
        def initialize(limit: nil, offset: nil, order: nil, sort: nil, updated_gte: nil)
          @limit = limit
          @offset = offset
          @order = order
          @sort = sort
          @updated_gte = updated_gte
        end

        def ==(other)
          return false unless other.is_a? self.class
          return false unless @limit == other.limit
          return false unless @offset == other.offset
          return false unless @order == other.order
          return false unless @sort == other.sort
          return false unless @updated_gte == other.updated_gte
          true
        end
      end
    end
  end
end
