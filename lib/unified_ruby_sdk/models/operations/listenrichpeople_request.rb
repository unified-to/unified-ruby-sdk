# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: true
# frozen_string_literal: true


module UnifiedRubySDK
  module Models
    module Operations
    

      class ListEnrichPeopleRequest
        extend T::Sig
        include Crystalline::MetadataFields

        # ID of the connection
        field :connection_id, ::String, { 'path_param': { 'field_name': 'connection_id', 'style': 'simple', 'explode': false } }
        # The name of the company the person is associated with.  Not valid by itself.
        field :company_name, Crystalline::Nilable.new(::String), { 'query_param': { 'field_name': 'company_name', 'style': 'form', 'explode': true } }
        # The email of the person to search
        field :email, Crystalline::Nilable.new(::String), { 'query_param': { 'field_name': 'email', 'style': 'form', 'explode': true } }
        # The LinkedIn URL of the person to search
        field :linkedin_url, Crystalline::Nilable.new(::String), { 'query_param': { 'field_name': 'linkedin_url', 'style': 'form', 'explode': true } }
        # The name of the person to search
        field :name, Crystalline::Nilable.new(::String), { 'query_param': { 'field_name': 'name', 'style': 'form', 'explode': true } }
        # The twitter handle of the person to search
        field :twitter, Crystalline::Nilable.new(::String), { 'query_param': { 'field_name': 'twitter', 'style': 'form', 'explode': true } }

        sig { params(connection_id: ::String, company_name: T.nilable(::String), email: T.nilable(::String), linkedin_url: T.nilable(::String), name: T.nilable(::String), twitter: T.nilable(::String)).void }
        def initialize(connection_id:, company_name: nil, email: nil, linkedin_url: nil, name: nil, twitter: nil)
          @connection_id = connection_id
          @company_name = company_name
          @email = email
          @linkedin_url = linkedin_url
          @name = name
          @twitter = twitter
        end

        sig { params(other: T.untyped).returns(T::Boolean) }
        def ==(other)
          return false unless other.is_a? self.class
          return false unless @connection_id == other.connection_id
          return false unless @company_name == other.company_name
          return false unless @email == other.email
          return false unless @linkedin_url == other.linkedin_url
          return false unless @name == other.name
          return false unless @twitter == other.twitter
          true
        end
      end
    end
  end
end
