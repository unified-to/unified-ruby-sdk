# Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

# typed: true
# frozen_string_literal: true

require 'sorbet-runtime'
require 'faraday'
require_relative '../shared/apierror'
require_relative '../shared/drink'
require_relative '../shared/error'

module OpenApiSDK
  module Operations

    class GetDrinkRequest < OpenApiSDK::Utils::FieldAugmented
      extend T::Sig


      field :name, String, { 'path_param': { 'field_name': 'name', 'style': 'simple', 'explode': false } }


      sig { params(name: String).void }
      def initialize(name: nil)
        @name = name
      end
    end


    class GetDrinkResponse < OpenApiSDK::Utils::FieldAugmented
      extend T::Sig

      # HTTP response content type for this operation
      field :content_type, String
      # HTTP response status code for this operation
      field :status_code, Integer
      # An error occurred interacting with the API.
      field :api_error, T.nilable(Shared::APIError)
      # A drink.
      field :drink, T.nilable(Shared::Drink)
      # An unknown error occurred interacting with the API.
      field :error, T.nilable(Shared::Error)
      # Raw HTTP response; suitable for custom response parsing
      field :raw_response, T.nilable(Faraday::Response)


      sig { params(content_type: String, status_code: Integer, api_error: T.nilable(Shared::APIError), drink: T.nilable(Shared::Drink), error: T.nilable(Shared::Error), raw_response: T.nilable(Faraday::Response)).void }
      def initialize(content_type: nil, status_code: nil, api_error: nil, drink: nil, error: nil, raw_response: nil)
        @content_type = content_type
        @status_code = status_code
        @api_error = api_error
        @drink = drink
        @error = error
        @raw_response = raw_response
      end
    end
  end
end
