# Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

# typed: true
# frozen_string_literal: true

require 'sorbet-runtime'
require 'faraday'
require_relative '../shared/ordertype'

module OpenApiSDK
  module Shared
    # An order for a drink or ingredient.
    class OrderInput < OpenApiSDK::Utils::FieldAugmented
      extend T::Sig

      # The product code of the drink or ingredient.
      field :product_code, String, { 'format_json': { 'letter_case': OpenApiSDK::Utils.field_name('productCode') } }
      # The number of units of the drink or ingredient to order.
      field :quantity, Integer, { 'format_json': { 'letter_case': OpenApiSDK::Utils.field_name('quantity') } }
      # The type of order.
      field :type, Shared::OrderType, { 'format_json': { 'letter_case': OpenApiSDK::Utils.field_name('type'), 'decoder': Utils.enum_from_string(Shared::OrderType, false) } }


      sig { params(product_code: String, quantity: Integer, type: Shared::OrderType).void }
      def initialize(product_code: nil, quantity: nil, type: nil)
        @product_code = product_code
        @quantity = quantity
        @type = type
      end
    end

    # OrderStatus - The status of the order.
    class OrderStatus < T::Enum
      enums do
        PENDING = new('pending')
        PROCESSING = new('processing')
        COMPLETE = new('complete')
      end
    end


    # An order for a drink or ingredient.
    class Order < OpenApiSDK::Utils::FieldAugmented
      extend T::Sig

      # The product code of the drink or ingredient.
      field :product_code, String, { 'format_json': { 'letter_case': OpenApiSDK::Utils.field_name('productCode') } }
      # The number of units of the drink or ingredient to order.
      field :quantity, Integer, { 'format_json': { 'letter_case': OpenApiSDK::Utils.field_name('quantity') } }
      # The status of the order.
      field :status, Shared::OrderStatus, { 'format_json': { 'letter_case': OpenApiSDK::Utils.field_name('status'), 'decoder': Utils.enum_from_string(Shared::OrderStatus, false) } }
      # The type of order.
      field :type, Shared::OrderType, { 'format_json': { 'letter_case': OpenApiSDK::Utils.field_name('type'), 'decoder': Utils.enum_from_string(Shared::OrderType, false) } }


      sig { params(product_code: String, quantity: Integer, status: Shared::OrderStatus, type: Shared::OrderType).void }
      def initialize(product_code: nil, quantity: nil, status: nil, type: nil)
        @product_code = product_code
        @quantity = quantity
        @status = status
        @type = type
      end
    end
  end
end
