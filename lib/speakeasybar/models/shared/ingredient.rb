# Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

# typed: true
# frozen_string_literal: true

require 'sorbet-runtime'
require 'faraday'
require_relative '../shared/ingredienttype'

module OpenApiSDK
  module Shared

    class IngredientInput < OpenApiSDK::Utils::FieldAugmented
      extend T::Sig

      # The name of the ingredient.
      field :name, String, { 'format_json': { 'letter_case': OpenApiSDK::Utils.field_name('name') } }
      # The type of ingredient.
      field :type, Shared::IngredientType, { 'format_json': { 'letter_case': OpenApiSDK::Utils.field_name('type'), 'decoder': Utils.enum_from_string(Shared::IngredientType, false) } }
      # The product code of the ingredient, only available when authenticated.
      field :product_code, T.nilable(String), { 'format_json': { 'letter_case': OpenApiSDK::Utils.field_name('productCode') } }


      sig { params(name: String, type: Shared::IngredientType, product_code: T.nilable(String)).void }
      def initialize(name: nil, type: nil, product_code: nil)
        @name = name
        @type = type
        @product_code = product_code
      end
    end


    class Ingredient < OpenApiSDK::Utils::FieldAugmented
      extend T::Sig

      # The name of the ingredient.
      field :name, String, { 'format_json': { 'letter_case': OpenApiSDK::Utils.field_name('name') } }
      # The type of ingredient.
      field :type, Shared::IngredientType, { 'format_json': { 'letter_case': OpenApiSDK::Utils.field_name('type'), 'decoder': Utils.enum_from_string(Shared::IngredientType, false) } }
      # The product code of the ingredient, only available when authenticated.
      field :product_code, T.nilable(String), { 'format_json': { 'letter_case': OpenApiSDK::Utils.field_name('productCode') } }
      # The number of units of the ingredient in stock, only available when authenticated.
      field :stock, T.nilable(Integer), { 'format_json': { 'letter_case': OpenApiSDK::Utils.field_name('stock') } }


      sig { params(name: String, type: Shared::IngredientType, product_code: T.nilable(String), stock: T.nilable(Integer)).void }
      def initialize(name: nil, type: nil, product_code: nil, stock: nil)
        @name = name
        @type = type
        @product_code = product_code
        @stock = stock
      end
    end
  end
end
