# Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.

# typed: false
# frozen_string_literal: true

module Crystalline
  class Array
    attr_accessor :inner_type

    def initialize(inner_type)
      @inner_type = inner_type
    end
  end

  class Hash
    attr_accessor :key_type, :value_type
    
    def initialize(key_type, value_type)
      @key_type = key_type
      @value_type = value_type
    end
  end

  class Union
    attr_accessor :types
    
    def initialize(*types)
      @types = types
    end
  end

  class Nilable
    attr_accessor :inner_type
    
    def initialize(inner_type)
      @inner_type = inner_type
    end
  end

  class Boolean
  end

  module Enum
    def initialize(val)
      puts methods
      if instance_methods(false).include?(:initialize)
        super(val)
      else
        @val = val
      end
    end

    def self.enums(&blk)
      @mapping = {}

      yield
      constants(false).each do |const_name|
        instance = const_get(const_name, false)
        unless instance.is_a? self
          raise 'Enum constants must be instances of the Enum class (e.g. `Foo = new`)'
        end
        @mapping[instance.serialize] = instance
      end
    end

    def serialize
      @val
    end

    def deserialize(val)
      if @mapping.include? val
        @mapping[val]
      else
        raise "Invalid value for enum: #{val}"
      end
    end
  end
end
